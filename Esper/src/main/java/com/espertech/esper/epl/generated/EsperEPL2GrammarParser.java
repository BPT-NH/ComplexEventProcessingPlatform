  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser implements EsperEPL2GrammarParser_Const {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "DATAFLOW", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_DEF", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_COAL", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "CREATE_CTX_NESTED", "CREATE_CTX_PATTERN", "CREATE_DATAFLOW", "GOP", "GOPPARAM", "GOPPARAMITM", "GOPOUT", "GOPOUTITM", "GOPOUTTYP", "GOPCFG", "GOPCFGITM", "GOPCFGEPL", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "JSON_OBJECT", "JSON_ARRAY", "JSON_FIELD", "LBRACK", "RBRACK", "IDENT", "LPAREN", "RPAREN", "COLON", "LCURLY", "RCURLY", "GOES", "ATCHAR", "COMMA", "EQUALS", "DOT", "STAR", "FOLLOWED_BY", "LT", "GT", "QUESTION", "BOR", "PLUS", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int FLOAT_SUFFIX=385;
    public static final int NUMERIC_PARAM_LIST=131;
    public static final int GOPCFGITM=297;
    public static final int OUTERJOIN_EXPR=175;
    public static final int CREATE_COL_TYPE_LIST=256;
    public static final int MERGE_INS=275;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int CREATE_CTX_FIXED=281;
    public static final int RPAREN=327;
    public static final int LNOT=363;
    public static final int INC=367;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=343;
    public static final int STREAM_EXPR=174;
    public static final int MATCHES=116;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=140;
    public static final int REGEXP=9;
    public static final int GOES=331;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=134;
    public static final int MATCH_UNTIL_RANGE_CLOSED=254;
    public static final int RBRACK=324;
    public static final int GE=350;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=139;
    public static final int EVENT_FILTER_NOT_IN=150;
    public static final int NUM_DOUBLE=307;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=221;
    public static final int MEDIAN=23;
    public static final int GROUP=44;
    public static final int SUBSELECT_GROUP_EXPR=227;
    public static final int YEAR_PART=207;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=358;
    public static final int EXPRCOL=198;
    public static final int SL_COMMENT=378;
    public static final int NULL_TYPE=306;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=252;
    public static final int GT=339;
    public static final int LAND=375;
    public static final int EVENT_PROP_EXPR=183;
    public static final int LBRACK=323;
    public static final int VIEW_EXPR=156;
    public static final int MERGE_UPD=274;
    public static final int CREATE_SCHEMA_DEF=270;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=141;
    public static final int ON_MERGE_EXPR=244;
    public static final int TIMEPERIOD_SEC=100;
    public static final int ON_SELECT_EXPR=242;
    public static final int TICKED_STRING_LITERAL=359;
    public static final int SUM=18;
    public static final int JSON_ARRAY=321;
    public static final int HexDigit=383;
    public static final int AT=86;
    public static final int AS=17;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int LEFT=38;
    public static final int AVG=19;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int PARTITIONITEM=299;
    public static final int DATABASE_JOIN_EXPR=158;
    public static final int IDENT=325;
    public static final int PLUS=342;
    public static final int EVENT_PROP_INDEXED=186;
    public static final int CREATE_SCHEMA_EXPR=268;
    public static final int CREATE_INDEX_EXPR=236;
    public static final int ACCESS_AGG=265;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int RIGHT_OUTERJOIN_EXPR=178;
    public static final int BY=43;
    public static final int MATCHREC_DEFINE=316;
    public static final int MERGE=121;
    public static final int MERGE_UNM=272;
    public static final int FOLLOWMAX_END=357;
    public static final int LEFT_OUTERJOIN_EXPR=177;
    public static final int GROUP_BY_EXPR=180;
    public static final int EPL_EXPR=308;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int GOPOUTITM=294;
    public static final int MINUS=352;
    public static final int INDEXCOL=199;
    public static final int SEMI=376;
    public static final int STAR_ASSIGN=370;
    public static final int FIRST_AGGREG=262;
    public static final int COLON=328;
    public static final int PREVIOUSTAIL=70;
    public static final int VALUE_NULL=108;
    public static final int NOT_IN_SET=215;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=187;
    public static final int NOT_IN_SUBSELECT_EXPR=230;
    public static final int GUARD_EXPR=154;
    public static final int RCURLY=330;
    public static final int EXISTS_SUBSELECT_EXPR=228;
    public static final int WEEK_PART=209;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=171;
    public static final int LW=76;
    public static final int LT=338;
    public static final int CREATE_CTX=280;
    public static final int ORDER_BY_EXPR=181;
    public static final int NEW_ITEM=277;
    public static final int MOD_ASSIGN=371;
    public static final int IN_SUBSELECT_QUERY_EXPR=231;
    public static final int JSON_FIELD=322;
    public static final int COUNT=26;
    public static final int EQUALS=334;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int MATCHREC_AFTER_SKIP=314;
    public static final int ESCAPE=10;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=169;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=167;
    public static final int EVENT_FILTER_BETWEEN=151;
    public static final int COALESCE=22;
    public static final int FLOAT_TYPE=302;
    public static final int ANNOTATION_VALUE=261;
    public static final int CLASS_IDENT=153;
    public static final int MATCHREC_PATTERN_ALTER=312;
    public static final int CREATE_WINDOW_EXPR=237;
    public static final int PROPERTY_SELECTION_STREAM=143;
    public static final int ON_DELETE_EXPR=241;
    public static final int ON=41;
    public static final int DELETE=81;
    public static final int INT_TYPE=300;
    public static final int EVAL_BITWISE_EXPR=161;
    public static final int EVERY_EXPR=14;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int STRING_TYPE=304;
    public static final int MATCHREC_DEFINE_ITEM=317;
    public static final int STDDEV=24;
    public static final int OUTPUT=50;
    public static final int WEEKDAY_OPERATOR=233;
    public static final int WHERE=16;
    public static final int DEC=369;
    public static final int GOPOUT=293;
    public static final int BXOR_ASSIGN=372;
    public static final int SNAPSHOT=82;
    public static final int AFTER_LIMIT_EXPR=192;
    public static final int MAX=20;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int CONTEXT=126;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CREATE_CTX_CAT=284;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=188;
    public static final int BOR_ASSIGN=373;
    public static final int COMMA=333;
    public static final int PARTITION=115;
    public static final int IS=42;
    public static final int WHEN_LIMIT_EXPR=195;
    public static final int SOME=49;
    public static final int MATCHREC_MEASURE_ITEM=319;
    public static final int EQUAL=362;
    public static final int EVENT_FILTER_NOT_BETWEEN=152;
    public static final int IN_RANGE=224;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int PROPERTY_WILDCARD_SELECT=144;
    public static final int INSERTINTO_EXPR=197;
    public static final int UNIDIRECTIONAL=63;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=255;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int NOT_BETWEEN=216;
    public static final int EVAL_OR_EXPR=163;
    public static final int MATCHREC_PATTERN_ATOM=310;
    public static final int BAND=345;
    public static final int QUOTED_STRING_LITERAL=344;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=340;
    public static final int EVENT_FILTER_IDENT=145;
    public static final int UnicodeEscape=381;
    public static final int DBSELECT_EXPR=219;
    public static final int FOLLOWMAX_BEGIN=356;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=267;
    public static final int DBFROM_CLAUSE=220;
    public static final int LE=349;
    public static final int EVAL_IDENT=170;
    public static final int CRONTAB_LIMIT_EXPR=193;
    public static final int STAR=336;
    public static final int DOT_EXPR=203;
    public static final int ISTREAM=60;
    public static final int MOD=354;
    public static final int LIB_FUNC_CHAIN=202;
    public static final int MONTH_PART=208;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=201;
    public static final int FULL_OUTERJOIN_EXPR=179;
    public static final int CREATE_CTX_NESTED=287;
    public static final int MATCHREC_PATTERN_CONCAT=311;
    public static final int USING=120;
    public static final int CAST_EXPR=235;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=348;
    public static final int LAST_AGGREG=263;
    public static final int NEWKW=124;
    public static final int HOUR_PART=211;
    public static final int FOLLOWED_BY=337;
    public static final int MATCHREC_PATTERN_NESTED=313;
    public static final int GOPPARAMITM=292;
    public static final int METHOD_JOIN_EXPR=250;
    public static final int CREATE_CTX_PART=282;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=138;
    public static final int CREATE_CTX_COAL=283;
    public static final int ELSE=30;
    public static final int MINUS_ASSIGN=368;
    public static final int INSERTINTO_STREAM_NAME=223;
    public static final int UNARY_MINUS=204;
    public static final int LCURLY=329;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int EVENT_FILTER_NOT_RANGE=148;
    public static final int WS=377;
    public static final int FOLLOWED_BY_ITEM=135;
    public static final int ON_SELECT_INSERT_EXPR=245;
    public static final int GOPPARAM=291;
    public static final int BNOT=364;
    public static final int EVAL_IS_EXPR=166;
    public static final int WHERE_EXPR=159;
    public static final int END=33;
    public static final int INNERJOIN_EXPR=176;
    public static final int TERM_LIMIT_EXPR=196;
    public static final int NOT_REGEXP=218;
    public static final int MATCH_UNTIL_EXPR=251;
    public static final int ANNOTATION=259;
    public static final int LONG_TYPE=301;
    public static final int MATCHREC_PATTERN=309;
    public static final int ATCHAR=332;
    public static final int MINUTE_PART=212;
    public static final int PATTERN_NOT_EXPR=137;
    public static final int SQL_NE=347;
    public static final int UPDATE_EXPR=266;
    public static final int LPAREN=326;
    public static final int IN_SUBSELECT_EXPR=229;
    public static final int BOOLEAN_TRUE=106;
    public static final int OR_EXPR=11;
    public static final int JSON_OBJECT=320;
    public static final int THEN=32;
    public static final int NOT_IN_RANGE=225;
    public static final int MATCHREC_INTERVAL=315;
    public static final int OFFSET=110;
    public static final int SECOND_PART=213;
    public static final int MATCH_RECOGNIZE=112;
    public static final int CASE2=29;
    public static final int BXOR=346;
    public static final int TIMEPERIOD_DAY=94;
    public static final int MERGE_MAT=273;
    public static final int EXISTS=74;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=165;
    public static final int CREATE_CTX_CATITEM=286;
    public static final int CREATE_VARIABLE_EXPR=249;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=253;
    public static final int PATTERN_FILTER_EXPR=136;
    public static final int LAST_OPERATOR=232;
    public static final int NUMBERSETSTAR=258;
    public static final int EVAL_AND_EXPR=162;
    public static final int SET=83;
    public static final int INSTANCEOF=77;
    public static final int EVENT_PROP_SIMPLE=184;
    public static final int MIN=21;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=271;
    public static final int EVAL_EQUALS_GROUP_EXPR=168;
    public static final int SCHEMA=62;
    public static final int BAND_ASSIGN=374;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=194;
    public static final int WHEN=31;
    public static final int PLUS_ASSIGN=366;
    public static final int DAY_PART=210;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=149;
    public static final int DIV=353;
    public static final int OBJECT_PARAM_ORDERED_EXPR=133;
    public static final int EXPRESSIONDECL=123;
    public static final int OctalEscape=382;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=214;
    public static final int FIRST=52;
    public static final int PRIOR=73;
    public static final int CAST=79;
    public static final int LOR=351;
    public static final int WILDCARD_SELECT=222;
    public static final int EXPONENT=384;
    public static final int PATTERN_INCL_EXPR=157;
    public static final int WHILE=119;
    public static final int BOOL_TYPE=305;
    public static final int GOPCFG=296;
    public static final int ANNOTATION_ARRAY=260;
    public static final int CASE=28;
    public static final int CREATE_EXPR=279;
    public static final int GOP=290;
    public static final int WINDOW_AGGREG=264;
    public static final int DIV_ASSIGN=365;
    public static final int CREATE_CTX_INIT=285;
    public static final int SQL=67;
    public static final int FULL=40;
    public static final int WEEKDAY=75;
    public static final int INSERT=54;
    public static final int ON_UPDATE_EXPR=243;
    public static final int ARRAY_EXPR=206;
    public static final int CREATE_COL_TYPE=257;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int SUBSELECT_EXPR=226;
    public static final int NUMERIC_PARAM_RANGE=130;
    public static final int CONCAT=200;
    public static final int ON_EXPR=239;
    public static final int NUM_LONG=360;
    public static final int TIME_PERIOD=205;
    public static final int DOUBLE_TYPE=303;
    public static final int ORDER_ELEMENT_EXPR=182;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=234;
    public static final int UNTIL=85;
    public static final int ON_SET_EXPR=248;
    public static final int NUM_INT=355;
    public static final int ON_EXPR_FROM=247;
    public static final int NUM_FLOAT=361;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=380;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=142;
    public static final int INNER=36;
    public static final int NUMERIC_PARAM_FREQUENCY=132;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=146;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=189;
    public static final int IRSTREAM=61;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=240;
    public static final int EVENT_FILTER_RANGE=147;
    public static final int INDEX=87;
    public static final int ML_COMMENT=379;
    public static final int TIMEPERIOD_LIMIT_EXPR=191;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int ALL=47;
    public static final int BOR=341;
    public static final int DOT=335;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int MATCHREC_MEASURES=318;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int HAVING_EXPR=160;
    public static final int MERGE_DEL=276;
    public static final int EVAL_EQUALS_EXPR=164;
    public static final int NOT_LIKE=217;
    public static final int EVENT_LIMIT_EXPR=190;
    public static final int ON_SELECT_INSERT_OUTPUT=246;
    public static final int CREATE_DATAFLOW=289;
    public static final int AFTER=117;
    public static final int MEASURES=113;
    public static final int AGG_FILTER_EXPR=278;
    public static final int CREATE_CTX_PATTERN=288;
    public static final int JOIN=37;
    public static final int GOPOUTTYP=295;
    public static final int ANY=48;
    public static final int OBSERVER_EXPR=155;
    public static final int CREATE_SCHEMA_EXPR_QUAL=269;
    public static final int EVENT_PROP_MAPPED=185;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int GOPCFGEPL=298;
    public static final int SELECTION_ELEMENT_EXPR=172;
    public static final int CREATE_WINDOW_SELECT_EXPR=238;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=173;
    public static final int DATAFLOW=129;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      private static java.util.Set<Integer> afterScriptTokens = new java.util.HashSet<Integer>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public synchronized static Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public synchronized static Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(INITIATED, "'initiated'");
    	parserTokenParaphases.put(TERMINATED, "'terminated'");
    	parserTokenParaphases.put(USING, "'using'");
    	parserTokenParaphases.put(EXPRESSIONDECL, "'expression'");
    	parserTokenParaphases.put(NEWKW, "'new'");
    	parserTokenParaphases.put(DATAFLOW, "'dataflow'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      public synchronized static java.util.Set<Integer> getAfterScriptTokens() {
        if (afterScriptTokens.size() == 0) {
    	afterScriptTokens.add(CREATE);
    	afterScriptTokens.add(EXPRESSIONDECL);
    	afterScriptTokens.add(SELECT);
    	afterScriptTokens.add(INSERT);
    	afterScriptTokens.add(ON);
    	afterScriptTokens.add(DELETE);
    	afterScriptTokens.add(UPDATE);
    	afterScriptTokens.add(ATCHAR);
        }
        return afterScriptTokens;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1978);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1982);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1988);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1992); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule2007);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule2011);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule2017);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule2021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule2050);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule2054); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startJsonValueRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startJsonValueRule_return startJsonValueRule() throws RecognitionException {
        EsperEPL2GrammarParser.startJsonValueRule_return retval = new EsperEPL2GrammarParser.startJsonValueRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF12=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue11 = null;
        CommonTree EOF12_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_startJsonValueRule2067);
            jsonvalue11=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue11.getTree());
            EOF12=(Token)match(input,EOF,FOLLOW_EOF_in_startJsonValueRule2071); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token array=null;
        Token name=null;
        Token EXPRESSIONDECL13=null;
        Token RBRACK15=null;
        Token LPAREN17=null;
        Token RPAREN19=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier14 = null;
        EsperEPL2GrammarParser.expressionDialect_return expressionDialect16 = null;
        EsperEPL2GrammarParser.columnList_return columnList18 = null;
        EsperEPL2GrammarParser.expressionDef_return expressionDef20 = null;
        CommonTree array_tree=null;
        CommonTree name_tree=null;
        CommonTree EXPRESSIONDECL13_tree=null;
        CommonTree RBRACK15_tree=null;
        CommonTree LPAREN17_tree=null;
        CommonTree RPAREN19_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionDef=new RewriteRuleSubtreeStream(adaptor,"rule expressionDef");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_expressionDialect=new RewriteRuleSubtreeStream(adaptor,"rule expressionDialect");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            EXPRESSIONDECL13=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl2090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL13);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==LBRACK) ) {
                    int LA3_8 = input.LA(3);
                    if ( (LA3_8==RBRACK) ) {
                        alt3=1;
                    }
                }
                else if ( (LA3_1==IDENT||LA3_1==DOT) ) {
                    alt3=1;
                }
            }
            else if ( (LA3_0==EVENTS||LA3_0==TICKED_STRING_LITERAL) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_expressionDecl2092);
                    classIdentifier14=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier14.getTree());
                    }
                    break;
            }
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LBRACK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    {
                    array=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDecl2098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(array);
                    RBRACK15=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDecl2100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK15);
                    }
                    break;
            }
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( (LA5_0==IDENT) ) {
                int LA5_1 = input.LA(2);
                if ( (LA5_1==COLON) ) {
                    alt5=1;
                }
            }
            switch (alt5) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionDialect_in_expressionDecl2104);
                    expressionDialect16=expressionDialect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionDialect.add(expressionDialect16.getTree());
                    }
                    break;
            }
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl2109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt7=2;
            int LA7_0 = input.LA(1);
            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    {
                    LPAREN17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionDecl2112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN17);
                    int alt6=2;
                    int LA6_0 = input.LA(1);
                    if ( (LA6_0==IDENT) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_columnList_in_expressionDecl2114);
                            columnList18=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList18.getTree());
                            }
                            break;
                    }
                    RPAREN19=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionDecl2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN19);
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionDef_in_expressionDecl2121);
            expressionDef20=expressionDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDef.add(expressionDef20.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_array=new RewriteRuleTokenStream(adaptor,"token array",array);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_expressionDef.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_expressionDialect.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDialect.nextTree());
                }
                stream_expressionDialect.reset();
                if ( stream_array.hasNext() ) {
                    adaptor.addChild(root_1, stream_array.nextNode());
                }
                stream_array.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDialect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDialect_return expressionDialect() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDialect_return retval = new EsperEPL2GrammarParser.expressionDialect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token COLON21=null;
        CommonTree d_tree=null;
        CommonTree COLON21_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            d=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDialect2164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(d);
            COLON21=(Token)match(input,COLON,FOLLOW_COLON_in_expressionDialect2166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON21);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_COLON.nextNode(), root_1);
                adaptor.addChild(root_1, stream_d.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDef_return expressionDef() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDef_return retval = new EsperEPL2GrammarParser.expressionDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY22=null;
        Token RCURLY25=null;
        Token LBRACK26=null;
        Token RBRACK28=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl23 = null;
        EsperEPL2GrammarParser.expression_return expression24 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant27 = null;
        CommonTree LCURLY22_tree=null;
        CommonTree RCURLY25_tree=null;
        CommonTree LBRACK26_tree=null;
        CommonTree RBRACK28_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        try {
            int alt9=2;
            int LA9_0 = input.LA(1);
            if ( (LA9_0==LCURLY) ) {
                alt9=1;
            }
            else if ( (LA9_0==LBRACK) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    LCURLY22=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDef2188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY22);
                    int alt8=2;
                    int LA8_0 = input.LA(1);
                    if ( (LA8_0==IDENT) ) {
                        int LA8_1 = input.LA(2);
                        if ( (LA8_1==GOES) ) {
                            alt8=1;
                        }
                    }
                    else if ( (LA8_0==LPAREN) ) {
                        int LA8_2 = input.LA(2);
                        if ( (LA8_2==IDENT) ) {
                            int LA8_123 = input.LA(3);
                            if ( (LA8_123==COMMA) ) {
                                alt8=1;
                            }
                            else if ( (LA8_123==RPAREN) ) {
                                int LA8_188 = input.LA(4);
                                if ( (LA8_188==GOES) ) {
                                    alt8=1;
                                }
                            }
                        }
                    }
                    switch (alt8) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDef2190);
                            expressionLambdaDecl23=expressionLambdaDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl23.getTree());
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_expressionDef2193);
                    expression24=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression24.getTree());
                    RCURLY25=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDef2195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY25);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOES, "GOES"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( stream_expressionLambdaDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                        }
                        stream_expressionLambdaDecl.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    LBRACK26=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDef2211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK26);
                    pushFollow(FOLLOW_stringconstant_in_expressionDef2213);
                    stringconstant27=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant27.getTree());
                    RBRACK28=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDef2215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK28);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSIONDECL, "EXPRESSIONDECL"), root_1);
                        adaptor.addChild(root_1, stream_stringconstant.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN29=null;
        Token RPAREN31=null;
        Token GOES32=null;
        EsperEPL2GrammarParser.columnList_return columnList30 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN29_tree=null;
        CommonTree RPAREN31_tree=null;
        CommonTree GOES32_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);
            if ( (LA10_0==IDENT) ) {
                alt10=1;
            }
            else if ( (LA10_0==LPAREN) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl2238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN29=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl2243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN29);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl2245);
                    columnList30=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList30.getTree());
                    RPAREN31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl2247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN31);
                    }
                    }
                    break;
            }
            GOES32=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES32);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR33=null;
        Token char_literal35=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier34 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum36 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum37 = null;
        CommonTree ATCHAR33_tree=null;
        CommonTree char_literal35_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR33=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR33);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2288);
            classIdentifier34=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier34.getTree());
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( (LA12_0==LPAREN) ) {
                int LA12_1 = input.LA(2);
                if ( (LA12_1==IDENT) ) {
                    int LA12_15 = input.LA(3);
                    if ( (LA12_15==EQUALS) ) {
                        int LA12_34 = input.LA(4);
                        if ( ((LA12_34>=BOOLEAN_TRUE && LA12_34<=VALUE_NULL)||LA12_34==NUM_DOUBLE||LA12_34==LCURLY||LA12_34==ATCHAR||(LA12_34>=PLUS && LA12_34<=QUOTED_STRING_LITERAL)||LA12_34==MINUS||LA12_34==NUM_INT||(LA12_34>=NUM_LONG && LA12_34<=NUM_FLOAT)) ) {
                            alt12=1;
                        }
                    }
                }
                else if ( ((LA12_1>=BOOLEAN_TRUE && LA12_1<=VALUE_NULL)||LA12_1==NUM_DOUBLE||LA12_1==RPAREN||LA12_1==LCURLY||LA12_1==ATCHAR||(LA12_1>=PLUS && LA12_1<=QUOTED_STRING_LITERAL)||LA12_1==MINUS||LA12_1==NUM_INT||(LA12_1>=NUM_LONG && LA12_1<=NUM_FLOAT)) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    {
                    char_literal35=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal35);
                    int alt11=3;
                    int LA11_0 = input.LA(1);
                    if ( (LA11_0==IDENT) ) {
                        alt11=1;
                    }
                    else if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||LA11_0==LCURLY||LA11_0==ATCHAR||(LA11_0>=PLUS && LA11_0<=QUOTED_STRING_LITERAL)||LA11_0==MINUS||LA11_0==NUM_INT||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)) ) {
                        alt11=2;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2296);
                            elementValuePairsNoEnum36=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum36.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2300);
                            elementValueNoEnum37=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum37.getTree());
                            }
                            break;
                    }
                    char_literal38=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal38);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR39=null;
        Token char_literal41=null;
        Token char_literal44=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier40 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum42 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum43 = null;
        CommonTree ATCHAR39_tree=null;
        CommonTree char_literal41_tree=null;
        CommonTree char_literal44_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR39=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR39);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2348);
            classIdentifier40=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier40.getTree());
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( (LA14_0==LPAREN) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    char_literal41=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal41);
                    int alt13=3;
                    int LA13_0 = input.LA(1);
                    if ( (LA13_0==IDENT) ) {
                        int LA13_1 = input.LA(2);
                        if ( (LA13_1==EQUALS) ) {
                            alt13=1;
                        }
                        else if ( (LA13_1==RPAREN||LA13_1==DOT) ) {
                            alt13=2;
                        }
                    }
                    else if ( (LA13_0==EVENTS||(LA13_0>=BOOLEAN_TRUE && LA13_0<=VALUE_NULL)||LA13_0==NUM_DOUBLE||LA13_0==LCURLY||LA13_0==ATCHAR||(LA13_0>=PLUS && LA13_0<=QUOTED_STRING_LITERAL)||LA13_0==MINUS||LA13_0==NUM_INT||(LA13_0>=TICKED_STRING_LITERAL && LA13_0<=NUM_FLOAT)) ) {
                        alt13=2;
                    }
                    switch (alt13) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2356);
                            elementValuePairsEnum42=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum42.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2360);
                            elementValueEnum43=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum43.getTree());
                            }
                            break;
                    }
                    char_literal44=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal44);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA46=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum45 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum47 = null;
        CommonTree COMMA46_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2406);
            elementValuePairNoEnum45=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum45.getTree());
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);
                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }
                switch (alt15) {
            	case 1 :
            	    {
            	    COMMA46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2409); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2412);
            	    elementValuePairNoEnum47=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum47.getTree());
            	    }
            	    break;
            	default :
            	    break loop15;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA49=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum48 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum50 = null;
        CommonTree COMMA49_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2433);
            elementValuePairEnum48=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum48.getTree());
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);
                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }
                switch (alt16) {
            	case 1 :
            	    {
            	    COMMA49=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2436); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2439);
            	    elementValuePairEnum50=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum50.getTree());
            	    }
            	    break;
            	default :
            	    break loop16;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal51=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree i_tree=null;
        CommonTree char_literal51_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal51=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal51);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2466);
            elementValueNoEnum52=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal53=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum54 = null;
        CommonTree i_tree=null;
        CommonTree char_literal53_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal53=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal53);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2507);
            elementValueEnum54=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum54.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum55 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum56 = null;
        EsperEPL2GrammarParser.constant_return constant57 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt17=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt17=1;
                }
                break;
            case LCURLY:
                {
                alt17=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2538);
                    annotationEnum55=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum55.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2549);
                    elementValueArrayNoEnum56=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum56.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2562);
                    constant57=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant57.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum58 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum59 = null;
        EsperEPL2GrammarParser.constant_return constant60 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier61 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt18=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt18=1;
                }
                break;
            case LCURLY:
                {
                alt18=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt18=3;
                }
                break;
            case EVENTS:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt18=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);
                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2585);
                    annotationEnum58=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum58.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2596);
                    elementValueArrayEnum59=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum59.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2609);
                    constant60=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant60.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2617);
                    classIdentifier61=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier61.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal62=null;
        Token char_literal64=null;
        Token char_literal66=null;
        Token char_literal67=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum63 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum65 = null;
        CommonTree char_literal62_tree=null;
        CommonTree char_literal64_tree=null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal67_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal62=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal62);
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( ((LA20_0>=BOOLEAN_TRUE && LA20_0<=VALUE_NULL)||LA20_0==NUM_DOUBLE||LA20_0==LCURLY||LA20_0==ATCHAR||(LA20_0>=PLUS && LA20_0<=QUOTED_STRING_LITERAL)||LA20_0==MINUS||LA20_0==NUM_INT||(LA20_0>=NUM_LONG && LA20_0<=NUM_FLOAT)) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2640);
                    elementValueNoEnum63=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum63.getTree());
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);
                        if ( (LA19_0==COMMA) ) {
                            int LA19_1 = input.LA(2);
                            if ( ((LA19_1>=BOOLEAN_TRUE && LA19_1<=VALUE_NULL)||LA19_1==NUM_DOUBLE||LA19_1==LCURLY||LA19_1==ATCHAR||(LA19_1>=PLUS && LA19_1<=QUOTED_STRING_LITERAL)||LA19_1==MINUS||LA19_1==NUM_INT||(LA19_1>=NUM_LONG && LA19_1<=NUM_FLOAT)) ) {
                                alt19=1;
                            }
                        }
                        switch (alt19) {
                    	case 1 :
                    	    {
                    	    char_literal64=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2643); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal64);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2645);
                    	    elementValueNoEnum65=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum65.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop19;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==COMMA) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    char_literal66=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal66);
                    }
                    break;
            }
            char_literal67=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal67);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal68=null;
        Token char_literal70=null;
        Token char_literal72=null;
        Token char_literal73=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum69 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum71 = null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal70_tree=null;
        CommonTree char_literal72_tree=null;
        CommonTree char_literal73_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal68=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal68);
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==EVENTS||(LA23_0>=BOOLEAN_TRUE && LA23_0<=VALUE_NULL)||LA23_0==NUM_DOUBLE||LA23_0==IDENT||LA23_0==LCURLY||LA23_0==ATCHAR||(LA23_0>=PLUS && LA23_0<=QUOTED_STRING_LITERAL)||LA23_0==MINUS||LA23_0==NUM_INT||(LA23_0>=TICKED_STRING_LITERAL && LA23_0<=NUM_FLOAT)) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2688);
                    elementValueEnum69=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum69.getTree());
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( (LA22_0==COMMA) ) {
                            int LA22_1 = input.LA(2);
                            if ( (LA22_1==EVENTS||(LA22_1>=BOOLEAN_TRUE && LA22_1<=VALUE_NULL)||LA22_1==NUM_DOUBLE||LA22_1==IDENT||LA22_1==LCURLY||LA22_1==ATCHAR||(LA22_1>=PLUS && LA22_1<=QUOTED_STRING_LITERAL)||LA22_1==MINUS||LA22_1==NUM_INT||(LA22_1>=TICKED_STRING_LITERAL && LA22_1<=NUM_FLOAT)) ) {
                                alt22=1;
                            }
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    char_literal70=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2691); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal70);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2693);
                    	    elementValueEnum71=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum71.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==COMMA) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    char_literal72=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal72);
                    }
                    break;
            }
            char_literal73=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal73);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr74 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr75 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr76 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr77 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr78 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr79 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr80 = null;
        EsperEPL2GrammarParser.createExpressionExpr_return createExpressionExpr81 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr82 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr83 = null;
        EsperEPL2GrammarParser.createDataflow_return createDataflow84 = null;
        EsperEPL2GrammarParser.fafDelete_return fafDelete85 = null;
        EsperEPL2GrammarParser.fafUpdate_return fafUpdate86 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr87 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==CONTEXT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2736);
                    contextExpr74=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr74.getTree());
                    }
                    break;
            }
            int alt26=12;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt26=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt26=2;
                    }
                    break;
                case CONTEXT:
                    {
                    alt26=6;
                    }
                    break;
                case DATAFLOW:
                    {
                    alt26=10;
                    }
                    break;
                case EXPRESSIONDECL:
                    {
                    alt26=7;
                    }
                    break;
                case IDENT:
                    {
                    switch ( input.LA(3) ) {
                    case INDEX:
                        {
                        alt26=3;
                        }
                        break;
                    case SCHEMA:
                        {
                        alt26=5;
                        }
                        break;
                    case VARIABLE:
                        {
                        alt26=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case VARIABLE:
                    {
                    alt26=4;
                    }
                    break;
                case INDEX:
                    {
                    alt26=3;
                    }
                    break;
                case SCHEMA:
                    {
                    alt26=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt26=8;
                }
                break;
            case UPDATE:
                {
                int LA26_5 = input.LA(2);
                if ( (LA26_5==ISTREAM) ) {
                    alt26=9;
                }
                else if ( (LA26_5==EVENTS||LA26_5==IDENT||LA26_5==TICKED_STRING_LITERAL) ) {
                    alt26=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 5, input);
                    throw nvae;
                }
                }
                break;
            case DELETE:
                {
                alt26=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);
                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2743);
                    selectExpr75=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr75.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2748);
                    createWindowExpr76=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr76.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2753);
                    createIndexExpr77=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr77.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2758);
                    createVariableExpr78=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr78.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2763);
                    createSchemaExpr79=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr79.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2768);
                    createContextExpr80=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr80.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_createExpressionExpr_in_eplExpression2773);
                    createExpressionExpr81=createExpressionExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createExpressionExpr81.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2778);
                    onExpr82=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr82.getTree());
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2783);
                    updateExpr83=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr83.getTree());
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_createDataflow_in_eplExpression2788);
                    createDataflow84=createDataflow();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createDataflow84.getTree());
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_fafDelete_in_eplExpression2793);
                    fafDelete85=fafDelete();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fafDelete85.getTree());
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_fafUpdate_in_eplExpression2798);
                    fafUpdate86=fafUpdate();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fafUpdate86.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==FOR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2801);
                    forExpr87=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr87.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT88=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT88_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT88=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT88);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT89=null;
        Token SELECT91=null;
        Token FROM93=null;
        Token WHERE96=null;
        Token GROUP98=null;
        Token BY99=null;
        Token HAVING101=null;
        Token OUTPUT103=null;
        Token ORDER105=null;
        Token BY106=null;
        Token ROW_LIMIT_EXPR108=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr90 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause92 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause94 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog95 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause97 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr100 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause102 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit104 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr107 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit109 = null;
        CommonTree INSERT89_tree=null;
        CommonTree SELECT91_tree=null;
        CommonTree FROM93_tree=null;
        CommonTree WHERE96_tree=null;
        CommonTree GROUP98_tree=null;
        CommonTree BY99_tree=null;
        CommonTree HAVING101_tree=null;
        CommonTree OUTPUT103_tree=null;
        CommonTree ORDER105_tree=null;
        CommonTree BY106_tree=null;
        CommonTree ROW_LIMIT_EXPR108_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==INSERT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    INSERT89=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2842); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2845);
                    insertIntoExpr90=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr90.getTree());
                    }
                    break;
            }
            SELECT91=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2851); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2854);
            selectClause92=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause92.getTree());
            FROM93=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2858); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2861);
            fromClause94=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause94.getTree());
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==MATCH_RECOGNIZE) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2865);
                    matchRecog95=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog95.getTree());
                    }
                    break;
            }
            int alt30=2;
            int LA30_0 = input.LA(1);
            if ( (LA30_0==WHERE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    {
                    WHERE96=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2871); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2874);
                    whereClause97=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause97.getTree());
                    }
                    break;
            }
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==GROUP) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    {
                    GROUP98=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2881); if (state.failed) return retval;
                    BY99=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2884); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2887);
                    groupByListExpr100=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr100.getTree());
                    }
                    break;
            }
            int alt32=2;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==HAVING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    HAVING101=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2894); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2897);
                    havingClause102=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause102.getTree());
                    }
                    break;
            }
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==OUTPUT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    OUTPUT103=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2904); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2907);
                    outputLimit104=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit104.getTree());
                    }
                    break;
            }
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==ORDER) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    ORDER105=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2914); if (state.failed) return retval;
                    BY106=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2917); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2920);
                    orderByListExpr107=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr107.getTree());
                    }
                    break;
            }
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==ROW_LIMIT_EXPR) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR108=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2927); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2930);
                    rowLimit109=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit109.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON110=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr111 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr112 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr113 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr114 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert115 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr116 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr117 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr118 = null;
        CommonTree ON110_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON110=(Token)match(input,ON,FOLLOW_ON_in_onExpr2945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON110);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2947);
            onStreamExpr111=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr111.getTree());
            int alt39=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt39=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt39=2;
                }
                break;
            case SET:
                {
                alt39=3;
                }
                break;
            case UPDATE:
                {
                alt39=4;
                }
                break;
            case MERGE:
                {
                alt39=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);
                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2952);
                    onDeleteExpr112=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr112.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2956);
                    onSelectExpr113=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr113.getTree());
                    int alt38=2;
                    int LA38_0 = input.LA(1);
                    if ( (LA38_0==INSERT) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            {
                            int cnt36=0;
                            loop36:
                            do {
                                int alt36=2;
                                int LA36_0 = input.LA(1);
                                if ( (LA36_0==INSERT) ) {
                                    alt36=1;
                                }
                                switch (alt36) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2959);
                            	    onSelectInsertExpr114=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr114.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt36 >= 1 ) break loop36;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(36, input);
                                        throw eee;
                                }
                                cnt36++;
                            } while (true);
                            int alt37=2;
                            int LA37_0 = input.LA(1);
                            if ( (LA37_0==OUTPUT) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2962);
                                    outputClauseInsert115=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert115.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2969);
                    onSetExpr116=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr116.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2973);
                    onUpdateExpr117=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr117.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2977);
                    onMergeExpr118=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr118.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS121=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression119 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression120 = null;
        CommonTree i_tree=null;
        CommonTree AS121_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==EVENTS||LA40_0==IDENT||LA40_0==TICKED_STRING_LITERAL) ) {
                alt40=1;
            }
            else if ( (LA40_0==PATTERN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr3022);
                    eventFilterExpression119=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression119.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr3026);
                    patternInclusionExpression120=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression120.getTree());
                    }
                    break;
            }
            int alt41=3;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AS) ) {
                alt41=1;
            }
            else if ( (LA41_0==IDENT) ) {
                alt41=2;
            }
            switch (alt41) {
                case 1 :
                    {
                    AS121=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr3030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS121);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token UPDATE122=null;
        Token ISTREAM123=null;
        EsperEPL2GrammarParser.updateDetails_return updateDetails124 = null;
        CommonTree UPDATE122_tree=null;
        CommonTree ISTREAM123_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_updateDetails=new RewriteRuleSubtreeStream(adaptor,"rule updateDetails");
        try {
            {
            UPDATE122=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr3071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE122);
            ISTREAM123=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr3073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM123);
            pushFollow(FOLLOW_updateDetails_in_updateExpr3075);
            updateDetails124=updateDetails();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateDetails.add(updateDetails124.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_updateDetails.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateDetails_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateDetails_return updateDetails() throws RecognitionException {
        EsperEPL2GrammarParser.updateDetails_return retval = new EsperEPL2GrammarParser.updateDetails_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS126=null;
        Token SET127=null;
        Token COMMA129=null;
        Token WHERE131=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier125 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment128 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment130 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause132 = null;
        CommonTree i_tree=null;
        CommonTree AS126_tree=null;
        CommonTree SET127_tree=null;
        CommonTree COMMA129_tree=null;
        CommonTree WHERE131_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifier_in_updateDetails3097);
            classIdentifier125=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier125.getTree());
            int alt42=3;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    {
                    AS126=(Token)match(input,AS,FOLLOW_AS_in_updateDetails3100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS126);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateDetails3104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateDetails3110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET127=(Token)match(input,SET,FOLLOW_SET_in_updateDetails3116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET127);
            pushFollow(FOLLOW_onSetAssignment_in_updateDetails3118);
            onSetAssignment128=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment128.getTree());
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);
                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }
                switch (alt43) {
            	case 1 :
            	    {
            	    COMMA129=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateDetails3121); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA129);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateDetails3123);
            	    onSetAssignment130=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment130.getTree());
            	    }
            	    break;
            	default :
            	    break loop43;
                }
            } while (true);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==WHERE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    WHERE131=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateDetails3131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE131);
                    pushFollow(FOLLOW_whereClause_in_updateDetails3133);
                    whereClause132=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause132.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE, "UPDATE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE133=null;
        Token INTO134=null;
        Token AS135=null;
        Token WHERE136=null;
        EsperEPL2GrammarParser.whereClause_return whereClause137 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem138 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE133_tree=null;
        CommonTree INTO134_tree=null;
        CommonTree AS135_tree=null;
        CommonTree WHERE136_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE133=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr3168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE133);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==INTO) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    INTO134=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr3170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO134);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt46=3;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            else if ( (LA46_0==IDENT) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    {
                    AS135=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr3178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS135);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    WHERE136=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr3195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE136);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr3197);
                    whereClause137=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause137.getTree());
                    }
                    break;
            }
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);
                if ( (LA48_0==WHEN) ) {
                    alt48=1;
                }
                switch (alt48) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr3205);
            	    mergeItem138=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem138.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched139 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched140 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHEN) ) {
                int LA49_1 = input.LA(2);
                if ( (LA49_1==MATCHED) ) {
                    alt49=1;
                }
                else if ( (LA49_1==NOT_EXPR) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem3239);
                    mergeMatched139=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched139.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem3243);
                    mergeUnmatched140=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched140.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN141=null;
        Token MATCHED142=null;
        Token AND_EXPR143=null;
        EsperEPL2GrammarParser.expression_return expression144 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem145 = null;
        CommonTree WHEN141_tree=null;
        CommonTree MATCHED142_tree=null;
        CommonTree AND_EXPR143_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN141=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched3256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN141);
            MATCHED142=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched3258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED142);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AND_EXPR) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    AND_EXPR143=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched3261); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR143);
                    pushFollow(FOLLOW_expression_in_mergeMatched3263);
                    expression144=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression144.getTree());
                    }
                    break;
            }
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==THEN) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched3267);
            	    mergeMatchedItem145=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem145.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN146=null;
        Token SET147=null;
        Token COMMA149=null;
        Token WHERE151=null;
        Token WHERE153=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment148 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment150 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause152 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause154 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert155 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN146_tree=null;
        CommonTree SET147_tree=null;
        CommonTree COMMA149_tree=null;
        CommonTree WHERE151_tree=null;
        CommonTree WHERE153_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN146=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN146);
            int alt55=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt55=1;
                }
                break;
            case DELETE:
                {
                alt55=2;
                }
                break;
            case INSERT:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);
                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET147=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET147);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3312);
                    onSetAssignment148=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment148.getTree());
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);
                        if ( (LA52_0==COMMA) ) {
                            alt52=1;
                        }
                        switch (alt52) {
                    	case 1 :
                    	    {
                    	    COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3315); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA149);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3317);
                    	    onSetAssignment150=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment150.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop52;
                        }
                    } while (true);
                    }
                    int alt53=2;
                    int LA53_0 = input.LA(1);
                    if ( (LA53_0==WHERE) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            {
                            WHERE151=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3323); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE151);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3325);
                            whereClause152=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause152.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt54=2;
                    int LA54_0 = input.LA(1);
                    if ( (LA54_0==WHERE) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            {
                            WHERE153=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3340); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE153);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3342);
                            whereClause154=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause154.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3353);
                    mergeInsert155=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN156=null;
        Token NOT_EXPR157=null;
        Token MATCHED158=null;
        Token AND_EXPR159=null;
        EsperEPL2GrammarParser.expression_return expression160 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem161 = null;
        CommonTree WHEN156_tree=null;
        CommonTree NOT_EXPR157_tree=null;
        CommonTree MATCHED158_tree=null;
        CommonTree AND_EXPR159_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN156=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN156);
            NOT_EXPR157=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR157);
            MATCHED158=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED158);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==AND_EXPR) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    AND_EXPR159=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR159);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3419);
                    expression160=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression160.getTree());
                    }
                    break;
            }
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);
                if ( (LA57_0==THEN) ) {
                    alt57=1;
                }
                switch (alt57) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3423);
            	    mergeUnmatchedItem161=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem161.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN162=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert163 = null;
        CommonTree THEN162_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN162=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3450); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3453);
            mergeInsert163=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert163.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT164=null;
        Token INTO165=null;
        Token LPAREN167=null;
        Token RPAREN169=null;
        Token SELECT170=null;
        Token WHERE172=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier166 = null;
        EsperEPL2GrammarParser.columnList_return columnList168 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList171 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause173 = null;
        CommonTree INSERT164_tree=null;
        CommonTree INTO165_tree=null;
        CommonTree LPAREN167_tree=null;
        CommonTree RPAREN169_tree=null;
        CommonTree SELECT170_tree=null;
        CommonTree WHERE172_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT164=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT164);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==INTO) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    INTO165=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO165);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3473);
                    classIdentifier166=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier166.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==LPAREN) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    LPAREN167=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN167);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3480);
                    columnList168=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList168.getTree());
                    RPAREN169=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN169);
                    }
                    break;
            }
            SELECT170=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT170);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3488);
            selectionList171=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList171.getTree());
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==WHERE) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    WHERE172=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE172);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3493);
                    whereClause173=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause173.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token INSERT174=null;
        Token SELECT176=null;
        Token AND_EXPR177=null;
        Token DISTINCT178=null;
        Token WHERE181=null;
        Token GROUP183=null;
        Token BY184=null;
        Token HAVING186=null;
        Token ORDER188=null;
        Token BY189=null;
        Token ROW_LIMIT_EXPR191=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr175 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList179 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom180 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause182 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr185 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause187 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr190 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit192 = null;
        CommonTree d_tree=null;
        CommonTree INSERT174_tree=null;
        CommonTree SELECT176_tree=null;
        CommonTree AND_EXPR177_tree=null;
        CommonTree DISTINCT178_tree=null;
        CommonTree WHERE181_tree=null;
        CommonTree GROUP183_tree=null;
        CommonTree BY184_tree=null;
        CommonTree HAVING186_tree=null;
        CommonTree ORDER188_tree=null;
        CommonTree BY189_tree=null;
        CommonTree ROW_LIMIT_EXPR191_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==INSERT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    INSERT174=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT174);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3541);
                    insertIntoExpr175=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr175.getTree());
                    }
                    break;
            }
            SELECT176=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT176);
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==AND_EXPR||LA63_0==DELETE) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    int alt62=2;
                    int LA62_0 = input.LA(1);
                    if ( (LA62_0==AND_EXPR) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            {
                            AND_EXPR177=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_onSelectExpr3552); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR177);
                            }
                            break;
                    }
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_onSelectExpr3557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==DISTINCT) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    DISTINCT178=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT178);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3564);
            selectionList179=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList179.getTree());
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==FROM) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3568);
                    onExprFrom180=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom180.getTree());
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==WHERE) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    WHERE181=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE181);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3576);
                    whereClause182=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause182.getTree());
                    }
                    break;
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==GROUP) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    GROUP183=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP183);
                    BY184=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY184);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3589);
                    groupByListExpr185=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr185.getTree());
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==HAVING) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    HAVING186=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING186);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3598);
                    havingClause187=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause187.getTree());
                    }
                    break;
            }
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==ORDER) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    ORDER188=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER188);
                    BY189=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY189);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3609);
                    orderByListExpr190=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr190.getTree());
                    }
                    break;
            }
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==ROW_LIMIT_EXPR) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR191=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR191);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3618);
                    rowLimit192=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit192.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE193=null;
        Token AS194=null;
        Token SET195=null;
        Token COMMA197=null;
        Token WHERE199=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment196 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment198 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause200 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE193_tree=null;
        CommonTree AS194_tree=null;
        CommonTree SET195_tree=null;
        CommonTree COMMA197_tree=null;
        CommonTree WHERE199_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE193=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE193);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt71=3;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==AS) ) {
                alt71=1;
            }
            else if ( (LA71_0==IDENT) ) {
                alt71=2;
            }
            switch (alt71) {
                case 1 :
                    {
                    AS194=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS194);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET195=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET195);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3710);
            onSetAssignment196=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment196.getTree());
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);
                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }
                switch (alt72) {
            	case 1 :
            	    {
            	    COMMA197=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3713); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA197);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3715);
            	    onSetAssignment198=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment198.getTree());
            	    }
            	    break;
            	default :
            	    break loop72;
                }
            } while (true);
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==WHERE) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    WHERE199=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE199);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3724);
                    whereClause200=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause200.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT201=null;
        Token SELECT203=null;
        Token WHERE205=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr202 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList204 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause206 = null;
        CommonTree INSERT201_tree=null;
        CommonTree SELECT203_tree=null;
        CommonTree WHERE205_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT201=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT201);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3777);
            insertIntoExpr202=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr202.getTree());
            SELECT203=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT203);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3783);
            selectionList204=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList204.getTree());
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==WHERE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    WHERE205=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE205);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3790);
                    whereClause206=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause206.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT207=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT207_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT207=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT207);
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==FIRST) ) {
                alt75=1;
            }
            else if ( (LA75_0==ALL) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);
                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE208=null;
        Token WHERE210=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom209 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause211 = null;
        CommonTree DELETE208_tree=null;
        CommonTree WHERE210_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE208=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE208);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3878);
            onExprFrom209=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom209.getTree());
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==WHERE) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    WHERE210=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE210);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3885);
                    whereClause211=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause211.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET212=null;
        Token COMMA214=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment213 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment215 = null;
        CommonTree SET212_tree=null;
        CommonTree COMMA214_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET212=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET212);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3927);
            onSetAssignment213=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment213.getTree());
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);
                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }
                switch (alt77) {
            	case 1 :
            	    {
            	    COMMA214=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3930); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA214);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3932);
            	    onSetAssignment215=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment215.getTree());
            	    }
            	    break;
            	default :
            	    break loop77;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS217=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty216 = null;
        EsperEPL2GrammarParser.expression_return expression218 = null;
        CommonTree EQUALS217_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3957);
            eventProperty216=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty216.getTree());
            EQUALS217=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3959); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS217);
            pushFollow(FOLLOW_expression_in_onSetAssignment3961);
            expression218=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression218.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM219=null;
        Token AS220=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM219_tree=null;
        CommonTree AS220_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM219=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM219);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt78=3;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==AS) ) {
                alt78=1;
            }
            else if ( (LA78_0==IDENT) ) {
                alt78=2;
            }
            switch (alt78) {
                case 1 :
                    {
                    AS220=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS220);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom4003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE221=null;
        Token WINDOW222=null;
        Token DOT223=null;
        Token DOT225=null;
        Token AS227=null;
        Token LPAREN229=null;
        Token RPAREN231=null;
        Token WHERE232=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression224 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression226 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter228 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList230 = null;
        EsperEPL2GrammarParser.expression_return expression233 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE221_tree=null;
        CommonTree WINDOW222_tree=null;
        CommonTree DOT223_tree=null;
        CommonTree DOT225_tree=null;
        CommonTree AS227_tree=null;
        CommonTree LPAREN229_tree=null;
        CommonTree RPAREN231_tree=null;
        CommonTree WHERE232_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE221=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr4031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE221);
            WINDOW222=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr4033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW222);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr4037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==DOT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    DOT223=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr4040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT223);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr4042);
                    viewExpression224=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression224.getTree());
                    loop79:
                    do {
                        int alt79=2;
                        int LA79_0 = input.LA(1);
                        if ( (LA79_0==DOT) ) {
                            alt79=1;
                        }
                        switch (alt79) {
                    	case 1 :
                    	    {
                    	    DOT225=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr4045); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT225);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr4047);
                    	    viewExpression226=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression226.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop79;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt81=3;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==RETAINUNION) ) {
                alt81=1;
            }
            else if ( (LA81_0==RETAININTERSECTION) ) {
                alt81=2;
            }
            switch (alt81) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr4056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr4060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==AS) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    AS227=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr4064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS227);
                    }
                    break;
            }
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==SELECT||LA83_0==EVENTS||LA83_0==IDENT||LA83_0==TICKED_STRING_LITERAL) ) {
                alt83=1;
            }
            else if ( (LA83_0==LPAREN) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);
                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr4079);
                    createWindowExprModelAfter228=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter228.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr4094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN229);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr4096);
                    createColumnList230=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList230.getTree());
                    RPAREN231=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr4098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN231);
                    }
                    break;
            }
            int alt85=2;
            int LA85_0 = input.LA(1);
            if ( (LA85_0==INSERT) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr4115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt84=2;
                    int LA84_0 = input.LA(1);
                    if ( (LA84_0==WHERE) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            WHERE232=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr4118); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE232);
                            pushFollow(FOLLOW_expression_in_createWindowExpr4120);
                            expression233=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression233.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT234=null;
        Token FROM236=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList235 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier237 = null;
        CommonTree SELECT234_tree=null;
        CommonTree FROM236_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==SELECT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    SELECT234=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter4207); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter4210);
                    createSelectionList235=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList235.getTree());
                    FROM236=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter4212); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter4217);
            classIdentifier237=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier237.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token n=null;
        Token w=null;
        Token CREATE238=null;
        Token INDEX239=null;
        Token ON240=null;
        Token LPAREN241=null;
        Token RPAREN243=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList242 = null;
        CommonTree u_tree=null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE238_tree=null;
        CommonTree INDEX239_tree=null;
        CommonTree ON240_tree=null;
        CommonTree LPAREN241_tree=null;
        CommonTree RPAREN243_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE238=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr4230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE238);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    u=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(u);
                    }
                    break;
            }
            INDEX239=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX239);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON240=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr4245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON240);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN241=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr4251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN241);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr4253);
            createIndexColumnList242=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList242.getTree());
            RPAREN243=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr4255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN243);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA245=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn244 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn246 = null;
        CommonTree COMMA245_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4288);
            createIndexColumn244=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn244.getTree());
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);
                if ( (LA88_0==COMMA) ) {
                    alt88=1;
                }
                switch (alt88) {
            	case 1 :
            	    {
            	    COMMA245=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList4291); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA245);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4293);
            	    createIndexColumn246=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn246.getTree());
            	    }
            	    break;
            	default :
            	    break loop88;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT247=null;
        Token IDENT248=null;
        CommonTree IDENT247_tree=null;
        CommonTree IDENT248_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT247=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT247);
            int alt89=2;
            int LA89_0 = input.LA(1);
            if ( (LA89_0==IDENT) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    {
                    IDENT248=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT248);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token arr=null;
        Token n=null;
        Token CREATE249=null;
        Token VARIABLE250=null;
        Token RBRACK252=null;
        Token EQUALS253=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier251 = null;
        EsperEPL2GrammarParser.expression_return expression254 = null;
        CommonTree c_tree=null;
        CommonTree arr_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE249_tree=null;
        CommonTree VARIABLE250_tree=null;
        CommonTree RBRACK252_tree=null;
        CommonTree EQUALS253_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE249=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE249);
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==IDENT) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    c=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(c);
                    }
                    break;
            }
            VARIABLE250=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE250);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4356);
            classIdentifier251=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier251.getTree());
            int alt91=2;
            int LA91_0 = input.LA(1);
            if ( (LA91_0==LBRACK) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    {
                    arr=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createVariableExpr4361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(arr);
                    RBRACK252=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createVariableExpr4363); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK252);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==EQUALS) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    EQUALS253=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS253);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4374);
                    expression254=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression254.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_arr=new RewriteRuleTokenStream(adaptor,"token arr",arr);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                if ( stream_arr.hasNext() ) {
                    adaptor.addChild(root_1, stream_arr.nextNode());
                }
                stream_arr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA256=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement255 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement257 = null;
        CommonTree COMMA256_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4424);
            createColumnListElement255=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement255.getTree());
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);
                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }
                switch (alt93) {
            	case 1 :
            	    {
            	    COMMA256=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4427); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA256);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4429);
            	    createColumnListElement257=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement257.getTree());
            	    }
            	    break;
            	default :
            	    break loop93;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK260=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy258 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier259 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK260_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4457);
            classIdentifierNonGreedy258=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy258.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4460);
            classIdentifier259=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier259.getTree());
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==LBRACK) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK260=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK260);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA262=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement261 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement263 = null;
        CommonTree COMMA262_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4510);
            createSelectionListElement261=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement261.getTree());
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);
                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }
                switch (alt95) {
            	case 1 :
            	    {
            	    COMMA262=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4513); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA262);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4515);
            	    createSelectionListElement263=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement263.getTree());
            	    }
            	    break;
            	default :
            	    break loop95;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS265=null;
        Token AS267=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty264 = null;
        EsperEPL2GrammarParser.constant_return constant266 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS265_tree=null;
        CommonTree AS267_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt97=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt97=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt97=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4556);
                    eventProperty264=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty264.getTree());
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==AS) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            AS265=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4559); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS265);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4563); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4584);
                    constant266=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant266.getTree());
                    AS267=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS267);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token CREATE268=null;
        EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef269 = null;
        CommonTree keyword_tree=null;
        CommonTree CREATE268_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_createSchemaDef=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaDef");
        try {
            {
            CREATE268=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE268);
            int alt98=2;
            int LA98_0 = input.LA(1);
            if ( (LA98_0==IDENT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            pushFollow(FOLLOW_createSchemaDef_in_createSchemaExpr4622);
            createSchemaDef269=createSchemaDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSchemaDef.add(createSchemaDef269.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_createSchemaDef.nextTree());
                if ( stream_keyword.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyword.nextNode());
                }
                stream_keyword.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaDef_return retval = new EsperEPL2GrammarParser.createSchemaDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token SCHEMA270=null;
        Token AS271=null;
        Token LPAREN273=null;
        Token RPAREN275=null;
        EsperEPL2GrammarParser.variantList_return variantList272 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList274 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual276 = null;
        CommonTree name_tree=null;
        CommonTree SCHEMA270_tree=null;
        CommonTree AS271_tree=null;
        CommonTree LPAREN273_tree=null;
        CommonTree RPAREN275_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            SCHEMA270=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaDef4647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA270);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaDef4651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==AS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    AS271=(Token)match(input,AS,FOLLOW_AS_in_createSchemaDef4653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS271);
                    }
                    break;
            }
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==EVENTS||LA101_0==IDENT||LA101_0==STAR||LA101_0==TICKED_STRING_LITERAL) ) {
                alt101=1;
            }
            else if ( (LA101_0==LPAREN) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);
                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaDef4666);
                    variantList272=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList272.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN273=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaDef4677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN273);
                    int alt100=2;
                    int LA100_0 = input.LA(1);
                    if ( (LA100_0==EVENTS||LA100_0==IDENT||LA100_0==TICKED_STRING_LITERAL) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaDef4679);
                            createColumnList274=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList274.getTree());
                            }
                            break;
                    }
                    RPAREN275=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaDef4682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN275);
                    }
                    break;
            }
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);
                if ( (LA102_0==IDENT) ) {
                    alt102=1;
                }
                switch (alt102) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaDef4691);
            	    createSchemaQual276=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual276.getTree());
            	    }
            	    break;
            	default :
            	    break loop102;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_DEF, "CREATE_SCHEMA_DEF"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fafDelete_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fafDelete_return fafDelete() throws RecognitionException {
        EsperEPL2GrammarParser.fafDelete_return retval = new EsperEPL2GrammarParser.fafDelete_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token i=null;
        Token DELETE277=null;
        Token FROM278=null;
        Token AS279=null;
        Token WHERE280=null;
        EsperEPL2GrammarParser.whereClause_return whereClause281 = null;
        CommonTree name_tree=null;
        CommonTree i_tree=null;
        CommonTree DELETE277_tree=null;
        CommonTree FROM278_tree=null;
        CommonTree AS279_tree=null;
        CommonTree WHERE280_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            DELETE277=(Token)match(input,DELETE,FOLLOW_DELETE_in_fafDelete4727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE277);
            FROM278=(Token)match(input,FROM,FOLLOW_FROM_in_fafDelete4729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM278);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt103=3;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==AS) ) {
                alt103=1;
            }
            else if ( (LA103_0==IDENT) ) {
                alt103=2;
            }
            switch (alt103) {
                case 1 :
                    {
                    AS279=(Token)match(input,AS,FOLLOW_AS_in_fafDelete4736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS279);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==WHERE) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    WHERE280=(Token)match(input,WHERE,FOLLOW_WHERE_in_fafDelete4751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE280);
                    pushFollow(FOLLOW_whereClause_in_fafDelete4753);
                    whereClause281=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause281.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fafUpdate_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fafUpdate_return fafUpdate() throws RecognitionException {
        EsperEPL2GrammarParser.fafUpdate_return retval = new EsperEPL2GrammarParser.fafUpdate_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token UPDATE282=null;
        EsperEPL2GrammarParser.updateDetails_return updateDetails283 = null;
        CommonTree UPDATE282_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleSubtreeStream stream_updateDetails=new RewriteRuleSubtreeStream(adaptor,"rule updateDetails");
        try {
            {
            UPDATE282=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_fafUpdate4784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE282);
            pushFollow(FOLLOW_updateDetails_in_fafUpdate4786);
            updateDetails283=updateDetails();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateDetails.add(updateDetails283.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_UPDATE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_updateDetails.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createDataflow_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createDataflow_return createDataflow() throws RecognitionException {
        EsperEPL2GrammarParser.createDataflow_return retval = new EsperEPL2GrammarParser.createDataflow_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE284=null;
        Token DATAFLOW285=null;
        Token AS286=null;
        EsperEPL2GrammarParser.gopList_return gopList287 = null;
        CommonTree name_tree=null;
        CommonTree CREATE284_tree=null;
        CommonTree DATAFLOW285_tree=null;
        CommonTree AS286_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_DATAFLOW=new RewriteRuleTokenStream(adaptor,"token DATAFLOW");
        RewriteRuleSubtreeStream stream_gopList=new RewriteRuleSubtreeStream(adaptor,"rule gopList");
        try {
            {
            CREATE284=(Token)match(input,CREATE,FOLLOW_CREATE_in_createDataflow4807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE284);
            DATAFLOW285=(Token)match(input,DATAFLOW,FOLLOW_DATAFLOW_in_createDataflow4809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DATAFLOW.add(DATAFLOW285);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createDataflow4813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt105=2;
            int LA105_0 = input.LA(1);
            if ( (LA105_0==AS) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    {
                    AS286=(Token)match(input,AS,FOLLOW_AS_in_createDataflow4815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS286);
                    }
                    break;
            }
            pushFollow(FOLLOW_gopList_in_createDataflow4818);
            gopList287=gopList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopList.add(gopList287.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_DATAFLOW, "CREATE_DATAFLOW"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_gopList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopList_return gopList() throws RecognitionException {
        EsperEPL2GrammarParser.gopList_return retval = new EsperEPL2GrammarParser.gopList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.gop_return gop288 = null;
        EsperEPL2GrammarParser.gop_return gop289 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gop_in_gopList4843);
            gop288=gop();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gop288.getTree());
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);
                if ( (LA106_0==CREATE||LA106_0==SELECT||LA106_0==IDENT||LA106_0==ATCHAR) ) {
                    alt106=1;
                }
                switch (alt106) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_gop_in_gopList4845);
            	    gop289=gop();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gop289.getTree());
            	    }
            	    break;
            	default :
            	    break loop106;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gop_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gop_return gop() throws RecognitionException {
        EsperEPL2GrammarParser.gop_return retval = new EsperEPL2GrammarParser.gop_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token opName=null;
        Token s=null;
        Token LCURLY293=null;
        Token COMMA295=null;
        Token RCURLY296=null;
        Token COMMA298=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum290 = null;
        EsperEPL2GrammarParser.gopParams_return gopParams291 = null;
        EsperEPL2GrammarParser.gopOut_return gopOut292 = null;
        EsperEPL2GrammarParser.gopDetail_return gopDetail294 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr297 = null;
        CommonTree opName_tree=null;
        CommonTree s_tree=null;
        CommonTree LCURLY293_tree=null;
        CommonTree COMMA295_tree=null;
        CommonTree RCURLY296_tree=null;
        CommonTree COMMA298_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_gopOut=new RewriteRuleSubtreeStream(adaptor,"rule gopOut");
        RewriteRuleSubtreeStream stream_gopDetail=new RewriteRuleSubtreeStream(adaptor,"rule gopDetail");
        RewriteRuleSubtreeStream stream_gopParams=new RewriteRuleSubtreeStream(adaptor,"rule gopParams");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        try {
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==SELECT||LA113_0==IDENT||LA113_0==ATCHAR) ) {
                alt113=1;
            }
            else if ( (LA113_0==CREATE) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);
                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    {
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);
                        if ( (LA107_0==ATCHAR) ) {
                            alt107=1;
                        }
                        switch (alt107) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_annotationEnum_in_gop4858);
                    	    annotationEnum290=annotationEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum290.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop107;
                        }
                    } while (true);
                    int alt108=2;
                    int LA108_0 = input.LA(1);
                    if ( (LA108_0==IDENT) ) {
                        alt108=1;
                    }
                    else if ( (LA108_0==SELECT) ) {
                        alt108=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 0, input);
                        throw nvae;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            opName=(Token)match(input,IDENT,FOLLOW_IDENT_in_gop4864); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(opName);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,SELECT,FOLLOW_SELECT_in_gop4870); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SELECT.add(s);
                            }
                            break;
                    }
                    int alt109=2;
                    int LA109_0 = input.LA(1);
                    if ( (LA109_0==LPAREN) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopParams_in_gop4873);
                            gopParams291=gopParams();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopParams.add(gopParams291.getTree());
                            }
                            break;
                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( (LA110_0==FOLLOWED_BY) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopOut_in_gop4876);
                            gopOut292=gopOut();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopOut.add(gopOut292.getTree());
                            }
                            break;
                    }
                    LCURLY293=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_gop4879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY293);
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( (LA111_0==SELECT||LA111_0==IDENT) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopDetail_in_gop4881);
                            gopDetail294=gopDetail();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopDetail.add(gopDetail294.getTree());
                            }
                            break;
                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);
                    if ( (LA112_0==COMMA) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4884); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA295);
                            }
                            break;
                    }
                    RCURLY296=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_gop4887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY296);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
                    RewriteRuleTokenStream stream_opName=new RewriteRuleTokenStream(adaptor,"token opName",opName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOP, "GOP"), root_1);
                        if ( stream_opName.hasNext() ) {
                            adaptor.addChild(root_1, stream_opName.nextNode());
                        }
                        stream_opName.reset();
                        if ( stream_s.hasNext() ) {
                            adaptor.addChild(root_1, stream_s.nextNode());
                        }
                        stream_s.reset();
                        if ( stream_gopParams.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopParams.nextTree());
                        }
                        stream_gopParams.reset();
                        if ( stream_gopOut.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopOut.nextTree());
                        }
                        stream_gopOut.reset();
                        if ( stream_gopDetail.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopDetail.nextTree());
                        }
                        stream_gopDetail.reset();
                        while ( stream_annotationEnum.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                        }
                        stream_annotationEnum.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createSchemaExpr_in_gop4920);
                    createSchemaExpr297=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr297.getTree());
                    COMMA298=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4922); if (state.failed) return retval;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParams_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParams_return gopParams() throws RecognitionException {
        EsperEPL2GrammarParser.gopParams_return retval = new EsperEPL2GrammarParser.gopParams_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN299=null;
        Token RPAREN301=null;
        EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList300 = null;
        CommonTree LPAREN299_tree=null;
        CommonTree RPAREN301_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_gopParamsItemList=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemList");
        try {
            {
            LPAREN299=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParams4936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN299);
            pushFollow(FOLLOW_gopParamsItemList_in_gopParams4938);
            gopParamsItemList300=gopParamsItemList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopParamsItemList.add(gopParamsItemList300.getTree());
            RPAREN301=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParams4940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN301);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAM, "GOPPARAM"), root_1);
                adaptor.addChild(root_1, stream_gopParamsItemList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemList_return retval = new EsperEPL2GrammarParser.gopParamsItemList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA303=null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem302 = null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem304 = null;
        CommonTree COMMA303_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4962);
            gopParamsItem302=gopParamsItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem302.getTree());
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);
                if ( (LA114_0==COMMA) ) {
                    alt114=1;
                }
                switch (alt114) {
            	case 1 :
            	    {
            	    COMMA303=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemList4965); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4968);
            	    gopParamsItem304=gopParamsItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem304.getTree());
            	    }
            	    break;
            	default :
            	    break loop114;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItem_return retval = new EsperEPL2GrammarParser.gopParamsItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany305 = null;
        EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs306 = null;
        RewriteRuleSubtreeStream stream_gopParamsItemMany=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemMany");
        RewriteRuleSubtreeStream stream_gopParamsItemAs=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemAs");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==EVENTS||LA115_0==IDENT||LA115_0==TICKED_STRING_LITERAL) ) {
                alt115=1;
            }
            else if ( (LA115_0==LPAREN) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);
                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_gopParamsItem4987);
                    n=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_gopParamsItemMany_in_gopParamsItem4991);
                    gopParamsItemMany305=gopParamsItemMany();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemMany.add(gopParamsItemMany305.getTree());
                    }
                    break;
            }
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==AS) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopParamsItemAs_in_gopParamsItem4994);
                    gopParamsItemAs306=gopParamsItemAs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemAs.add(gopParamsItemAs306.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAMITM, "GOPPARAMITM"), root_1);
                if ( stream_n.hasNext() ) {
                    adaptor.addChild(root_1, stream_n.nextTree());
                }
                stream_n.reset();
                if ( stream_gopParamsItemMany.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemMany.nextTree());
                }
                stream_gopParamsItemMany.reset();
                if ( stream_gopParamsItemAs.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemAs.nextTree());
                }
                stream_gopParamsItemAs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemMany_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemMany_return retval = new EsperEPL2GrammarParser.gopParamsItemMany_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN307=null;
        Token COMMA309=null;
        Token RPAREN311=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier308 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier310 = null;
        CommonTree LPAREN307_tree=null;
        CommonTree COMMA309_tree=null;
        CommonTree RPAREN311_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN307=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParamsItemMany5024); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany5027);
            classIdentifier308=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier308.getTree());
            {
            COMMA309=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemMany5030); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany5033);
            classIdentifier310=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier310.getTree());
            }
            RPAREN311=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParamsItemMany5036); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemAs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemAs_return retval = new EsperEPL2GrammarParser.gopParamsItemAs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token AS312=null;
        CommonTree a_tree=null;
        CommonTree AS312_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            AS312=(Token)match(input,AS,FOLLOW_AS_in_gopParamsItemAs5048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS312);
            a=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopParamsItemAs5052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(a);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AS.nextNode(), root_1);
                adaptor.addChild(root_1, stream_a.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOut_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOut_return gopOut() throws RecognitionException {
        EsperEPL2GrammarParser.gopOut_return retval = new EsperEPL2GrammarParser.gopOut_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FOLLOWED_BY313=null;
        Token COMMA315=null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem314 = null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem316 = null;
        CommonTree FOLLOWED_BY313_tree=null;
        CommonTree COMMA315_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_gopOutItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutItem");
        try {
            {
            FOLLOWED_BY313=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_gopOut5074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(FOLLOWED_BY313);
            pushFollow(FOLLOW_gopOutItem_in_gopOut5076);
            gopOutItem314=gopOutItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem314.getTree());
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);
                if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }
                switch (alt117) {
            	case 1 :
            	    {
            	    COMMA315=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOut5079); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA315);
            	    pushFollow(FOLLOW_gopOutItem_in_gopOut5081);
            	    gopOutItem316=gopOutItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem316.getTree());
            	    }
            	    break;
            	default :
            	    break loop117;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUT, "GOPOUT"), root_1);
                if ( !(stream_gopOutItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopOutItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutItem.nextTree());
                }
                stream_gopOutItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutItem_return gopOutItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutItem_return retval = new EsperEPL2GrammarParser.gopOutItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList317 = null;
        RewriteRuleSubtreeStream stream_gopOutTypeList=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifier_in_gopOutItem5107);
            n=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==LT) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutItem5109);
                    gopOutTypeList317=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeList.add(gopOutTypeList317.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTITM, "GOPOUTITM"), root_1);
                adaptor.addChild(root_1, stream_n.nextTree());
                if ( stream_gopOutTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeList.nextTree());
                }
                stream_gopOutTypeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeList_return retval = new EsperEPL2GrammarParser.gopOutTypeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LT318=null;
        Token COMMA320=null;
        Token GT322=null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam319 = null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam321 = null;
        CommonTree LT318_tree=null;
        CommonTree COMMA320_tree=null;
        CommonTree GT322_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LT318=(Token)match(input,LT,FOLLOW_LT_in_gopOutTypeList5136); if (state.failed) return retval;
            pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList5139);
            gopOutTypeParam319=gopOutTypeParam();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam319.getTree());
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);
                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }
                switch (alt119) {
            	case 1 :
            	    {
            	    COMMA320=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOutTypeList5142); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList5145);
            	    gopOutTypeParam321=gopOutTypeParam();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam321.getTree());
            	    }
            	    break;
            	default :
            	    break loop119;
                }
            } while (true);
            GT322=(Token)match(input,GT,FOLLOW_GT_in_gopOutTypeList5149); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeParam_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeParam_return retval = new EsperEPL2GrammarParser.gopOutTypeParam_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem323 = null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_gopOutTypeItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeItem");
        try {
            {
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==EVENTS||LA120_0==IDENT||LA120_0==TICKED_STRING_LITERAL) ) {
                alt120=1;
            }
            else if ( (LA120_0==QUESTION) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);
                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeItem_in_gopOutTypeParam5163);
                    gopOutTypeItem323=gopOutTypeItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeItem.add(gopOutTypeItem323.getTree());
                    }
                    break;
                case 2 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_gopOutTypeParam5169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTTYP, "GOPOUTTYP"), root_1);
                if ( stream_gopOutTypeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeItem.nextTree());
                }
                stream_gopOutTypeItem.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeItem_return retval = new EsperEPL2GrammarParser.gopOutTypeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier324 = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList325 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_classIdentifier_in_gopOutTypeItem5196);
            classIdentifier324=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier324.getTree());
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==LT) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutTypeItem5198);
                    gopOutTypeList325=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeList325.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopDetail_return gopDetail() throws RecognitionException {
        EsperEPL2GrammarParser.gopDetail_return retval = new EsperEPL2GrammarParser.gopDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA327=null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig326 = null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig328 = null;
        CommonTree COMMA327_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_gopConfig=new RewriteRuleSubtreeStream(adaptor,"rule gopConfig");
        try {
            {
            pushFollow(FOLLOW_gopConfig_in_gopDetail5210);
            gopConfig326=gopConfig();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig326.getTree());
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( (LA122_0==COMMA) ) {
                    int LA122_1 = input.LA(2);
                    if ( (LA122_1==SELECT||LA122_1==IDENT) ) {
                        alt122=1;
                    }
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    COMMA327=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopDetail5213); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA327);
            	    pushFollow(FOLLOW_gopConfig_in_gopDetail5215);
            	    gopConfig328=gopConfig();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig328.getTree());
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFG, "GOPCFG"), root_1);
                if ( !(stream_gopConfig.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopConfig.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopConfig.nextTree());
                }
                stream_gopConfig.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopConfig_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopConfig_return gopConfig() throws RecognitionException {
        EsperEPL2GrammarParser.gopConfig_return retval = new EsperEPL2GrammarParser.gopConfig_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token SELECT329=null;
        Token COLON330=null;
        Token EQUALS331=null;
        Token LPAREN332=null;
        Token RPAREN334=null;
        Token COLON335=null;
        Token EQUALS336=null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr333 = null;
        EsperEPL2GrammarParser.expression_return expression337 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject338 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray339 = null;
        CommonTree n_tree=null;
        CommonTree SELECT329_tree=null;
        CommonTree COLON330_tree=null;
        CommonTree EQUALS331_tree=null;
        CommonTree LPAREN332_tree=null;
        CommonTree RPAREN334_tree=null;
        CommonTree COLON335_tree=null;
        CommonTree EQUALS336_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_selectExpr=new RewriteRuleSubtreeStream(adaptor,"rule selectExpr");
        RewriteRuleSubtreeStream stream_jsonarray=new RewriteRuleSubtreeStream(adaptor,"rule jsonarray");
        RewriteRuleSubtreeStream stream_jsonobject=new RewriteRuleSubtreeStream(adaptor,"rule jsonobject");
        try {
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==SELECT) ) {
                alt126=1;
            }
            else if ( (LA126_0==IDENT) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);
                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    {
                    SELECT329=(Token)match(input,SELECT,FOLLOW_SELECT_in_gopConfig5239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT329);
                    int alt123=2;
                    int LA123_0 = input.LA(1);
                    if ( (LA123_0==COLON) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==EQUALS) ) {
                        alt123=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 0, input);
                        throw nvae;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            COLON330=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5242); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON330);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS331=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5244); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS331);
                            }
                            break;
                    }
                    LPAREN332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopConfig5247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN332);
                    pushFollow(FOLLOW_selectExpr_in_gopConfig5249);
                    selectExpr333=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectExpr.add(selectExpr333.getTree());
                    RPAREN334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopConfig5251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN334);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGEPL, "GOPCFGEPL"), root_1);
                        adaptor.addChild(root_1, stream_selectExpr.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    n=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopConfig5268); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(n);
                    int alt124=2;
                    int LA124_0 = input.LA(1);
                    if ( (LA124_0==COLON) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==EQUALS) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);
                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            COLON335=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5271); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON335);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS336=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5273); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS336);
                            }
                            break;
                    }
                    int alt125=3;
                    switch ( input.LA(1) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case ISTREAM:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case QUESTION:
                    case PLUS:
                    case STRING_LITERAL:
                    case QUOTED_STRING_LITERAL:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt125=1;
                        }
                        break;
                    case LCURLY:
                        {
                        switch ( input.LA(2) ) {
                        case STRING_LITERAL:
                            {
                            int LA125_78 = input.LA(3);
                            if ( (LA125_78==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_78>=IN_SET && LA125_78<=REGEXP)||(LA125_78>=OR_EXPR && LA125_78<=NOT_EXPR)||LA125_78==IS||LA125_78==RCURLY||(LA125_78>=COMMA && LA125_78<=EQUALS)||LA125_78==STAR||(LA125_78>=LT && LA125_78<=GT)||(LA125_78>=BOR && LA125_78<=PLUS)||(LA125_78>=BAND && LA125_78<=MOD)) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 78, input);
                                throw nvae;
                            }
                            }
                            break;
                        case QUOTED_STRING_LITERAL:
                            {
                            int LA125_79 = input.LA(3);
                            if ( (LA125_79==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_79>=IN_SET && LA125_79<=REGEXP)||(LA125_79>=OR_EXPR && LA125_79<=NOT_EXPR)||LA125_79==IS||LA125_79==RCURLY||(LA125_79>=COMMA && LA125_79<=EQUALS)||LA125_79==STAR||(LA125_79>=LT && LA125_79<=GT)||(LA125_79>=BOR && LA125_79<=PLUS)||(LA125_79>=BAND && LA125_79<=MOD)) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 79, input);
                                throw nvae;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA125_80 = input.LA(3);
                            if ( ((LA125_80>=IN_SET && LA125_80<=REGEXP)||(LA125_80>=OR_EXPR && LA125_80<=NOT_EXPR)||LA125_80==IS||LA125_80==LBRACK||LA125_80==LPAREN||LA125_80==RCURLY||(LA125_80>=COMMA && LA125_80<=STAR)||(LA125_80>=LT && LA125_80<=PLUS)||(LA125_80>=BAND && LA125_80<=MOD)||LA125_80==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_80==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 80, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TICKED_STRING_LITERAL:
                            {
                            int LA125_81 = input.LA(3);
                            if ( (LA125_81==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_81>=IN_SET && LA125_81<=REGEXP)||(LA125_81>=OR_EXPR && LA125_81<=NOT_EXPR)||LA125_81==IS||LA125_81==LBRACK||LA125_81==LPAREN||LA125_81==RCURLY||(LA125_81>=COMMA && LA125_81<=STAR)||(LA125_81>=LT && LA125_81<=PLUS)||(LA125_81>=BAND && LA125_81<=MOD)||LA125_81==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 81, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AT:
                            {
                            int LA125_82 = input.LA(3);
                            if ( (LA125_82==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_82>=IN_SET && LA125_82<=REGEXP)||(LA125_82>=OR_EXPR && LA125_82<=NOT_EXPR)||LA125_82==IS||LA125_82==LBRACK||LA125_82==LPAREN||LA125_82==RCURLY||(LA125_82>=COMMA && LA125_82<=STAR)||(LA125_82>=LT && LA125_82<=PLUS)||(LA125_82>=BAND && LA125_82<=MOD)||LA125_82==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 82, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COUNT:
                            {
                            int LA125_83 = input.LA(3);
                            if ( ((LA125_83>=IN_SET && LA125_83<=REGEXP)||(LA125_83>=OR_EXPR && LA125_83<=NOT_EXPR)||LA125_83==IS||LA125_83==LBRACK||LA125_83==LPAREN||LA125_83==RCURLY||(LA125_83>=COMMA && LA125_83<=STAR)||(LA125_83>=LT && LA125_83<=PLUS)||(LA125_83>=BAND && LA125_83<=MOD)||LA125_83==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_83==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 83, input);
                                throw nvae;
                            }
                            }
                            break;
                        case ESCAPE:
                            {
                            int LA125_84 = input.LA(3);
                            if ( (LA125_84==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_84>=IN_SET && LA125_84<=REGEXP)||(LA125_84>=OR_EXPR && LA125_84<=NOT_EXPR)||LA125_84==IS||LA125_84==LBRACK||LA125_84==LPAREN||LA125_84==RCURLY||(LA125_84>=COMMA && LA125_84<=STAR)||(LA125_84>=LT && LA125_84<=PLUS)||(LA125_84>=BAND && LA125_84<=MOD)||LA125_84==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 84, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVERY_EXPR:
                            {
                            int LA125_85 = input.LA(3);
                            if ( ((LA125_85>=IN_SET && LA125_85<=REGEXP)||(LA125_85>=OR_EXPR && LA125_85<=NOT_EXPR)||LA125_85==IS||LA125_85==LBRACK||LA125_85==LPAREN||LA125_85==RCURLY||(LA125_85>=COMMA && LA125_85<=STAR)||(LA125_85>=LT && LA125_85<=PLUS)||(LA125_85>=BAND && LA125_85<=MOD)||LA125_85==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_85==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 85, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SUM:
                            {
                            int LA125_86 = input.LA(3);
                            if ( ((LA125_86>=IN_SET && LA125_86<=REGEXP)||(LA125_86>=OR_EXPR && LA125_86<=NOT_EXPR)||LA125_86==IS||LA125_86==LBRACK||LA125_86==LPAREN||LA125_86==RCURLY||(LA125_86>=COMMA && LA125_86<=STAR)||(LA125_86>=LT && LA125_86<=PLUS)||(LA125_86>=BAND && LA125_86<=MOD)||LA125_86==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_86==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 86, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVG:
                            {
                            int LA125_87 = input.LA(3);
                            if ( ((LA125_87>=IN_SET && LA125_87<=REGEXP)||(LA125_87>=OR_EXPR && LA125_87<=NOT_EXPR)||LA125_87==IS||LA125_87==LBRACK||LA125_87==LPAREN||LA125_87==RCURLY||(LA125_87>=COMMA && LA125_87<=STAR)||(LA125_87>=LT && LA125_87<=PLUS)||(LA125_87>=BAND && LA125_87<=MOD)||LA125_87==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_87==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 87, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MAX:
                            {
                            int LA125_88 = input.LA(3);
                            if ( (LA125_88==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_88>=IN_SET && LA125_88<=REGEXP)||(LA125_88>=OR_EXPR && LA125_88<=NOT_EXPR)||LA125_88==IS||LA125_88==LBRACK||LA125_88==LPAREN||LA125_88==RCURLY||(LA125_88>=COMMA && LA125_88<=STAR)||(LA125_88>=LT && LA125_88<=PLUS)||(LA125_88>=BAND && LA125_88<=MOD)||LA125_88==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 88, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MIN:
                            {
                            int LA125_89 = input.LA(3);
                            if ( ((LA125_89>=IN_SET && LA125_89<=REGEXP)||(LA125_89>=OR_EXPR && LA125_89<=NOT_EXPR)||LA125_89==IS||LA125_89==LBRACK||LA125_89==LPAREN||LA125_89==RCURLY||(LA125_89>=COMMA && LA125_89<=STAR)||(LA125_89>=LT && LA125_89<=PLUS)||(LA125_89>=BAND && LA125_89<=MOD)||LA125_89==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_89==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 89, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COALESCE:
                            {
                            int LA125_90 = input.LA(3);
                            if ( ((LA125_90>=IN_SET && LA125_90<=REGEXP)||(LA125_90>=OR_EXPR && LA125_90<=NOT_EXPR)||LA125_90==IS||LA125_90==LBRACK||LA125_90==LPAREN||LA125_90==RCURLY||(LA125_90>=COMMA && LA125_90<=STAR)||(LA125_90>=LT && LA125_90<=PLUS)||(LA125_90>=BAND && LA125_90<=MOD)||LA125_90==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_90==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 90, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MEDIAN:
                            {
                            int LA125_91 = input.LA(3);
                            if ( ((LA125_91>=IN_SET && LA125_91<=REGEXP)||(LA125_91>=OR_EXPR && LA125_91<=NOT_EXPR)||LA125_91==IS||LA125_91==LBRACK||LA125_91==LPAREN||LA125_91==RCURLY||(LA125_91>=COMMA && LA125_91<=STAR)||(LA125_91>=LT && LA125_91<=PLUS)||(LA125_91>=BAND && LA125_91<=MOD)||LA125_91==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_91==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 91, input);
                                throw nvae;
                            }
                            }
                            break;
                        case STDDEV:
                            {
                            int LA125_92 = input.LA(3);
                            if ( ((LA125_92>=IN_SET && LA125_92<=REGEXP)||(LA125_92>=OR_EXPR && LA125_92<=NOT_EXPR)||LA125_92==IS||LA125_92==LBRACK||LA125_92==LPAREN||LA125_92==RCURLY||(LA125_92>=COMMA && LA125_92<=STAR)||(LA125_92>=LT && LA125_92<=PLUS)||(LA125_92>=BAND && LA125_92<=MOD)||LA125_92==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_92==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 92, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVEDEV:
                            {
                            int LA125_93 = input.LA(3);
                            if ( ((LA125_93>=IN_SET && LA125_93<=REGEXP)||(LA125_93>=OR_EXPR && LA125_93<=NOT_EXPR)||LA125_93==IS||LA125_93==LBRACK||LA125_93==LPAREN||LA125_93==RCURLY||(LA125_93>=COMMA && LA125_93<=STAR)||(LA125_93>=LT && LA125_93<=PLUS)||(LA125_93>=BAND && LA125_93<=MOD)||LA125_93==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_93==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 93, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVENTS:
                            {
                            int LA125_94 = input.LA(3);
                            if ( ((LA125_94>=IN_SET && LA125_94<=REGEXP)||(LA125_94>=OR_EXPR && LA125_94<=NOT_EXPR)||LA125_94==IS||LA125_94==LBRACK||LA125_94==LPAREN||LA125_94==RCURLY||(LA125_94>=COMMA && LA125_94<=STAR)||(LA125_94>=LT && LA125_94<=PLUS)||(LA125_94>=BAND && LA125_94<=MOD)||LA125_94==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_94==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 94, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FIRST:
                            {
                            int LA125_95 = input.LA(3);
                            if ( ((LA125_95>=IN_SET && LA125_95<=REGEXP)||(LA125_95>=OR_EXPR && LA125_95<=NOT_EXPR)||LA125_95==IS||LA125_95==LBRACK||LA125_95==LPAREN||LA125_95==RCURLY||(LA125_95>=COMMA && LA125_95<=STAR)||(LA125_95>=LT && LA125_95<=PLUS)||(LA125_95>=BAND && LA125_95<=MOD)||LA125_95==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_95==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 95, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LAST:
                            {
                            int LA125_96 = input.LA(3);
                            if ( ((LA125_96>=IN_SET && LA125_96<=REGEXP)||(LA125_96>=OR_EXPR && LA125_96<=NOT_EXPR)||LA125_96==IS||LA125_96==LBRACK||LA125_96==LPAREN||LA125_96==RCURLY||(LA125_96>=COMMA && LA125_96<=STAR)||(LA125_96>=LT && LA125_96<=PLUS)||(LA125_96>=BAND && LA125_96<=MOD)||LA125_96==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_96==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 96, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WHILE:
                            {
                            int LA125_97 = input.LA(3);
                            if ( ((LA125_97>=IN_SET && LA125_97<=REGEXP)||(LA125_97>=OR_EXPR && LA125_97<=NOT_EXPR)||LA125_97==IS||LA125_97==LBRACK||LA125_97==LPAREN||LA125_97==RCURLY||(LA125_97>=COMMA && LA125_97<=STAR)||(LA125_97>=LT && LA125_97<=PLUS)||(LA125_97>=BAND && LA125_97<=MOD)||LA125_97==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_97==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 97, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MERGE:
                            {
                            int LA125_98 = input.LA(3);
                            if ( ((LA125_98>=IN_SET && LA125_98<=REGEXP)||(LA125_98>=OR_EXPR && LA125_98<=NOT_EXPR)||LA125_98==IS||LA125_98==LBRACK||LA125_98==LPAREN||LA125_98==RCURLY||(LA125_98>=COMMA && LA125_98<=STAR)||(LA125_98>=LT && LA125_98<=PLUS)||(LA125_98>=BAND && LA125_98<=MOD)||LA125_98==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_98==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 98, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHED:
                            {
                            int LA125_99 = input.LA(3);
                            if ( (LA125_99==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_99>=IN_SET && LA125_99<=REGEXP)||(LA125_99>=OR_EXPR && LA125_99<=NOT_EXPR)||LA125_99==IS||LA125_99==LBRACK||LA125_99==LPAREN||LA125_99==RCURLY||(LA125_99>=COMMA && LA125_99<=STAR)||(LA125_99>=LT && LA125_99<=PLUS)||(LA125_99>=BAND && LA125_99<=MOD)||LA125_99==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 99, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNIDIRECTIONAL:
                            {
                            int LA125_100 = input.LA(3);
                            if ( ((LA125_100>=IN_SET && LA125_100<=REGEXP)||(LA125_100>=OR_EXPR && LA125_100<=NOT_EXPR)||LA125_100==IS||LA125_100==LBRACK||LA125_100==LPAREN||LA125_100==RCURLY||(LA125_100>=COMMA && LA125_100<=STAR)||(LA125_100>=LT && LA125_100<=PLUS)||(LA125_100>=BAND && LA125_100<=MOD)||LA125_100==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_100==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 100, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAINUNION:
                            {
                            int LA125_101 = input.LA(3);
                            if ( (LA125_101==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_101>=IN_SET && LA125_101<=REGEXP)||(LA125_101>=OR_EXPR && LA125_101<=NOT_EXPR)||LA125_101==IS||LA125_101==LBRACK||LA125_101==LPAREN||LA125_101==RCURLY||(LA125_101>=COMMA && LA125_101<=STAR)||(LA125_101>=LT && LA125_101<=PLUS)||(LA125_101>=BAND && LA125_101<=MOD)||LA125_101==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 101, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAININTERSECTION:
                            {
                            int LA125_102 = input.LA(3);
                            if ( ((LA125_102>=IN_SET && LA125_102<=REGEXP)||(LA125_102>=OR_EXPR && LA125_102<=NOT_EXPR)||LA125_102==IS||LA125_102==LBRACK||LA125_102==LPAREN||LA125_102==RCURLY||(LA125_102>=COMMA && LA125_102<=STAR)||(LA125_102>=LT && LA125_102<=PLUS)||(LA125_102>=BAND && LA125_102<=MOD)||LA125_102==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_102==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 102, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNTIL:
                            {
                            int LA125_103 = input.LA(3);
                            if ( (LA125_103==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_103>=IN_SET && LA125_103<=REGEXP)||(LA125_103>=OR_EXPR && LA125_103<=NOT_EXPR)||LA125_103==IS||LA125_103==LBRACK||LA125_103==LPAREN||LA125_103==RCURLY||(LA125_103>=COMMA && LA125_103<=STAR)||(LA125_103>=LT && LA125_103<=PLUS)||(LA125_103>=BAND && LA125_103<=MOD)||LA125_103==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 103, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PATTERN:
                            {
                            int LA125_104 = input.LA(3);
                            if ( ((LA125_104>=IN_SET && LA125_104<=REGEXP)||(LA125_104>=OR_EXPR && LA125_104<=NOT_EXPR)||LA125_104==IS||LA125_104==LBRACK||LA125_104==LPAREN||LA125_104==RCURLY||(LA125_104>=COMMA && LA125_104<=STAR)||(LA125_104>=LT && LA125_104<=PLUS)||(LA125_104>=BAND && LA125_104<=MOD)||LA125_104==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_104==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 104, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SQL:
                            {
                            int LA125_105 = input.LA(3);
                            if ( (LA125_105==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_105>=IN_SET && LA125_105<=REGEXP)||(LA125_105>=OR_EXPR && LA125_105<=NOT_EXPR)||LA125_105==IS||LA125_105==LBRACK||LA125_105==LPAREN||LA125_105==RCURLY||(LA125_105>=COMMA && LA125_105<=STAR)||(LA125_105>=LT && LA125_105<=PLUS)||(LA125_105>=BAND && LA125_105<=MOD)||LA125_105==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 105, input);
                                throw nvae;
                            }
                            }
                            break;
                        case METADATASQL:
                            {
                            int LA125_106 = input.LA(3);
                            if ( ((LA125_106>=IN_SET && LA125_106<=REGEXP)||(LA125_106>=OR_EXPR && LA125_106<=NOT_EXPR)||LA125_106==IS||LA125_106==LBRACK||LA125_106==LPAREN||LA125_106==RCURLY||(LA125_106>=COMMA && LA125_106<=STAR)||(LA125_106>=LT && LA125_106<=PLUS)||(LA125_106>=BAND && LA125_106<=MOD)||LA125_106==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_106==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 106, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUS:
                            {
                            int LA125_107 = input.LA(3);
                            if ( ((LA125_107>=IN_SET && LA125_107<=REGEXP)||(LA125_107>=OR_EXPR && LA125_107<=NOT_EXPR)||LA125_107==IS||LA125_107==LBRACK||LA125_107==LPAREN||LA125_107==RCURLY||(LA125_107>=COMMA && LA125_107<=STAR)||(LA125_107>=LT && LA125_107<=PLUS)||(LA125_107>=BAND && LA125_107<=MOD)||LA125_107==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_107==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 107, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUSTAIL:
                            {
                            int LA125_108 = input.LA(3);
                            if ( ((LA125_108>=IN_SET && LA125_108<=REGEXP)||(LA125_108>=OR_EXPR && LA125_108<=NOT_EXPR)||LA125_108==IS||LA125_108==LBRACK||LA125_108==LPAREN||LA125_108==RCURLY||(LA125_108>=COMMA && LA125_108<=STAR)||(LA125_108>=LT && LA125_108<=PLUS)||(LA125_108>=BAND && LA125_108<=MOD)||LA125_108==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_108==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 108, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PRIOR:
                            {
                            int LA125_109 = input.LA(3);
                            if ( ((LA125_109>=IN_SET && LA125_109<=REGEXP)||(LA125_109>=OR_EXPR && LA125_109<=NOT_EXPR)||LA125_109==IS||LA125_109==LBRACK||LA125_109==LPAREN||LA125_109==RCURLY||(LA125_109>=COMMA && LA125_109<=STAR)||(LA125_109>=LT && LA125_109<=PLUS)||(LA125_109>=BAND && LA125_109<=MOD)||LA125_109==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_109==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 109, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WEEKDAY:
                            {
                            int LA125_110 = input.LA(3);
                            if ( ((LA125_110>=IN_SET && LA125_110<=REGEXP)||(LA125_110>=OR_EXPR && LA125_110<=NOT_EXPR)||LA125_110==IS||LA125_110==LBRACK||LA125_110==LPAREN||LA125_110==RCURLY||(LA125_110>=COMMA && LA125_110<=STAR)||(LA125_110>=LT && LA125_110<=PLUS)||(LA125_110>=BAND && LA125_110<=MOD)||LA125_110==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_110==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 110, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LW:
                            {
                            int LA125_111 = input.LA(3);
                            if ( ((LA125_111>=IN_SET && LA125_111<=REGEXP)||(LA125_111>=OR_EXPR && LA125_111<=NOT_EXPR)||LA125_111==IS||LA125_111==LBRACK||LA125_111==LPAREN||LA125_111==RCURLY||(LA125_111>=COMMA && LA125_111<=STAR)||(LA125_111>=LT && LA125_111<=PLUS)||(LA125_111>=BAND && LA125_111<=MOD)||LA125_111==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_111==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 111, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INSTANCEOF:
                            {
                            int LA125_112 = input.LA(3);
                            if ( ((LA125_112>=IN_SET && LA125_112<=REGEXP)||(LA125_112>=OR_EXPR && LA125_112<=NOT_EXPR)||LA125_112==IS||LA125_112==LBRACK||LA125_112==LPAREN||LA125_112==RCURLY||(LA125_112>=COMMA && LA125_112<=STAR)||(LA125_112>=LT && LA125_112<=PLUS)||(LA125_112>=BAND && LA125_112<=MOD)||LA125_112==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_112==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 112, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TYPEOF:
                            {
                            int LA125_113 = input.LA(3);
                            if ( ((LA125_113>=IN_SET && LA125_113<=REGEXP)||(LA125_113>=OR_EXPR && LA125_113<=NOT_EXPR)||LA125_113==IS||LA125_113==LBRACK||LA125_113==LPAREN||LA125_113==RCURLY||(LA125_113>=COMMA && LA125_113<=STAR)||(LA125_113>=LT && LA125_113<=PLUS)||(LA125_113>=BAND && LA125_113<=MOD)||LA125_113==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_113==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 113, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CAST:
                            {
                            int LA125_114 = input.LA(3);
                            if ( ((LA125_114>=IN_SET && LA125_114<=REGEXP)||(LA125_114>=OR_EXPR && LA125_114<=NOT_EXPR)||LA125_114==IS||LA125_114==LBRACK||LA125_114==LPAREN||LA125_114==RCURLY||(LA125_114>=COMMA && LA125_114<=STAR)||(LA125_114>=LT && LA125_114<=PLUS)||(LA125_114>=BAND && LA125_114<=MOD)||LA125_114==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_114==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 114, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SNAPSHOT:
                            {
                            int LA125_115 = input.LA(3);
                            if ( ((LA125_115>=IN_SET && LA125_115<=REGEXP)||(LA125_115>=OR_EXPR && LA125_115<=NOT_EXPR)||LA125_115==IS||LA125_115==LBRACK||LA125_115==LPAREN||LA125_115==RCURLY||(LA125_115>=COMMA && LA125_115<=STAR)||(LA125_115>=LT && LA125_115<=PLUS)||(LA125_115>=BAND && LA125_115<=MOD)||LA125_115==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_115==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 115, input);
                                throw nvae;
                            }
                            }
                            break;
                        case VARIABLE:
                            {
                            int LA125_116 = input.LA(3);
                            if ( ((LA125_116>=IN_SET && LA125_116<=REGEXP)||(LA125_116>=OR_EXPR && LA125_116<=NOT_EXPR)||LA125_116==IS||LA125_116==LBRACK||LA125_116==LPAREN||LA125_116==RCURLY||(LA125_116>=COMMA && LA125_116<=STAR)||(LA125_116>=LT && LA125_116<=PLUS)||(LA125_116>=BAND && LA125_116<=MOD)||LA125_116==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_116==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 116, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INDEX:
                            {
                            int LA125_117 = input.LA(3);
                            if ( (LA125_117==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_117>=IN_SET && LA125_117<=REGEXP)||(LA125_117>=OR_EXPR && LA125_117<=NOT_EXPR)||LA125_117==IS||LA125_117==LBRACK||LA125_117==LPAREN||LA125_117==RCURLY||(LA125_117>=COMMA && LA125_117<=STAR)||(LA125_117>=LT && LA125_117<=PLUS)||(LA125_117>=BAND && LA125_117<=MOD)||LA125_117==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 117, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WINDOW:
                            {
                            int LA125_118 = input.LA(3);
                            if ( ((LA125_118>=IN_SET && LA125_118<=REGEXP)||(LA125_118>=OR_EXPR && LA125_118<=NOT_EXPR)||LA125_118==IS||LA125_118==LBRACK||LA125_118==LPAREN||LA125_118==RCURLY||(LA125_118>=COMMA && LA125_118<=STAR)||(LA125_118>=LT && LA125_118<=PLUS)||(LA125_118>=BAND && LA125_118<=MOD)||LA125_118==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_118==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 118, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LEFT:
                            {
                            int LA125_119 = input.LA(3);
                            if ( ((LA125_119>=IN_SET && LA125_119<=REGEXP)||(LA125_119>=OR_EXPR && LA125_119<=NOT_EXPR)||LA125_119==IS||LA125_119==LBRACK||LA125_119==LPAREN||LA125_119==RCURLY||(LA125_119>=COMMA && LA125_119<=STAR)||(LA125_119>=LT && LA125_119<=PLUS)||(LA125_119>=BAND && LA125_119<=MOD)||LA125_119==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_119==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 119, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RIGHT:
                            {
                            int LA125_120 = input.LA(3);
                            if ( ((LA125_120>=IN_SET && LA125_120<=REGEXP)||(LA125_120>=OR_EXPR && LA125_120<=NOT_EXPR)||LA125_120==IS||LA125_120==LBRACK||LA125_120==LPAREN||LA125_120==RCURLY||(LA125_120>=COMMA && LA125_120<=STAR)||(LA125_120>=LT && LA125_120<=PLUS)||(LA125_120>=BAND && LA125_120<=MOD)||LA125_120==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_120==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 120, input);
                                throw nvae;
                            }
                            }
                            break;
                        case OUTER:
                            {
                            int LA125_121 = input.LA(3);
                            if ( (LA125_121==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_121>=IN_SET && LA125_121<=REGEXP)||(LA125_121>=OR_EXPR && LA125_121<=NOT_EXPR)||LA125_121==IS||LA125_121==LBRACK||LA125_121==LPAREN||LA125_121==RCURLY||(LA125_121>=COMMA && LA125_121<=STAR)||(LA125_121>=LT && LA125_121<=PLUS)||(LA125_121>=BAND && LA125_121<=MOD)||LA125_121==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 121, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FULL:
                            {
                            int LA125_122 = input.LA(3);
                            if ( (LA125_122==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_122>=IN_SET && LA125_122<=REGEXP)||(LA125_122>=OR_EXPR && LA125_122<=NOT_EXPR)||LA125_122==IS||LA125_122==LBRACK||LA125_122==LPAREN||LA125_122==RCURLY||(LA125_122>=COMMA && LA125_122<=STAR)||(LA125_122>=LT && LA125_122<=PLUS)||(LA125_122>=BAND && LA125_122<=MOD)||LA125_122==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 122, input);
                                throw nvae;
                            }
                            }
                            break;
                        case JOIN:
                            {
                            int LA125_123 = input.LA(3);
                            if ( ((LA125_123>=IN_SET && LA125_123<=REGEXP)||(LA125_123>=OR_EXPR && LA125_123<=NOT_EXPR)||LA125_123==IS||LA125_123==LBRACK||LA125_123==LPAREN||LA125_123==RCURLY||(LA125_123>=COMMA && LA125_123<=STAR)||(LA125_123>=LT && LA125_123<=PLUS)||(LA125_123>=BAND && LA125_123<=MOD)||LA125_123==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_123==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 123, input);
                                throw nvae;
                            }
                            }
                            break;
                        case DEFINE:
                            {
                            int LA125_124 = input.LA(3);
                            if ( ((LA125_124>=IN_SET && LA125_124<=REGEXP)||(LA125_124>=OR_EXPR && LA125_124<=NOT_EXPR)||LA125_124==IS||LA125_124==LBRACK||LA125_124==LPAREN||LA125_124==RCURLY||(LA125_124>=COMMA && LA125_124<=STAR)||(LA125_124>=LT && LA125_124<=PLUS)||(LA125_124>=BAND && LA125_124<=MOD)||LA125_124==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_124==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 124, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PARTITION:
                            {
                            int LA125_125 = input.LA(3);
                            if ( ((LA125_125>=IN_SET && LA125_125<=REGEXP)||(LA125_125>=OR_EXPR && LA125_125<=NOT_EXPR)||LA125_125==IS||LA125_125==LBRACK||LA125_125==LPAREN||LA125_125==RCURLY||(LA125_125>=COMMA && LA125_125<=STAR)||(LA125_125>=LT && LA125_125<=PLUS)||(LA125_125>=BAND && LA125_125<=MOD)||LA125_125==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_125==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 125, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHES:
                            {
                            int LA125_126 = input.LA(3);
                            if ( ((LA125_126>=IN_SET && LA125_126<=REGEXP)||(LA125_126>=OR_EXPR && LA125_126<=NOT_EXPR)||LA125_126==IS||LA125_126==LBRACK||LA125_126==LPAREN||LA125_126==RCURLY||(LA125_126>=COMMA && LA125_126<=STAR)||(LA125_126>=LT && LA125_126<=PLUS)||(LA125_126>=BAND && LA125_126<=MOD)||LA125_126==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_126==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 126, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CONTEXT:
                            {
                            int LA125_127 = input.LA(3);
                            if ( ((LA125_127>=IN_SET && LA125_127<=REGEXP)||(LA125_127>=OR_EXPR && LA125_127<=NOT_EXPR)||LA125_127==IS||LA125_127==LBRACK||LA125_127==LPAREN||LA125_127==RCURLY||(LA125_127>=COMMA && LA125_127<=STAR)||(LA125_127>=LT && LA125_127<=PLUS)||(LA125_127>=BAND && LA125_127<=MOD)||LA125_127==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_127==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 127, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FOR:
                            {
                            int LA125_128 = input.LA(3);
                            if ( ((LA125_128>=IN_SET && LA125_128<=REGEXP)||(LA125_128>=OR_EXPR && LA125_128<=NOT_EXPR)||LA125_128==IS||LA125_128==LBRACK||LA125_128==LPAREN||LA125_128==RCURLY||(LA125_128>=COMMA && LA125_128<=STAR)||(LA125_128>=LT && LA125_128<=PLUS)||(LA125_128>=BAND && LA125_128<=MOD)||LA125_128==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_128==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 128, input);
                                throw nvae;
                            }
                            }
                            break;
                        case USING:
                            {
                            int LA125_129 = input.LA(3);
                            if ( (LA125_129==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_129>=IN_SET && LA125_129<=REGEXP)||(LA125_129>=OR_EXPR && LA125_129<=NOT_EXPR)||LA125_129==IS||LA125_129==LBRACK||LA125_129==LPAREN||LA125_129==RCURLY||(LA125_129>=COMMA && LA125_129<=STAR)||(LA125_129>=LT && LA125_129<=PLUS)||(LA125_129>=BAND && LA125_129<=MOD)||LA125_129==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 129, input);
                                throw nvae;
                            }
                            }
                            break;
                        case BETWEEN:
                        case NOT_EXPR:
                        case WHERE:
                        case CASE:
                        case ISTREAM:
                        case PREVIOUSCOUNT:
                        case PREVIOUSWINDOW:
                        case EXISTS:
                        case CURRENT_TIMESTAMP:
                        case SET:
                        case BOOLEAN_TRUE:
                        case BOOLEAN_FALSE:
                        case VALUE_NULL:
                        case AFTER:
                        case NEWKW:
                        case NUM_DOUBLE:
                        case LPAREN:
                        case LCURLY:
                        case RCURLY:
                        case QUESTION:
                        case PLUS:
                        case MINUS:
                        case NUM_INT:
                        case NUM_LONG:
                        case NUM_FLOAT:
                            {
                            alt125=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 74, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        alt125=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);
                        throw nvae;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expression_in_gopConfig5277);
                            expression337=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression337.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_jsonobject_in_gopConfig5281);
                            jsonobject338=jsonobject();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonobject.add(jsonobject338.getTree());
                            }
                            break;
                        case 3 :
                            {
                            pushFollow(FOLLOW_jsonarray_in_gopConfig5285);
                            jsonarray339=jsonarray();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonarray.add(jsonarray339.getTree());
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGITM, "GOPCFGITM"), root_1);
                        adaptor.addChild(root_1, stream_n.nextNode());
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        if ( stream_jsonobject.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonobject.nextTree());
                        }
                        stream_jsonobject.reset();
                        if ( stream_jsonarray.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonarray.nextTree());
                        }
                        stream_jsonarray.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamFilterExpression_return streamFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamFilterExpression_return retval = new EsperEPL2GrammarParser.streamFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT340=null;
        Token DOT341=null;
        Token DOT343=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression342 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression344 = null;
        CommonTree IDENT340_tree=null;
        CommonTree DOT341_tree=null;
        CommonTree DOT343_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT340=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamFilterExpression5318); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT340_tree = (CommonTree)adaptor.create(IDENT340);
            adaptor.addChild(root_0, IDENT340_tree);
            }
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==DOT) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    {
                    DOT341=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT341_tree = (CommonTree)adaptor.create(DOT341);
                    adaptor.addChild(root_0, DOT341_tree);
                    }
                    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5323);
                    viewExpression342=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression342.getTree());
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);
                        if ( (LA127_0==DOT) ) {
                            alt127=1;
                        }
                        switch (alt127) {
                    	case 1 :
                    	    {
                    	    DOT343=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5326); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT343_tree = (CommonTree)adaptor.create(DOT343);
                    	    adaptor.addChild(root_0, DOT343_tree);
                    	    }
                    	    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5328);
                    	    viewExpression344=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression344.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop127;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE345=null;
        Token CONTEXT346=null;
        Token AS347=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail348 = null;
        CommonTree name_tree=null;
        CommonTree CREATE345_tree=null;
        CommonTree CONTEXT346_tree=null;
        CommonTree AS347_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE345=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr5344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE345);
            CONTEXT346=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr5346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT346);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr5350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==AS) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    AS347=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr5352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS347);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr5355);
            createContextDetail348=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail348.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createExpressionExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createExpressionExpr_return createExpressionExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createExpressionExpr_return retval = new EsperEPL2GrammarParser.createExpressionExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CREATE349=null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl350 = null;
        CommonTree CREATE349_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        try {
            {
            CREATE349=(Token)match(input,CREATE,FOLLOW_CREATE_in_createExpressionExpr5380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE349);
            pushFollow(FOLLOW_expressionDecl_in_createExpressionExpr5382);
            expressionDecl350=expressionDecl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl350.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_EXPR, "CREATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA353=null;
        Token COMMA355=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice351 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested352 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested354 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested356 = null;
        CommonTree COMMA353_tree=null;
        CommonTree COMMA355_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_contextContextNested=new RewriteRuleSubtreeStream(adaptor,"rule contextContextNested");
        try {
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==COALESCE||LA131_0==GROUP||LA131_0==PARTITION||LA131_0==START||LA131_0==INITIATED) ) {
                alt131=1;
            }
            else if ( (LA131_0==CONTEXT) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);
                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextChoice_in_createContextDetail5403);
                    createContextChoice351=createContextChoice();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextChoice351.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5408);
                    contextContextNested352=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested352.getTree());
                    COMMA353=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA353);
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5412);
                    contextContextNested354=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested354.getTree());
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);
                        if ( (LA130_0==COMMA) ) {
                            alt130=1;
                        }
                        switch (alt130) {
                    	case 1 :
                    	    {
                    	    COMMA355=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5415); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA355);
                    	    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5417);
                    	    contextContextNested356=contextContextNested();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested356.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop130;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_NESTED, "CREATE_CTX_NESTED"), root_1);
                        if ( !(stream_contextContextNested.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_contextContextNested.hasNext() ) {
                            adaptor.addChild(root_1, stream_contextContextNested.nextTree());
                        }
                        stream_contextContextNested.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextContextNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextContextNested_return contextContextNested() throws RecognitionException {
        EsperEPL2GrammarParser.contextContextNested_return retval = new EsperEPL2GrammarParser.contextContextNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CONTEXT357=null;
        Token AS358=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice359 = null;
        CommonTree name_tree=null;
        CommonTree CONTEXT357_tree=null;
        CommonTree AS358_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextChoice=new RewriteRuleSubtreeStream(adaptor,"rule createContextChoice");
        try {
            {
            CONTEXT357=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextContextNested5443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT357);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextContextNested5447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt132=2;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==AS) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    {
                    AS358=(Token)match(input,AS,FOLLOW_AS_in_contextContextNested5449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS358);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextChoice_in_contextContextNested5452);
            createContextChoice359=createContextChoice();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextChoice.add(createContextChoice359.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextChoice.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextChoice_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextChoice_return createContextChoice() throws RecognitionException {
        EsperEPL2GrammarParser.createContextChoice_return retval = new EsperEPL2GrammarParser.createContextChoice_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token g=null;
        Token p=null;
        Token START360=null;
        Token END362=null;
        Token INITIATED364=null;
        Token BY365=null;
        Token TERMINATED367=null;
        Token BY368=null;
        Token PARTITION370=null;
        Token BY371=null;
        Token COMMA373=null;
        Token COMMA376=null;
        Token FROM378=null;
        Token COALESCE380=null;
        Token BY381=null;
        Token COMMA383=null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint361 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint363 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint366 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint369 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem372 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem374 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem375 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem377 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression379 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem382 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem384 = null;
        EsperEPL2GrammarParser.number_return number385 = null;
        CommonTree g_tree=null;
        CommonTree p_tree=null;
        CommonTree START360_tree=null;
        CommonTree END362_tree=null;
        CommonTree INITIATED364_tree=null;
        CommonTree BY365_tree=null;
        CommonTree TERMINATED367_tree=null;
        CommonTree BY368_tree=null;
        CommonTree PARTITION370_tree=null;
        CommonTree BY371_tree=null;
        CommonTree COMMA373_tree=null;
        CommonTree COMMA376_tree=null;
        CommonTree FROM378_tree=null;
        CommonTree COALESCE380_tree=null;
        CommonTree BY381_tree=null;
        CommonTree COMMA383_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_createContextRangePoint=new RewriteRuleSubtreeStream(adaptor,"rule createContextRangePoint");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextCoalesceItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextCoalesceItem");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        try {
            int alt141=5;
            switch ( input.LA(1) ) {
            case START:
                {
                alt141=1;
                }
                break;
            case INITIATED:
                {
                alt141=2;
                }
                break;
            case PARTITION:
                {
                alt141=3;
                }
                break;
            case GROUP:
                {
                alt141=4;
                }
                break;
            case COALESCE:
                {
                alt141=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);
                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    {
                    START360=(Token)match(input,START,FOLLOW_START_in_createContextChoice5477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START360);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5479);
                    createContextRangePoint361=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint361.getTree());
                    END362=(Token)match(input,END,FOLLOW_END_in_createContextChoice5481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END362);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5483);
                    createContextRangePoint363=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint363.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    INITIATED364=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextChoice5500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED364);
                    int alt133=2;
                    int LA133_0 = input.LA(1);
                    if ( (LA133_0==BY) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            BY365=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5503); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY365);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5507);
                    createContextRangePoint366=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint366.getTree());
                    TERMINATED367=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextChoice5509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED367);
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==BY) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            BY368=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5512); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY368);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5516);
                    createContextRangePoint369=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint369.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    PARTITION370=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextChoice5533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION370);
                    int alt135=2;
                    int LA135_0 = input.LA(1);
                    if ( (LA135_0==BY) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            BY371=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5536); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY371);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5540);
                    createContextPartitionItem372=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem372.getTree());
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);
                        if ( (LA136_0==COMMA) ) {
                            int LA136_3 = input.LA(2);
                            if ( (LA136_3==CONTEXT) ) {
                                int LA136_4 = input.LA(3);
                                if ( (LA136_4==AND_EXPR||LA136_4==FROM||LA136_4==LBRACK||LA136_4==LPAREN||LA136_4==COMMA||LA136_4==DOT||LA136_4==QUESTION||LA136_4==ESCAPECHAR) ) {
                                    alt136=1;
                                }
                            }
                            else if ( (LA136_3==WINDOW||LA136_3==ESCAPE||LA136_3==EVERY_EXPR||(LA136_3>=SUM && LA136_3<=COUNT)||LA136_3==OUTER||(LA136_3>=JOIN && LA136_3<=FULL)||(LA136_3>=EVENTS && LA136_3<=LAST)||(LA136_3>=UNIDIRECTIONAL && LA136_3<=PREVIOUSTAIL)||LA136_3==PRIOR||(LA136_3>=WEEKDAY && LA136_3<=CAST)||LA136_3==SNAPSHOT||(LA136_3>=VARIABLE && LA136_3<=INDEX)||(LA136_3>=DEFINE && LA136_3<=MATCHES)||(LA136_3>=FOR && LA136_3<=MATCHED)||LA136_3==IDENT||LA136_3==TICKED_STRING_LITERAL) ) {
                                alt136=1;
                            }
                        }
                        switch (alt136) {
                    	case 1 :
                    	    {
                    	    COMMA373=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5543); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA373);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5545);
                    	    createContextPartitionItem374=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem374.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop136;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5564);
                    createContextGroupItem375=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem375.getTree());
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);
                        if ( (LA137_0==COMMA) ) {
                            alt137=1;
                        }
                        switch (alt137) {
                    	case 1 :
                    	    {
                    	    COMMA376=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5567); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA376);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5569);
                    	    createContextGroupItem377=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem377.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop137;
                        }
                    } while (true);
                    FROM378=(Token)match(input,FROM,FOLLOW_FROM_in_createContextChoice5573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM378);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextChoice5575);
                    eventFilterExpression379=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression379.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    COALESCE380=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_createContextChoice5593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE380);
                    int alt138=2;
                    int LA138_0 = input.LA(1);
                    if ( (LA138_0==BY) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            {
                            BY381=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5596); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY381);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5600);
                    createContextCoalesceItem382=createContextCoalesceItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem382.getTree());
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);
                        if ( (LA139_0==COMMA) ) {
                            alt139=1;
                        }
                        switch (alt139) {
                    	case 1 :
                    	    {
                    	    COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5603); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA383);
                    	    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5605);
                    	    createContextCoalesceItem384=createContextCoalesceItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem384.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop139;
                        }
                    } while (true);
                    g=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(g);
                    pushFollow(FOLLOW_number_in_createContextChoice5613);
                    number385=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number385.getTree());
                    int alt140=2;
                    int LA140_0 = input.LA(1);
                    if ( (LA140_0==IDENT) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            {
                            p=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5618); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(p);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_COAL, "CREATE_CTX_COAL"), root_1);
                        if ( !(stream_createContextCoalesceItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextCoalesceItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextCoalesceItem.nextTree());
                        }
                        stream_createContextCoalesceItem.reset();
                        adaptor.addChild(root_1, stream_g.nextNode());
                        adaptor.addChild(root_1, stream_number.nextTree());
                        if ( stream_p.hasNext() ) {
                            adaptor.addChild(root_1, stream_p.nextNode());
                        }
                        stream_p.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextRangePoint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint() throws RecognitionException {
        EsperEPL2GrammarParser.createContextRangePoint_return retval = new EsperEPL2GrammarParser.createContextRangePoint_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR388=null;
        Token AFTER390=null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter386 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression387 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet389 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod391 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR388_tree=null;
        CommonTree AFTER390_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            int alt143=4;
            switch ( input.LA(1) ) {
            case EVENTS:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt143=1;
                }
                break;
            case PATTERN:
                {
                alt143=2;
                }
                break;
            case LPAREN:
                {
                alt143=3;
                }
                break;
            case AFTER:
                {
                alt143=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);
                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextFilter_in_createContextRangePoint5652);
                    createContextFilter386=createContextFilter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextFilter386.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_createContextRangePoint5659);
                    patternInclusionExpression387=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression387.getTree());
                    int alt142=2;
                    int LA142_0 = input.LA(1);
                    if ( (LA142_0==ATCHAR) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            {
                            ATCHAR388=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextRangePoint5662); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR388);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextRangePoint5666); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PATTERN, "CREATE_CTX_PATTERN"), root_1);
                        adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextRangePoint5685);
                    crontabLimitParameterSet389=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, crontabLimitParameterSet389.getTree());
                    }
                    break;
                case 4 :
                    {
                    AFTER390=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextRangePoint5690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER390);
                    pushFollow(FOLLOW_timePeriod_in_createContextRangePoint5692);
                    timePeriod391=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod391.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS393=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression392 = null;
        CommonTree i_tree=null;
        CommonTree AS393_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter5712);
            eventFilterExpression392=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression392.getTree());
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==AS||LA145_0==IDENT) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    int alt144=2;
                    int LA144_0 = input.LA(1);
                    if ( (LA144_0==AS) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            {
                            AS393=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter5715); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS393);
                            }
                            break;
                    }
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter5720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR395=null;
        Token COMMA396=null;
        Token FROM398=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty394 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty397 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression399 = null;
        CommonTree AND_EXPR395_tree=null;
        CommonTree COMMA396_tree=null;
        CommonTree FROM398_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5747);
            eventProperty394=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty394.getTree());
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);
                if ( (LA147_0==AND_EXPR||LA147_0==COMMA) ) {
                    alt147=1;
                }
                switch (alt147) {
            	case 1 :
            	    {
            	    int alt146=2;
            	    int LA146_0 = input.LA(1);
            	    if ( (LA146_0==AND_EXPR) ) {
            	        alt146=1;
            	    }
            	    else if ( (LA146_0==COMMA) ) {
            	        alt146=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 146, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt146) {
            	        case 1 :
            	            {
            	            AND_EXPR395=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem5751); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR395);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA396=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem5753); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA396);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5756);
            	    eventProperty397=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty397.getTree());
            	    }
            	    break;
            	default :
            	    break loop147;
                }
            } while (true);
            FROM398=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem5760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM398);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem5762);
            eventFilterExpression399=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression399.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextCoalesceItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextCoalesceItem_return retval = new EsperEPL2GrammarParser.createContextCoalesceItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FROM401=null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass400 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression402 = null;
        CommonTree FROM401_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionNoClass_in_createContextCoalesceItem5788);
            libFunctionNoClass400=libFunctionNoClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass400.getTree());
            FROM401=(Token)match(input,FROM,FOLLOW_FROM_in_createContextCoalesceItem5790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM401);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextCoalesceItem5792);
            eventFilterExpression402=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression402.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COALESCE, "COALESCE"), root_1);
                adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP403=null;
        Token BY404=null;
        Token AS406=null;
        EsperEPL2GrammarParser.expression_return expression405 = null;
        CommonTree i_tree=null;
        CommonTree GROUP403_tree=null;
        CommonTree BY404_tree=null;
        CommonTree AS406_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP403=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem5816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP403);
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==BY) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    BY404=(Token)match(input,BY,FOLLOW_BY_in_createContextGroupItem5818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY404);
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_createContextGroupItem5821);
            expression405=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression405.getTree());
            AS406=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem5823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS406);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem5827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList407 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual5857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual5859);
            columnList407=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList407.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA409=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement408 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement410 = null;
        CommonTree COMMA409_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList5885);
            variantListElement408=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement408.getTree());
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);
                if ( (LA149_0==COMMA) ) {
                    int LA149_4 = input.LA(2);
                    if ( (LA149_4==IDENT) ) {
                        int LA149_6 = input.LA(3);
                        if ( (LA149_6==EOF||LA149_6==FOR||LA149_6==IDENT||LA149_6==COMMA||LA149_6==DOT) ) {
                            alt149=1;
                        }
                    }
                    else if ( (LA149_4==EVENTS||LA149_4==STAR||LA149_4==TICKED_STRING_LITERAL) ) {
                        alt149=1;
                    }
                }
                switch (alt149) {
            	case 1 :
            	    {
            	    COMMA409=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList5888); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA409);
            	    pushFollow(FOLLOW_variantListElement_in_variantList5890);
            	    variantListElement410=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement410.getTree());
            	    }
            	    break;
            	default :
            	    break loop149;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR411=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier412 = null;
        CommonTree STAR411_tree=null;
        try {
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==STAR) ) {
                alt150=1;
            }
            else if ( (LA150_0==EVENTS||LA150_0==IDENT||LA150_0==TICKED_STRING_LITERAL) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);
                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR411=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement5917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR411_tree = (CommonTree)adaptor.create(STAR411);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR411_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement5923);
                    classIdentifier412=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier412.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO413=null;
        Token LPAREN415=null;
        Token RPAREN417=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier414 = null;
        EsperEPL2GrammarParser.columnList_return columnList416 = null;
        CommonTree s_tree=null;
        CommonTree INTO413_tree=null;
        CommonTree LPAREN415_tree=null;
        CommonTree RPAREN417_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt151=4;
            switch ( input.LA(1) ) {
                case ISTREAM:
                    {
                    alt151=1;
                    }
                    break;
                case RSTREAM:
                    {
                    alt151=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt151=3;
                    }
                    break;
            }
            switch (alt151) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr5948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr5954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_insertIntoExpr5960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            INTO413=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr5964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO413);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr5966);
            classIdentifier414=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier414.getTree());
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==LPAREN) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    LPAREN415=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr5969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN415);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr5971);
                    columnList416=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList416.getTree());
                    RPAREN417=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr5973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN417);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT418=null;
        Token COMMA419=null;
        Token IDENT420=null;
        CommonTree IDENT418_tree=null;
        CommonTree COMMA419_tree=null;
        CommonTree IDENT420_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT418=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList6006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT418);
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);
                if ( (LA153_0==COMMA) ) {
                    int LA153_4 = input.LA(2);
                    if ( (LA153_4==IDENT) ) {
                        int LA153_6 = input.LA(3);
                        if ( (LA153_6==EOF||LA153_6==FOR||LA153_6==IDENT||LA153_6==RPAREN||LA153_6==COMMA) ) {
                            alt153=1;
                        }
                    }
                }
                switch (alt153) {
            	case 1 :
            	    {
            	    COMMA419=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList6009); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA419);
            	    IDENT420=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList6011); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT420);
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression421 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin422 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList423 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause6049);
            streamExpression421=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression421.getTree());
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==EOF||LA154_0==WHERE||(LA154_0>=GROUP && LA154_0<=HAVING)||LA154_0==OUTPUT||LA154_0==ORDER||LA154_0==ROW_LIMIT_EXPR||LA154_0==MATCH_RECOGNIZE||LA154_0==FOR||LA154_0==RPAREN||LA154_0==COMMA) ) {
                alt154=1;
            }
            else if ( ((LA154_0>=INNER && LA154_0<=FULL)) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);
                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause6052);
                    regularJoin422=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin422.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause6056);
                    outerJoinList423=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList423.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA424=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression425 = null;
        CommonTree COMMA424_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);
                if ( (LA155_0==COMMA) ) {
                    alt155=1;
                }
                switch (alt155) {
            	case 1 :
            	    {
            	    COMMA424=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin6070); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin6073);
            	    streamExpression425=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression425.getTree());
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin426 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin427 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList6087);
            outerJoin426=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin426.getTree());
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);
                if ( ((LA156_0>=INNER && LA156_0<=FULL)) ) {
                    alt156=1;
                }
                switch (alt156) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList6090);
            	    outerJoin427=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin427.getTree());
            	    }
            	    break;
            	default :
            	    break loop156;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER428=null;
        Token JOIN429=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression430 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent431 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER428_tree=null;
        CommonTree JOIN429_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt159=2;
            int LA159_0 = input.LA(1);
            if ( ((LA159_0>=JOIN && LA159_0<=FULL)) ) {
                alt159=1;
            }
            else if ( (LA159_0==INNER) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);
                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    {
                    int alt158=2;
                    int LA158_0 = input.LA(1);
                    if ( ((LA158_0>=LEFT && LA158_0<=FULL)) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            {
                            int alt157=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt157=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt157=2;
                                }
                                break;
                            case FULL:
                                {
                                alt157=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 157, 0, input);
                                throw nvae;
                            }
                            switch (alt157) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin6133); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin6137); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin6141); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER428=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin6144); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER428);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin6165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN429=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin6179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN429);
            pushFollow(FOLLOW_streamExpression_in_outerJoin6181);
            streamExpression430=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression430.getTree());
            int alt160=2;
            int LA160_0 = input.LA(1);
            if ( (LA160_0==ON) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outerJoinIdent_in_outerJoin6183);
                    outerJoinIdent431=outerJoinIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent431.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON432=null;
        Token AND_EXPR434=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair433 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair435 = null;
        CommonTree ON432_tree=null;
        CommonTree AND_EXPR434_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON432=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent6261); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6264);
            outerJoinIdentPair433=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair433.getTree());
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);
                if ( (LA161_0==AND_EXPR) ) {
                    alt161=1;
                }
                switch (alt161) {
            	case 1 :
            	    {
            	    AND_EXPR434=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent6267); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6270);
            	    outerJoinIdentPair435=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair435.getTree());
            	    }
            	    break;
            	default :
            	    break loop161;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS437=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty436 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty438 = null;
        CommonTree EQUALS437_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6285);
            eventProperty436=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty436.getTree());
            EQUALS437=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair6287); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6290);
            eventProperty438=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty438.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression439 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause6312);
            evalOrExpression439=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression439.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList440 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt162=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt162=1;
                    }
                    break;
                case ISTREAM:
                    {
                    int LA162_2 = input.LA(2);
                    if ( (LA162_2==LPAREN) ) {
                        int LA162_81 = input.LA(3);
                        if ( (LA162_81==WINDOW||LA162_81==BETWEEN||LA162_81==ESCAPE||(LA162_81>=NOT_EXPR && LA162_81<=EVERY_EXPR)||LA162_81==WHERE||(LA162_81>=SUM && LA162_81<=CASE)||LA162_81==OUTER||(LA162_81>=JOIN && LA162_81<=FULL)||(LA162_81>=EVENTS && LA162_81<=LAST)||LA162_81==ISTREAM||(LA162_81>=UNIDIRECTIONAL && LA162_81<=CURRENT_TIMESTAMP)||(LA162_81>=SNAPSHOT && LA162_81<=INDEX)||(LA162_81>=BOOLEAN_TRUE && LA162_81<=VALUE_NULL)||(LA162_81>=DEFINE && LA162_81<=MATCHED)||LA162_81==NEWKW||LA162_81==CONTEXT||LA162_81==NUM_DOUBLE||(LA162_81>=IDENT && LA162_81<=LPAREN)||LA162_81==LCURLY||LA162_81==QUESTION||(LA162_81>=PLUS && LA162_81<=QUOTED_STRING_LITERAL)||LA162_81==MINUS||LA162_81==NUM_INT||(LA162_81>=TICKED_STRING_LITERAL && LA162_81<=NUM_FLOAT)) ) {
                            alt162=2;
                        }
                    }
                    else if ( (LA162_2==WINDOW||LA162_2==BETWEEN||LA162_2==ESCAPE||(LA162_2>=NOT_EXPR && LA162_2<=EVERY_EXPR)||LA162_2==WHERE||(LA162_2>=SUM && LA162_2<=COUNT)||LA162_2==CASE||LA162_2==OUTER||(LA162_2>=JOIN && LA162_2<=FULL)||LA162_2==DISTINCT||(LA162_2>=EVENTS && LA162_2<=LAST)||LA162_2==ISTREAM||(LA162_2>=UNIDIRECTIONAL && LA162_2<=CURRENT_TIMESTAMP)||(LA162_2>=SNAPSHOT && LA162_2<=INDEX)||(LA162_2>=BOOLEAN_TRUE && LA162_2<=VALUE_NULL)||(LA162_2>=DEFINE && LA162_2<=MATCHED)||LA162_2==NEWKW||LA162_2==CONTEXT||LA162_2==NUM_DOUBLE||LA162_2==IDENT||LA162_2==LCURLY||LA162_2==STAR||LA162_2==QUESTION||(LA162_2>=PLUS && LA162_2<=QUOTED_STRING_LITERAL)||LA162_2==MINUS||LA162_2==NUM_INT||(LA162_2>=TICKED_STRING_LITERAL && LA162_2<=NUM_FLOAT)) ) {
                        alt162=2;
                    }
                    }
                    break;
                case IRSTREAM:
                    {
                    alt162=3;
                    }
                    break;
            }
            switch (alt162) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause6348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause6354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause6360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt163=2;
            int LA163_0 = input.LA(1);
            if ( (LA163_0==DISTINCT) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause6366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause6369);
            selectionList440=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList440.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA442=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement441 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement443 = null;
        CommonTree COMMA442_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList6400);
            selectionListElement441=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement441.getTree());
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);
                if ( (LA164_0==COMMA) ) {
                    alt164=1;
                }
                switch (alt164) {
            	case 1 :
            	    {
            	    COMMA442=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList6403); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList6406);
            	    selectionListElement443=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement443.getTree());
            	    }
            	    break;
            	default :
            	    break loop164;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS446=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector444 = null;
        EsperEPL2GrammarParser.expression_return expression445 = null;
        CommonTree s_tree=null;
        CommonTree AS446_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt166=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt166=1;
                }
                break;
            case IDENT:
                {
                int LA166_2 = input.LA(2);
                if ( (LA166_2==DOT) ) {
                    int LA166_78 = input.LA(3);
                    if ( (LA166_78==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt166=2;
                    }
                    else if ( (LA166_78==WINDOW||LA166_78==BETWEEN||LA166_78==ESCAPE||LA166_78==EVERY_EXPR||LA166_78==WHERE||(LA166_78>=SUM && LA166_78<=COUNT)||LA166_78==OUTER||(LA166_78>=JOIN && LA166_78<=FULL)||(LA166_78>=EVENTS && LA166_78<=LAST)||(LA166_78>=UNIDIRECTIONAL && LA166_78<=PREVIOUSTAIL)||LA166_78==PRIOR||(LA166_78>=WEEKDAY && LA166_78<=CAST)||(LA166_78>=SNAPSHOT && LA166_78<=INDEX)||(LA166_78>=DEFINE && LA166_78<=MATCHED)||LA166_78==CONTEXT||LA166_78==IDENT||LA166_78==TICKED_STRING_LITERAL) ) {
                        alt166=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 166, 78, input);
                        throw nvae;
                    }
                }
                else if ( (LA166_2==EOF||(LA166_2>=IN_SET && LA166_2<=REGEXP)||(LA166_2>=OR_EXPR && LA166_2<=NOT_EXPR)||(LA166_2>=WHERE && LA166_2<=AS)||(LA166_2>=WHEN && LA166_2<=THEN)||LA166_2==FROM||LA166_2==IS||(LA166_2>=GROUP && LA166_2<=HAVING)||LA166_2==OUTPUT||LA166_2==INSERT||LA166_2==ORDER||LA166_2==ROW_LIMIT_EXPR||LA166_2==FOR||LA166_2==LBRACK||LA166_2==LPAREN||(LA166_2>=COMMA && LA166_2<=EQUALS)||LA166_2==STAR||(LA166_2>=LT && LA166_2<=PLUS)||(LA166_2>=BAND && LA166_2<=MOD)||LA166_2==ESCAPECHAR) ) {
                    alt166=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 166, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt166=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);
                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement6432); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement6450);
                    streamSelector444=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector444.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement6455);
                    expression445=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression445.getTree());
                    int alt165=2;
                    int LA165_0 = input.LA(1);
                    if ( (LA165_0==AS) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            {
                            AS446=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement6458); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS446);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement6462);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT447=null;
        Token STAR448=null;
        Token AS449=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT447_tree=null;
        CommonTree STAR448_tree=null;
        CommonTree AS449_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT447=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector6520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT447);
            STAR448=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector6522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR448);
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==AS) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    AS449=(Token)match(input,AS,FOLLOW_AS_in_streamSelector6525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS449);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT454=null;
        Token DOT456=null;
        Token AS458=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression450 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression451 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression452 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression453 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression455 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression457 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT454_tree=null;
        CommonTree DOT456_tree=null;
        CommonTree AS458_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt168=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA168_1 = input.LA(2);
                if ( (LA168_1==EOF||(LA168_1>=WHERE && LA168_1<=AS)||(LA168_1>=INNER && LA168_1<=ON)||(LA168_1>=GROUP && LA168_1<=HAVING)||LA168_1==OUTPUT||LA168_1==ORDER||(LA168_1>=UNIDIRECTIONAL && LA168_1<=RETAININTERSECTION)||LA168_1==ROW_LIMIT_EXPR||LA168_1==MATCH_RECOGNIZE||LA168_1==FOR||LA168_1==LBRACK||(LA168_1>=IDENT && LA168_1<=RPAREN)||(LA168_1>=COMMA && LA168_1<=DOT)) ) {
                    alt168=1;
                }
                else if ( (LA168_1==COLON) ) {
                    alt168=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);
                    throw nvae;
                }
                }
                break;
            case EVENTS:
            case TICKED_STRING_LITERAL:
                {
                alt168=1;
                }
                break;
            case PATTERN:
                {
                alt168=2;
                }
                break;
            case SQL:
                {
                alt168=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);
                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression6559);
                    eventFilterExpression450=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression450.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression6563);
                    patternInclusionExpression451=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression451.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression6567);
                    databaseJoinExpression452=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression452.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression6571);
                    methodJoinExpression453=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression453.getTree());
                    }
                    break;
            }
            int alt170=2;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==DOT) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    DOT454=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT454);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression6580);
                    viewExpression455=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression455.getTree());
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);
                        if ( (LA169_0==DOT) ) {
                            alt169=1;
                        }
                        switch (alt169) {
                    	case 1 :
                    	    {
                    	    DOT456=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6583); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT456);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression6585);
                    	    viewExpression457=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression457.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop169;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt171=3;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==AS) ) {
                alt171=1;
            }
            else if ( (LA171_0==IDENT) ) {
                alt171=2;
            }
            switch (alt171) {
                case 1 :
                    {
                    AS458=(Token)match(input,AS,FOLLOW_AS_in_streamExpression6592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS458);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==UNIDIRECTIONAL) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression6609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt173=3;
            int LA173_0 = input.LA(1);
            if ( (LA173_0==RETAINUNION) ) {
                alt173=1;
            }
            else if ( (LA173_0==RETAININTERSECTION) ) {
                alt173=2;
            }
            switch (alt173) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression6616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression6620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR459=null;
        Token LPAREN460=null;
        Token RPAREN462=null;
        EsperEPL2GrammarParser.expressionList_return expressionList461 = null;
        CommonTree i_tree=null;
        CommonTree FOR459_tree=null;
        CommonTree LPAREN460_tree=null;
        CommonTree RPAREN462_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR459=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr6676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR459);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr6680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt175=2;
            int LA175_0 = input.LA(1);
            if ( (LA175_0==LPAREN) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    {
                    LPAREN460=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr6683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN460);
                    int alt174=2;
                    int LA174_0 = input.LA(1);
                    if ( (LA174_0==WINDOW||LA174_0==BETWEEN||LA174_0==ESCAPE||(LA174_0>=NOT_EXPR && LA174_0<=EVERY_EXPR)||LA174_0==WHERE||(LA174_0>=SUM && LA174_0<=COUNT)||LA174_0==CASE||LA174_0==OUTER||(LA174_0>=JOIN && LA174_0<=FULL)||(LA174_0>=EVENTS && LA174_0<=LAST)||LA174_0==ISTREAM||(LA174_0>=UNIDIRECTIONAL && LA174_0<=CURRENT_TIMESTAMP)||(LA174_0>=SNAPSHOT && LA174_0<=INDEX)||(LA174_0>=BOOLEAN_TRUE && LA174_0<=VALUE_NULL)||(LA174_0>=DEFINE && LA174_0<=MATCHED)||LA174_0==NEWKW||LA174_0==CONTEXT||LA174_0==NUM_DOUBLE||(LA174_0>=IDENT && LA174_0<=LPAREN)||LA174_0==LCURLY||LA174_0==QUESTION||(LA174_0>=PLUS && LA174_0<=QUOTED_STRING_LITERAL)||LA174_0==MINUS||LA174_0==NUM_INT||(LA174_0>=TICKED_STRING_LITERAL && LA174_0<=NUM_FLOAT)) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr6685);
                            expressionList461=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList461.getTree());
                            }
                            break;
                    }
                    RPAREN462=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr6688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN462);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE463=null;
        Token LPAREN464=null;
        Token RPAREN472=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy465 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures466 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection467 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip468 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern469 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval470 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine471 = null;
        CommonTree MATCH_RECOGNIZE463_tree=null;
        CommonTree LPAREN464_tree=null;
        CommonTree RPAREN472_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE463=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog6724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE463);
            LPAREN464=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog6738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN464);
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==PARTITION) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog6744);
                    matchRecogPartitionBy465=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy465.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog6751);
            matchRecogMeasures466=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures466.getTree());
            int alt177=2;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==ALL) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog6756);
                    matchRecogMatchesSelection467=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection467.getTree());
                    }
                    break;
            }
            int alt178=2;
            int LA178_0 = input.LA(1);
            if ( (LA178_0==AFTER) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog6762);
                    matchRecogMatchesAfterSkip468=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip468.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog6768);
            matchRecogPattern469=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern469.getTree());
            int alt179=2;
            int LA179_0 = input.LA(1);
            if ( (LA179_0==IDENT) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog6774);
                    matchRecogMatchesInterval470=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval470.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog6780);
            matchRecogDefine471=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine471.getTree());
            RPAREN472=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog6787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN472);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION473=null;
        Token BY474=null;
        Token COMMA476=null;
        EsperEPL2GrammarParser.expression_return expression475 = null;
        EsperEPL2GrammarParser.expression_return expression477 = null;
        CommonTree PARTITION473_tree=null;
        CommonTree BY474_tree=null;
        CommonTree COMMA476_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION473=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy6824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION473);
            BY474=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy6826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY474);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6828);
            expression475=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression475.getTree());
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);
                if ( (LA180_0==COMMA) ) {
                    alt180=1;
                }
                switch (alt180) {
            	case 1 :
            	    {
            	    COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy6831); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA476);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6833);
            	    expression477=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression477.getTree());
            	    }
            	    break;
            	default :
            	    break loop180;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES478=null;
        Token COMMA480=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem479 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem481 = null;
        CommonTree MEASURES478_tree=null;
        CommonTree COMMA480_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES478=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures6862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES478);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6864);
            matchRecogMeasureItem479=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem479.getTree());
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);
                if ( (LA181_0==COMMA) ) {
                    alt181=1;
                }
                switch (alt181) {
            	case 1 :
            	    {
            	    COMMA480=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures6867); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA480);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6869);
            	    matchRecogMeasureItem481=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem481.getTree());
            	    }
            	    break;
            	default :
            	    break loop181;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS483=null;
        EsperEPL2GrammarParser.expression_return expression482 = null;
        CommonTree i_tree=null;
        CommonTree AS483_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem6894);
            expression482=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression482.getTree());
            int alt183=2;
            int LA183_0 = input.LA(1);
            if ( (LA183_0==AS) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    {
                    AS483=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem6897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS483);
                    int alt182=2;
                    int LA182_0 = input.LA(1);
                    if ( (LA182_0==IDENT) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem6902); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL484=null;
        Token MATCHES485=null;
        CommonTree ALL484_tree=null;
        CommonTree MATCHES485_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL484=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection6933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL484_tree = (CommonTree)adaptor.create(ALL484);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL484_tree, root_0);
            }
            MATCHES485=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection6936); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN486=null;
        Token LPAREN487=null;
        Token RPAREN489=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration488 = null;
        CommonTree PATTERN486_tree=null;
        CommonTree LPAREN487_tree=null;
        CommonTree RPAREN489_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN486=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern6951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN486);
            LPAREN487=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern6953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN487);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6955);
            matchRecogPatternAlteration488=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration488.getTree());
            RPAREN489=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern6957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN489);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER490=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER490_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER490=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip6979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER490);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6983);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6987);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6991);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6995);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6999);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod491 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval7035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval7037);
            timePeriod491=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod491.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat492 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat493 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration7063);
            matchRecogPatternConcat492=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat492.getTree());
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);
                if ( (LA184_0==BOR) ) {
                    alt184=1;
                }
                switch (alt184) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration7068); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration7070);
            	    matchRecogPatternConcat493=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat493.getTree());
            	    }
            	    break;
            	default :
            	    break loop184;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary494 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt185=0;
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);
                if ( ((LA185_0>=IDENT && LA185_0<=LPAREN)) ) {
                    alt185=1;
                }
                switch (alt185) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat7103);
            	    matchRecogPatternUnary494=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary494.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt185 >= 1 ) break loop185;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(185, input);
                        throw eee;
                }
                cnt185++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested495 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom496 = null;
        try {
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==LPAREN) ) {
                alt186=1;
            }
            else if ( (LA186_0==IDENT) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);
                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary7128);
                    matchRecogPatternNested495=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested495.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary7134);
                    matchRecogPatternAtom496=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom496.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN497=null;
        Token RPAREN499=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration498 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN497_tree=null;
        CommonTree RPAREN499_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN497=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested7146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN497);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested7148);
            matchRecogPatternAlteration498=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration498.getTree());
            RPAREN499=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested7150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN499);
            int alt187=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt187=1;
                    }
                    break;
                case PLUS:
                    {
                    alt187=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt187=3;
                    }
                    break;
            }
            switch (alt187) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested7155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested7161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested7167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom7206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt190=2;
            int LA190_0 = input.LA(1);
            if ( (LA190_0==STAR||LA190_0==QUESTION||LA190_0==PLUS) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    {
                    int alt188=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt188=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt188=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt188=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 188, 0, input);
                        throw nvae;
                    }
                    switch (alt188) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom7212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom7218); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7224); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt189=2;
                    int LA189_0 = input.LA(1);
                    if ( (LA189_0==QUESTION) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7230); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE500=null;
        Token COMMA502=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem501 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem503 = null;
        CommonTree DEFINE500_tree=null;
        CommonTree COMMA502_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE500=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine7274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE500);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7276);
            matchRecogDefineItem501=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem501.getTree());
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);
                if ( (LA191_0==COMMA) ) {
                    alt191=1;
                }
                switch (alt191) {
            	case 1 :
            	    {
            	    COMMA502=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine7279); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA502);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7281);
            	    matchRecogDefineItem503=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem503.getTree());
            	    }
            	    break;
            	default :
            	    break loop191;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS504=null;
        EsperEPL2GrammarParser.expression_return expression505 = null;
        CommonTree i_tree=null;
        CommonTree AS504_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem7308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS504=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem7310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS504);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem7312);
            expression505=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression505.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN506=null;
        Token LBRACK507=null;
        Token RBRACK509=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression508 = null;
        CommonTree PATTERN506_tree=null;
        CommonTree LBRACK507_tree=null;
        CommonTree RBRACK509_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN506=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression7337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN506);
            LBRACK507=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression7339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK507);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression7341);
            patternExpression508=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression508.getTree());
            RBRACK509=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression7343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK509);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL510=null;
        Token COLON511=null;
        Token LBRACK512=null;
        Token METADATASQL513=null;
        Token RBRACK514=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL510_tree=null;
        CommonTree COLON511_tree=null;
        CommonTree LBRACK512_tree=null;
        CommonTree METADATASQL513_tree=null;
        CommonTree RBRACK514_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL510=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression7376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL510);
            COLON511=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression7378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON511);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression7382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK512=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression7384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK512);
            int alt192=2;
            int LA192_0 = input.LA(1);
            if ( (LA192_0==STRING_LITERAL) ) {
                alt192=1;
            }
            else if ( (LA192_0==QUOTED_STRING_LITERAL) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);
                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt194=2;
            int LA194_0 = input.LA(1);
            if ( (LA194_0==METADATASQL) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    {
                    METADATASQL513=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression7399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL513);
                    int alt193=2;
                    int LA193_0 = input.LA(1);
                    if ( (LA193_0==STRING_LITERAL) ) {
                        alt193=1;
                    }
                    else if ( (LA193_0==QUOTED_STRING_LITERAL) ) {
                        alt193=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 193, 0, input);
                        throw nvae;
                    }
                    switch (alt193) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7404); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7410); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK514=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression7415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK514);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON515=null;
        Token LPAREN517=null;
        Token RPAREN519=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier516 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList518 = null;
        CommonTree i_tree=null;
        CommonTree COLON515_tree=null;
        CommonTree LPAREN517_tree=null;
        CommonTree RPAREN519_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression7466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON515=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression7468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON515);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression7470);
            classIdentifier516=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier516.getTree());
            int alt196=2;
            int LA196_0 = input.LA(1);
            if ( (LA196_0==LPAREN) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    {
                    LPAREN517=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression7473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN517);
                    int alt195=2;
                    int LA195_0 = input.LA(1);
                    if ( (LA195_0==WINDOW||LA195_0==BETWEEN||LA195_0==ESCAPE||(LA195_0>=NOT_EXPR && LA195_0<=EVERY_EXPR)||LA195_0==WHERE||(LA195_0>=SUM && LA195_0<=COUNT)||LA195_0==CASE||LA195_0==OUTER||(LA195_0>=JOIN && LA195_0<=FULL)||(LA195_0>=EVENTS && LA195_0<=LAST)||LA195_0==ISTREAM||(LA195_0>=UNIDIRECTIONAL && LA195_0<=CURRENT_TIMESTAMP)||(LA195_0>=SNAPSHOT && LA195_0<=INDEX)||(LA195_0>=BOOLEAN_TRUE && LA195_0<=VALUE_NULL)||(LA195_0>=DEFINE && LA195_0<=MATCHED)||LA195_0==NEWKW||LA195_0==CONTEXT||LA195_0==NUM_DOUBLE||(LA195_0>=IDENT && LA195_0<=LPAREN)||LA195_0==LCURLY||LA195_0==QUESTION||(LA195_0>=PLUS && LA195_0<=QUOTED_STRING_LITERAL)||LA195_0==MINUS||LA195_0==NUM_INT||(LA195_0>=TICKED_STRING_LITERAL && LA195_0<=NUM_FLOAT)) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression7475);
                            expressionList518=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList518.getTree());
                            }
                            break;
                    }
                    RPAREN519=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression7478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN519);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON520=null;
        Token LPAREN521=null;
        Token RPAREN523=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList522 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON520_tree=null;
        CommonTree LPAREN521_tree=null;
        CommonTree RPAREN523_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON520=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression7533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON520);
            int alt197=2;
            int LA197_0 = input.LA(1);
            if ( (LA197_0==IDENT) ) {
                alt197=1;
            }
            else if ( (LA197_0==MERGE) ) {
                alt197=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);
                throw nvae;
            }
            switch (alt197) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression7542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN521=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression7545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN521);
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==WINDOW||LA198_0==BETWEEN||LA198_0==ESCAPE||(LA198_0>=NOT_EXPR && LA198_0<=EVERY_EXPR)||LA198_0==WHERE||(LA198_0>=SUM && LA198_0<=COUNT)||LA198_0==CASE||LA198_0==OUTER||(LA198_0>=JOIN && LA198_0<=FULL)||(LA198_0>=EVENTS && LA198_0<=LAST)||LA198_0==ISTREAM||(LA198_0>=UNIDIRECTIONAL && LA198_0<=CURRENT_TIMESTAMP)||(LA198_0>=SNAPSHOT && LA198_0<=INDEX)||(LA198_0>=BOOLEAN_TRUE && LA198_0<=VALUE_NULL)||(LA198_0>=DEFINE && LA198_0<=MATCHED)||LA198_0==NEWKW||LA198_0==CONTEXT||LA198_0==NUM_DOUBLE||LA198_0==LBRACK||(LA198_0>=IDENT && LA198_0<=LPAREN)||LA198_0==LCURLY||LA198_0==STAR||LA198_0==QUESTION||(LA198_0>=PLUS && LA198_0<=QUOTED_STRING_LITERAL)||LA198_0==MINUS||LA198_0==NUM_INT||(LA198_0>=TICKED_STRING_LITERAL && LA198_0<=NUM_FLOAT)) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression7547);
                    expressionWithTimeList522=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList522.getTree());
                    }
                    break;
            }
            RPAREN523=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression7550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN523);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA525=null;
        EsperEPL2GrammarParser.expression_return expression524 = null;
        EsperEPL2GrammarParser.expression_return expression526 = null;
        CommonTree COMMA525_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr7610);
            expression524=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression524.getTree());
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);
                if ( (LA199_0==COMMA) ) {
                    alt199=1;
                }
                switch (alt199) {
            	case 1 :
            	    {
            	    COMMA525=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr7613); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA525);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr7615);
            	    expression526=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression526.getTree());
            	    }
            	    break;
            	default :
            	    break loop199;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA528=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement527 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement529 = null;
        CommonTree COMMA528_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7650);
            orderByListElement527=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement527.getTree());
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);
                if ( (LA200_0==COMMA) ) {
                    alt200=1;
                }
                switch (alt200) {
            	case 1 :
            	    {
            	    COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr7653); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA528);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7655);
            	    orderByListElement529=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement529.getTree());
            	    }
            	    break;
            	default :
            	    break loop200;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression530 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement7680);
            expression530=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression530.getTree());
            int alt201=3;
            int LA201_0 = input.LA(1);
            if ( (LA201_0==ASC) ) {
                alt201=1;
            }
            else if ( (LA201_0==DESC) ) {
                alt201=2;
            }
            switch (alt201) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement7685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement7689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression531 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause7727);
            evalOrExpression531=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression531.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token THEN537=null;
        Token TERMINATED539=null;
        Token AND_EXPR540=null;
        Token THEN542=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter532 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod533 = null;
        EsperEPL2GrammarParser.number_return number534 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet535 = null;
        EsperEPL2GrammarParser.expression_return expression536 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr538 = null;
        EsperEPL2GrammarParser.expression_return expression541 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr543 = null;
        EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm544 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree THEN537_tree=null;
        CommonTree TERMINATED539_tree=null;
        CommonTree AND_EXPR540_tree=null;
        CommonTree THEN542_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_outputLimitAndTerm=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAndTerm");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt202=2;
            int LA202_0 = input.LA(1);
            if ( (LA202_0==AFTER) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit7765);
                    outputLimitAfter532=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter532.getTree());
                    }
                    break;
            }
            int alt203=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt203=1;
                    }
                    break;
                case FIRST:
                    {
                    alt203=2;
                    }
                    break;
                case LAST:
                    {
                    alt203=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt203=4;
                    }
                    break;
            }
            switch (alt203) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit7780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit7784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit7788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit7792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt209=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt209=1;
                }
                break;
            case AT:
                {
                alt209=2;
                }
                break;
            case WHEN:
                {
                int LA209_3 = input.LA(2);
                if ( (LA209_3==TERMINATED) ) {
                    alt209=4;
                }
                else if ( (LA209_3==WINDOW||LA209_3==BETWEEN||LA209_3==ESCAPE||(LA209_3>=NOT_EXPR && LA209_3<=EVERY_EXPR)||LA209_3==WHERE||(LA209_3>=SUM && LA209_3<=COUNT)||LA209_3==CASE||LA209_3==OUTER||(LA209_3>=JOIN && LA209_3<=FULL)||(LA209_3>=EVENTS && LA209_3<=LAST)||LA209_3==ISTREAM||(LA209_3>=UNIDIRECTIONAL && LA209_3<=CURRENT_TIMESTAMP)||(LA209_3>=SNAPSHOT && LA209_3<=INDEX)||(LA209_3>=BOOLEAN_TRUE && LA209_3<=VALUE_NULL)||(LA209_3>=DEFINE && LA209_3<=MATCHED)||LA209_3==NEWKW||LA209_3==CONTEXT||LA209_3==NUM_DOUBLE||(LA209_3>=IDENT && LA209_3<=LPAREN)||LA209_3==LCURLY||LA209_3==QUESTION||(LA209_3>=PLUS && LA209_3<=QUOTED_STRING_LITERAL)||LA209_3==MINUS||LA209_3==NUM_INT||(LA209_3>=TICKED_STRING_LITERAL && LA209_3<=NUM_FLOAT)) ) {
                    alt209=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
            case RPAREN:
                {
                alt209=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);
                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit7823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt205=2;
                    int LA205_0 = input.LA(1);
                    if ( (LA205_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_0==NUM_INT) ) {
                        int LA205_3 = input.LA(2);
                        if ( (LA205_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==EVENTS) ) {
                            alt205=2;
                        }
                        else if ( (LA205_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_0==NUM_LONG) ) {
                        int LA205_4 = input.LA(2);
                        if ( (LA205_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==EVENTS) ) {
                            alt205=2;
                        }
                        else if ( (LA205_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_0==NUM_FLOAT) ) {
                        int LA205_5 = input.LA(2);
                        if ( (LA205_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==EVENTS) ) {
                            alt205=2;
                        }
                        else if ( (LA205_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_0==NUM_DOUBLE) ) {
                        int LA205_6 = input.LA(2);
                        if ( (LA205_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_6==EVENTS) ) {
                            alt205=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_0==IDENT) ) {
                        int LA205_7 = input.LA(2);
                        if ( (LA205_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==EVENTS) ) {
                            alt205=2;
                        }
                        else if ( (LA205_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 0, input);
                        throw nvae;
                    }
                    switch (alt205) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit7849);
                            timePeriod533=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod533.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt204=2;
                            int LA204_0 = input.LA(1);
                            if ( (LA204_0==NUM_DOUBLE||LA204_0==NUM_INT||(LA204_0>=NUM_LONG && LA204_0<=NUM_FLOAT)) ) {
                                alt204=1;
                            }
                            else if ( (LA204_0==IDENT) ) {
                                alt204=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 204, 0, input);
                                throw nvae;
                            }
                            switch (alt204) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit7860);
                                    number534=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number534.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit7866); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit7872); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit7903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit7905);
                    crontabLimitParameterSet535=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet535.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit7924);
                    expression536=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression536.getTree());
                    int alt206=2;
                    int LA206_0 = input.LA(1);
                    if ( (LA206_0==THEN) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            {
                            THEN537=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7927); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN537);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7929);
                            onSetExpr538=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr538.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED539=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit7951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED539);
                    int alt207=2;
                    int LA207_0 = input.LA(1);
                    if ( (LA207_0==AND_EXPR) ) {
                        int LA207_1 = input.LA(2);
                        if ( (LA207_1==WINDOW||LA207_1==BETWEEN||LA207_1==ESCAPE||(LA207_1>=NOT_EXPR && LA207_1<=EVERY_EXPR)||LA207_1==WHERE||(LA207_1>=SUM && LA207_1<=COUNT)||LA207_1==CASE||LA207_1==OUTER||(LA207_1>=JOIN && LA207_1<=FULL)||(LA207_1>=EVENTS && LA207_1<=LAST)||LA207_1==ISTREAM||(LA207_1>=UNIDIRECTIONAL && LA207_1<=CURRENT_TIMESTAMP)||(LA207_1>=SNAPSHOT && LA207_1<=INDEX)||(LA207_1>=BOOLEAN_TRUE && LA207_1<=VALUE_NULL)||(LA207_1>=DEFINE && LA207_1<=MATCHED)||LA207_1==NEWKW||LA207_1==CONTEXT||LA207_1==NUM_DOUBLE||(LA207_1>=IDENT && LA207_1<=LPAREN)||LA207_1==LCURLY||LA207_1==QUESTION||(LA207_1>=PLUS && LA207_1<=QUOTED_STRING_LITERAL)||LA207_1==MINUS||LA207_1==NUM_INT||(LA207_1>=TICKED_STRING_LITERAL && LA207_1<=NUM_FLOAT)) ) {
                            alt207=1;
                        }
                    }
                    switch (alt207) {
                        case 1 :
                            {
                            AND_EXPR540=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit7954); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR540);
                            pushFollow(FOLLOW_expression_in_outputLimit7956);
                            expression541=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression541.getTree());
                            }
                            break;
                    }
                    int alt208=2;
                    int LA208_0 = input.LA(1);
                    if ( (LA208_0==THEN) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            {
                            THEN542=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7961); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN542);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7963);
                            onSetExpr543=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr543.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt210=2;
            int LA210_0 = input.LA(1);
            if ( (LA210_0==AND_EXPR) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAndTerm_in_outputLimit7996);
                    outputLimitAndTerm544=outputLimitAndTerm();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAndTerm.add(outputLimitAndTerm544.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAndTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAndTerm_return retval = new EsperEPL2GrammarParser.outputLimitAndTerm_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR545=null;
        Token WHEN546=null;
        Token TERMINATED547=null;
        Token AND_EXPR548=null;
        Token THEN550=null;
        EsperEPL2GrammarParser.expression_return expression549 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr551 = null;
        CommonTree AND_EXPR545_tree=null;
        CommonTree WHEN546_tree=null;
        CommonTree TERMINATED547_tree=null;
        CommonTree AND_EXPR548_tree=null;
        CommonTree THEN550_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        try {
            {
            AND_EXPR545=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm8170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR545);
            WHEN546=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimitAndTerm8172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN546);
            TERMINATED547=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimitAndTerm8174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED547);
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==AND_EXPR) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    {
                    AND_EXPR548=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm8177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR548);
                    pushFollow(FOLLOW_expression_in_outputLimitAndTerm8179);
                    expression549=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression549.getTree());
                    }
                    break;
            }
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==THEN) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    THEN550=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimitAndTerm8184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THEN.add(THEN550);
                    pushFollow(FOLLOW_onSetExpr_in_outputLimitAndTerm8186);
                    onSetExpr551=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr551.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS554=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod552 = null;
        EsperEPL2GrammarParser.number_return number553 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS554_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter8216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt213=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case QUESTION:
            case PLUS:
            case MINUS:
                {
                alt213=1;
                }
                break;
            case NUM_INT:
                {
                int LA213_3 = input.LA(2);
                if ( (LA213_3==MIN||(LA213_3>=TIMEPERIOD_YEAR && LA213_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt213=1;
                }
                else if ( (LA213_3==EVENTS) ) {
                    alt213=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA213_4 = input.LA(2);
                if ( (LA213_4==MIN||(LA213_4>=TIMEPERIOD_YEAR && LA213_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt213=1;
                }
                else if ( (LA213_4==EVENTS) ) {
                    alt213=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA213_5 = input.LA(2);
                if ( (LA213_5==MIN||(LA213_5>=TIMEPERIOD_YEAR && LA213_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt213=1;
                }
                else if ( (LA213_5==EVENTS) ) {
                    alt213=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA213_6 = input.LA(2);
                if ( (LA213_6==EVENTS) ) {
                    alt213=2;
                }
                else if ( (LA213_6==MIN||(LA213_6>=TIMEPERIOD_YEAR && LA213_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt213=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);
                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter8219);
                    timePeriod552=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod552.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter8223);
                    number553=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number553.getTree());
                    EVENTS554=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter8225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS554);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==NUM_DOUBLE||LA214_0==PLUS||LA214_0==MINUS||LA214_0==NUM_INT||(LA214_0>=NUM_LONG && LA214_0<=NUM_FLOAT)) ) {
                alt214=1;
            }
            else if ( (LA214_0==IDENT) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);
                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit8271);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt217=2;
            int LA217_0 = input.LA(1);
            if ( (LA217_0==OFFSET||LA217_0==COMMA) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    {
                    int alt215=2;
                    int LA215_0 = input.LA(1);
                    if ( (LA215_0==COMMA) ) {
                        alt215=1;
                    }
                    else if ( (LA215_0==OFFSET) ) {
                        alt215=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 215, 0, input);
                        throw nvae;
                    }
                    switch (alt215) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit8284); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit8290); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt216=2;
                    int LA216_0 = input.LA(1);
                    if ( (LA216_0==NUM_DOUBLE||LA216_0==PLUS||LA216_0==MINUS||LA216_0==NUM_INT||(LA216_0>=NUM_LONG && LA216_0<=NUM_FLOAT)) ) {
                        alt216=1;
                    }
                    else if ( (LA216_0==IDENT) ) {
                        alt216=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 216, 0, input);
                        throw nvae;
                    }
                    switch (alt216) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit8296);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8302); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN555=null;
        Token COMMA557=null;
        Token COMMA559=null;
        Token COMMA561=null;
        Token COMMA563=null;
        Token COMMA565=null;
        Token RPAREN567=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime556 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime558 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime560 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime562 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime564 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime566 = null;
        CommonTree LPAREN555_tree=null;
        CommonTree COMMA557_tree=null;
        CommonTree COMMA559_tree=null;
        CommonTree COMMA561_tree=null;
        CommonTree COMMA563_tree=null;
        CommonTree COMMA565_tree=null;
        CommonTree RPAREN567_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN555=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet8354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN555);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8356);
            expressionWithTime556=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime556.getTree());
            COMMA557=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA557);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8360);
            expressionWithTime558=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime558.getTree());
            COMMA559=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA559);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8364);
            expressionWithTime560=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime560.getTree());
            COMMA561=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA561);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8368);
            expressionWithTime562=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime562.getTree());
            COMMA563=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA563);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8372);
            expressionWithTime564=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime564.getTree());
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==COMMA) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    COMMA565=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA565);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8377);
                    expressionWithTime566=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime566.getTree());
                    }
                    break;
            }
            RPAREN567=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet8381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN567);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN568=null;
        Token THEN570=null;
        EsperEPL2GrammarParser.expression_return expression569 = null;
        EsperEPL2GrammarParser.expression_return expression571 = null;
        CommonTree WHEN568_tree=null;
        CommonTree THEN570_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN568=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause8411); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8414);
            expression569=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression569.getTree());
            THEN570=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause8416); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8419);
            expression571=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression571.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE572=null;
        EsperEPL2GrammarParser.expression_return expression573 = null;
        CommonTree ELSE572_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE572=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause8432); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause8435);
            expression573=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression573.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression574 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression8448);
            caseExpression574=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression574.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE575=null;
        Token END578=null;
        Token CASE579=null;
        Token END583=null;
        EsperEPL2GrammarParser.whenClause_return whenClause576 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause577 = null;
        EsperEPL2GrammarParser.expression_return expression580 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause581 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause582 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression584 = null;
        CommonTree CASE575_tree=null;
        CommonTree END578_tree=null;
        CommonTree CASE579_tree=null;
        CommonTree END583_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt223=3;
            int LA223_0 = input.LA(1);
            if ( (LA223_0==CASE) ) {
                int LA223_1 = input.LA(2);
                if ( (LA223_1==WINDOW||LA223_1==BETWEEN||LA223_1==ESCAPE||(LA223_1>=NOT_EXPR && LA223_1<=EVERY_EXPR)||LA223_1==WHERE||(LA223_1>=SUM && LA223_1<=COUNT)||LA223_1==CASE||LA223_1==OUTER||(LA223_1>=JOIN && LA223_1<=FULL)||(LA223_1>=EVENTS && LA223_1<=LAST)||LA223_1==ISTREAM||(LA223_1>=UNIDIRECTIONAL && LA223_1<=CURRENT_TIMESTAMP)||(LA223_1>=SNAPSHOT && LA223_1<=INDEX)||(LA223_1>=BOOLEAN_TRUE && LA223_1<=VALUE_NULL)||(LA223_1>=DEFINE && LA223_1<=MATCHED)||LA223_1==NEWKW||LA223_1==CONTEXT||LA223_1==NUM_DOUBLE||(LA223_1>=IDENT && LA223_1<=LPAREN)||LA223_1==LCURLY||LA223_1==QUESTION||(LA223_1>=PLUS && LA223_1<=QUOTED_STRING_LITERAL)||LA223_1==MINUS||LA223_1==NUM_INT||(LA223_1>=TICKED_STRING_LITERAL && LA223_1<=NUM_FLOAT)) ) {
                    alt223=2;
                }
                else if ( (LA223_1==WHEN) ) {
                    alt223=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 223, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA223_0==WINDOW||LA223_0==BETWEEN||LA223_0==ESCAPE||(LA223_0>=NOT_EXPR && LA223_0<=EVERY_EXPR)||LA223_0==WHERE||(LA223_0>=SUM && LA223_0<=COUNT)||LA223_0==OUTER||(LA223_0>=JOIN && LA223_0<=FULL)||(LA223_0>=EVENTS && LA223_0<=LAST)||LA223_0==ISTREAM||(LA223_0>=UNIDIRECTIONAL && LA223_0<=CURRENT_TIMESTAMP)||(LA223_0>=SNAPSHOT && LA223_0<=INDEX)||(LA223_0>=BOOLEAN_TRUE && LA223_0<=VALUE_NULL)||(LA223_0>=DEFINE && LA223_0<=MATCHED)||LA223_0==NEWKW||LA223_0==CONTEXT||LA223_0==NUM_DOUBLE||(LA223_0>=IDENT && LA223_0<=LPAREN)||LA223_0==LCURLY||LA223_0==QUESTION||(LA223_0>=PLUS && LA223_0<=QUOTED_STRING_LITERAL)||LA223_0==MINUS||LA223_0==NUM_INT||(LA223_0>=TICKED_STRING_LITERAL && LA223_0<=NUM_FLOAT)) ) {
                alt223=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);
                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE575=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE575_tree = (CommonTree)adaptor.create(CASE575);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE575_tree, root_0);
                    }
                    int cnt219=0;
                    loop219:
                    do {
                        int alt219=2;
                        int LA219_0 = input.LA(1);
                        if ( (LA219_0==WHEN) ) {
                            alt219=1;
                        }
                        switch (alt219) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8465);
                    	    whenClause576=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause576.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt219 >= 1 ) break loop219;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(219, input);
                                throw eee;
                        }
                        cnt219++;
                    } while (true);
                    int alt220=2;
                    int LA220_0 = input.LA(1);
                    if ( (LA220_0==ELSE) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8468);
                            elseClause577=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause577.getTree());
                            }
                            break;
                    }
                    END578=(Token)match(input,END,FOLLOW_END_in_caseExpression8471); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE579=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE579);
                    pushFollow(FOLLOW_expression_in_caseExpression8484);
                    expression580=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression580.getTree());
                    int cnt221=0;
                    loop221:
                    do {
                        int alt221=2;
                        int LA221_0 = input.LA(1);
                        if ( (LA221_0==WHEN) ) {
                            alt221=1;
                        }
                        switch (alt221) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8486);
                    	    whenClause581=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause581.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt221 >= 1 ) break loop221;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(221, input);
                                throw eee;
                        }
                        cnt221++;
                    } while (true);
                    int alt222=2;
                    int LA222_0 = input.LA(1);
                    if ( (LA222_0==ELSE) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8489);
                            elseClause582=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause582.getTree());
                            }
                            break;
                    }
                    END583=(Token)match(input,END,FOLLOW_END_in_caseExpression8492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END583);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression8516);
                    evalOrExpression584=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression584.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression585 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression586 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8527);
            evalAndExpression585=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression585.getTree());
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);
                if ( (LA224_0==OR_EXPR) ) {
                    alt224=1;
                }
                switch (alt224) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression8532); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8534);
            	    evalAndExpression586=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression586.getTree());
            	    }
            	    break;
            	default :
            	    break loop224;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression587 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression588 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8566);
            bitWiseExpression587=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression587.getTree());
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);
                if ( (LA225_0==AND_EXPR) ) {
                    int LA225_16 = input.LA(2);
                    if ( (LA225_16==WINDOW||LA225_16==BETWEEN||LA225_16==ESCAPE||(LA225_16>=NOT_EXPR && LA225_16<=EVERY_EXPR)||LA225_16==WHERE||(LA225_16>=SUM && LA225_16<=COUNT)||LA225_16==OUTER||(LA225_16>=JOIN && LA225_16<=FULL)||(LA225_16>=EVENTS && LA225_16<=LAST)||LA225_16==ISTREAM||(LA225_16>=UNIDIRECTIONAL && LA225_16<=CURRENT_TIMESTAMP)||(LA225_16>=SNAPSHOT && LA225_16<=INDEX)||(LA225_16>=BOOLEAN_TRUE && LA225_16<=VALUE_NULL)||(LA225_16>=DEFINE && LA225_16<=MATCHED)||LA225_16==NEWKW||LA225_16==CONTEXT||LA225_16==NUM_DOUBLE||(LA225_16>=IDENT && LA225_16<=LPAREN)||LA225_16==LCURLY||LA225_16==QUESTION||(LA225_16>=PLUS && LA225_16<=QUOTED_STRING_LITERAL)||LA225_16==MINUS||LA225_16==NUM_INT||(LA225_16>=TICKED_STRING_LITERAL && LA225_16<=NUM_FLOAT)) ) {
                        alt225=1;
                    }
                }
                switch (alt225) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression8571); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8573);
            	    bitWiseExpression588=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression588.getTree());
            	    }
            	    break;
            	default :
            	    break loop225;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND590=null;
        Token BOR591=null;
        Token BXOR592=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression589 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression593 = null;
        CommonTree BAND590_tree=null;
        CommonTree BOR591_tree=null;
        CommonTree BXOR592_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8605);
            negatedExpression589=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression589.getTree());
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);
                if ( (LA227_0==BOR||(LA227_0>=BAND && LA227_0<=BXOR)) ) {
                    alt227=1;
                }
                switch (alt227) {
            	case 1 :
            	    {
            	    int alt226=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt226=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt226=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt226=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 226, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt226) {
            	        case 1 :
            	            {
            	            BAND590=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression8610); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND590_tree = (CommonTree)adaptor.create(BAND590);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND590_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR591=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression8613); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR591_tree = (CommonTree)adaptor.create(BOR591);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR591_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR592=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression8616); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR592_tree = (CommonTree)adaptor.create(BXOR592);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR592_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8620);
            	    negatedExpression593=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression593.getTree());
            	    }
            	    break;
            	default :
            	    break loop227;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR595=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression594 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression596 = null;
        CommonTree NOT_EXPR595_tree=null;
        try {
            int alt228=2;
            int LA228_0 = input.LA(1);
            if ( (LA228_0==WINDOW||LA228_0==BETWEEN||LA228_0==ESCAPE||LA228_0==EVERY_EXPR||LA228_0==WHERE||(LA228_0>=SUM && LA228_0<=COUNT)||LA228_0==OUTER||(LA228_0>=JOIN && LA228_0<=FULL)||(LA228_0>=EVENTS && LA228_0<=LAST)||LA228_0==ISTREAM||(LA228_0>=UNIDIRECTIONAL && LA228_0<=CURRENT_TIMESTAMP)||(LA228_0>=SNAPSHOT && LA228_0<=INDEX)||(LA228_0>=BOOLEAN_TRUE && LA228_0<=VALUE_NULL)||(LA228_0>=DEFINE && LA228_0<=MATCHED)||LA228_0==NEWKW||LA228_0==CONTEXT||LA228_0==NUM_DOUBLE||(LA228_0>=IDENT && LA228_0<=LPAREN)||LA228_0==LCURLY||LA228_0==QUESTION||(LA228_0>=PLUS && LA228_0<=QUOTED_STRING_LITERAL)||LA228_0==MINUS||LA228_0==NUM_INT||(LA228_0>=TICKED_STRING_LITERAL && LA228_0<=NUM_FLOAT)) ) {
                alt228=1;
            }
            else if ( (LA228_0==NOT_EXPR) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);
                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8635);
                    evalEqualsExpression594=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression594.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR595=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression8641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR595_tree = (CommonTree)adaptor.create(NOT_EXPR595);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR595_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8644);
                    evalEqualsExpression596=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression596.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR598=null;
        Token LPAREN600=null;
        Token RPAREN602=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression597 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression599 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList601 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression603 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR598_tree=null;
        CommonTree LPAREN600_tree=null;
        CommonTree RPAREN602_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8657);
            evalRelationalExpression597=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression597.getTree());
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);
                if ( (LA234_0==IS||LA234_0==EQUALS||(LA234_0>=SQL_NE && LA234_0<=NOT_EQUAL)) ) {
                    alt234=1;
                }
                switch (alt234) {
            	case 1 :
            	    {
            	    int alt229=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt229=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA229_2 = input.LA(2);
            	        if ( (LA229_2==NOT_EXPR) ) {
            	            alt229=3;
            	        }
            	        else if ( (LA229_2==WINDOW||LA229_2==BETWEEN||LA229_2==ESCAPE||LA229_2==EVERY_EXPR||LA229_2==WHERE||(LA229_2>=SUM && LA229_2<=COUNT)||LA229_2==OUTER||(LA229_2>=JOIN && LA229_2<=FULL)||(LA229_2>=ALL && LA229_2<=SOME)||(LA229_2>=EVENTS && LA229_2<=LAST)||LA229_2==ISTREAM||(LA229_2>=UNIDIRECTIONAL && LA229_2<=CURRENT_TIMESTAMP)||(LA229_2>=SNAPSHOT && LA229_2<=INDEX)||(LA229_2>=BOOLEAN_TRUE && LA229_2<=VALUE_NULL)||(LA229_2>=DEFINE && LA229_2<=MATCHED)||LA229_2==NEWKW||LA229_2==CONTEXT||LA229_2==NUM_DOUBLE||(LA229_2>=IDENT && LA229_2<=LPAREN)||LA229_2==LCURLY||LA229_2==QUESTION||(LA229_2>=PLUS && LA229_2<=QUOTED_STRING_LITERAL)||LA229_2==MINUS||LA229_2==NUM_INT||(LA229_2>=TICKED_STRING_LITERAL && LA229_2<=NUM_FLOAT)) ) {
            	            alt229=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 229, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt229=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt229=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 229, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt229) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression8670); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8688); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8702); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR598=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression8704); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR598);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression8718); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression8732); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt233=2;
            	    int LA233_0 = input.LA(1);
            	    if ( (LA233_0==WINDOW||LA233_0==BETWEEN||LA233_0==ESCAPE||LA233_0==EVERY_EXPR||LA233_0==WHERE||(LA233_0>=SUM && LA233_0<=COUNT)||LA233_0==OUTER||(LA233_0>=JOIN && LA233_0<=FULL)||(LA233_0>=EVENTS && LA233_0<=LAST)||LA233_0==ISTREAM||(LA233_0>=UNIDIRECTIONAL && LA233_0<=CURRENT_TIMESTAMP)||(LA233_0>=SNAPSHOT && LA233_0<=INDEX)||(LA233_0>=BOOLEAN_TRUE && LA233_0<=VALUE_NULL)||(LA233_0>=DEFINE && LA233_0<=MATCHED)||LA233_0==NEWKW||LA233_0==CONTEXT||LA233_0==NUM_DOUBLE||(LA233_0>=IDENT && LA233_0<=LPAREN)||LA233_0==LCURLY||LA233_0==QUESTION||(LA233_0>=PLUS && LA233_0<=QUOTED_STRING_LITERAL)||LA233_0==MINUS||LA233_0==NUM_INT||(LA233_0>=TICKED_STRING_LITERAL && LA233_0<=NUM_FLOAT)) ) {
            	        alt233=1;
            	    }
            	    else if ( ((LA233_0>=ALL && LA233_0<=SOME)) ) {
            	        alt233=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 233, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt233) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8762);
            	            evalRelationalExpression599=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression599.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt230=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt230=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt230=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt230=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 230, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt230) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression8779); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression8785); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression8791); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt232=2;
            	            int LA232_0 = input.LA(1);
            	            if ( (LA232_0==LPAREN) ) {
            	                int LA232_1 = input.LA(2);
            	                if ( (LA232_1==SELECT) ) {
            	                    alt232=2;
            	                }
            	                else if ( (LA232_1==WINDOW||LA232_1==BETWEEN||LA232_1==ESCAPE||(LA232_1>=NOT_EXPR && LA232_1<=EVERY_EXPR)||LA232_1==WHERE||(LA232_1>=SUM && LA232_1<=COUNT)||LA232_1==CASE||LA232_1==OUTER||(LA232_1>=JOIN && LA232_1<=FULL)||(LA232_1>=EVENTS && LA232_1<=LAST)||LA232_1==ISTREAM||(LA232_1>=UNIDIRECTIONAL && LA232_1<=CURRENT_TIMESTAMP)||(LA232_1>=SNAPSHOT && LA232_1<=INDEX)||(LA232_1>=BOOLEAN_TRUE && LA232_1<=VALUE_NULL)||(LA232_1>=DEFINE && LA232_1<=MATCHED)||LA232_1==NEWKW||LA232_1==CONTEXT||LA232_1==NUM_DOUBLE||(LA232_1>=IDENT && LA232_1<=RPAREN)||LA232_1==LCURLY||LA232_1==QUESTION||(LA232_1>=PLUS && LA232_1<=QUOTED_STRING_LITERAL)||LA232_1==MINUS||LA232_1==NUM_INT||(LA232_1>=TICKED_STRING_LITERAL && LA232_1<=NUM_FLOAT)) ) {
            	                    alt232=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 232, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 232, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt232) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN600=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression8797); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN600);
            	                    int alt231=2;
            	                    int LA231_0 = input.LA(1);
            	                    if ( (LA231_0==WINDOW||LA231_0==BETWEEN||LA231_0==ESCAPE||(LA231_0>=NOT_EXPR && LA231_0<=EVERY_EXPR)||LA231_0==WHERE||(LA231_0>=SUM && LA231_0<=COUNT)||LA231_0==CASE||LA231_0==OUTER||(LA231_0>=JOIN && LA231_0<=FULL)||(LA231_0>=EVENTS && LA231_0<=LAST)||LA231_0==ISTREAM||(LA231_0>=UNIDIRECTIONAL && LA231_0<=CURRENT_TIMESTAMP)||(LA231_0>=SNAPSHOT && LA231_0<=INDEX)||(LA231_0>=BOOLEAN_TRUE && LA231_0<=VALUE_NULL)||(LA231_0>=DEFINE && LA231_0<=MATCHED)||LA231_0==NEWKW||LA231_0==CONTEXT||LA231_0==NUM_DOUBLE||(LA231_0>=IDENT && LA231_0<=LPAREN)||LA231_0==LCURLY||LA231_0==QUESTION||(LA231_0>=PLUS && LA231_0<=QUOTED_STRING_LITERAL)||LA231_0==MINUS||LA231_0==NUM_INT||(LA231_0>=TICKED_STRING_LITERAL && LA231_0<=NUM_FLOAT)) ) {
            	                        alt231=1;
            	                    }
            	                    switch (alt231) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression8799);
            	                            expressionList601=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList601.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN602=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression8802); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN602);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression8807);
            	                    subSelectGroupExpression603=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression603.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop234;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN606=null;
        Token RPAREN608=null;
        Token COMMA612=null;
        Token IN_SET614=null;
        Token BETWEEN616=null;
        Token LIKE618=null;
        Token ESCAPE620=null;
        Token REGEXP622=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr604 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr605 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList607 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression609 = null;
        EsperEPL2GrammarParser.expression_return expression610 = null;
        EsperEPL2GrammarParser.expression_return expression611 = null;
        EsperEPL2GrammarParser.expression_return expression613 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery615 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList617 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr619 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant621 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr623 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN606_tree=null;
        CommonTree RPAREN608_tree=null;
        CommonTree COMMA612_tree=null;
        CommonTree IN_SET614_tree=null;
        CommonTree BETWEEN616_tree=null;
        CommonTree LIKE618_tree=null;
        CommonTree ESCAPE620_tree=null;
        CommonTree REGEXP622_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8967);
            concatenationExpr604=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr604.getTree());
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( (LA248_0==EOF||(LA248_0>=OR_EXPR && LA248_0<=AND_EXPR)||(LA248_0>=WHERE && LA248_0<=AS)||(LA248_0>=ELSE && LA248_0<=FROM)||LA248_0==IS||(LA248_0>=GROUP && LA248_0<=HAVING)||LA248_0==ALL||LA248_0==OUTPUT||LA248_0==INSERT||(LA248_0>=ORDER && LA248_0<=DESC)||LA248_0==PATTERN||(LA248_0>=TIMEPERIOD_SEC && LA248_0<=TIMEPERIOD_SECONDS)||LA248_0==ROW_LIMIT_EXPR||LA248_0==MEASURES||(LA248_0>=AFTER && LA248_0<=FOR)||LA248_0==RBRACK||(LA248_0>=RPAREN && LA248_0<=COLON)||LA248_0==RCURLY||(LA248_0>=ATCHAR && LA248_0<=EQUALS)||(LA248_0>=LT && LA248_0<=GT)||LA248_0==BOR||(LA248_0>=BAND && LA248_0<=GE)||LA248_0==FOLLOWMAX_END) ) {
                alt248=1;
            }
            else if ( ((LA248_0>=IN_SET && LA248_0<=REGEXP)||LA248_0==NOT_EXPR) ) {
                alt248=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);
                throw nvae;
            }
            switch (alt248) {
                case 1 :
                    {
                    {
                    loop240:
                    do {
                        int alt240=2;
                        int LA240_0 = input.LA(1);
                        if ( ((LA240_0>=LT && LA240_0<=GT)||(LA240_0>=LE && LA240_0<=GE)) ) {
                            alt240=1;
                        }
                        switch (alt240) {
                    	case 1 :
                    	    {
                    	    int alt235=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt235=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt235=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt235=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt235=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 235, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt235) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression8999); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression9003); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression9007); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression9011); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt239=2;
                    	    int LA239_0 = input.LA(1);
                    	    if ( (LA239_0==WINDOW||LA239_0==BETWEEN||LA239_0==ESCAPE||LA239_0==EVERY_EXPR||LA239_0==WHERE||(LA239_0>=SUM && LA239_0<=COUNT)||LA239_0==OUTER||(LA239_0>=JOIN && LA239_0<=FULL)||(LA239_0>=EVENTS && LA239_0<=LAST)||LA239_0==ISTREAM||(LA239_0>=UNIDIRECTIONAL && LA239_0<=CURRENT_TIMESTAMP)||(LA239_0>=SNAPSHOT && LA239_0<=INDEX)||(LA239_0>=BOOLEAN_TRUE && LA239_0<=VALUE_NULL)||(LA239_0>=DEFINE && LA239_0<=MATCHED)||LA239_0==NEWKW||LA239_0==CONTEXT||LA239_0==NUM_DOUBLE||(LA239_0>=IDENT && LA239_0<=LPAREN)||LA239_0==LCURLY||LA239_0==QUESTION||(LA239_0>=PLUS && LA239_0<=QUOTED_STRING_LITERAL)||LA239_0==MINUS||LA239_0==NUM_INT||(LA239_0>=TICKED_STRING_LITERAL && LA239_0<=NUM_FLOAT)) ) {
                    	        alt239=1;
                    	    }
                    	    else if ( ((LA239_0>=ALL && LA239_0<=SOME)) ) {
                    	        alt239=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 239, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt239) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9035);
                    	            concatenationExpr605=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr605.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt236=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt236=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt236=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt236=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 236, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt236) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression9052); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression9058); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression9064); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt238=2;
                    	            int LA238_0 = input.LA(1);
                    	            if ( (LA238_0==LPAREN) ) {
                    	                int LA238_1 = input.LA(2);
                    	                if ( (LA238_1==SELECT) ) {
                    	                    alt238=2;
                    	                }
                    	                else if ( (LA238_1==WINDOW||LA238_1==BETWEEN||LA238_1==ESCAPE||(LA238_1>=NOT_EXPR && LA238_1<=EVERY_EXPR)||LA238_1==WHERE||(LA238_1>=SUM && LA238_1<=COUNT)||LA238_1==CASE||LA238_1==OUTER||(LA238_1>=JOIN && LA238_1<=FULL)||(LA238_1>=EVENTS && LA238_1<=LAST)||LA238_1==ISTREAM||(LA238_1>=UNIDIRECTIONAL && LA238_1<=CURRENT_TIMESTAMP)||(LA238_1>=SNAPSHOT && LA238_1<=INDEX)||(LA238_1>=BOOLEAN_TRUE && LA238_1<=VALUE_NULL)||(LA238_1>=DEFINE && LA238_1<=MATCHED)||LA238_1==NEWKW||LA238_1==CONTEXT||LA238_1==NUM_DOUBLE||(LA238_1>=IDENT && LA238_1<=RPAREN)||LA238_1==LCURLY||LA238_1==QUESTION||(LA238_1>=PLUS && LA238_1<=QUOTED_STRING_LITERAL)||LA238_1==MINUS||LA238_1==NUM_INT||(LA238_1>=TICKED_STRING_LITERAL && LA238_1<=NUM_FLOAT)) ) {
                    	                    alt238=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 238, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 238, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt238) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression9070); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN606);
                    	                    int alt237=2;
                    	                    int LA237_0 = input.LA(1);
                    	                    if ( (LA237_0==WINDOW||LA237_0==BETWEEN||LA237_0==ESCAPE||(LA237_0>=NOT_EXPR && LA237_0<=EVERY_EXPR)||LA237_0==WHERE||(LA237_0>=SUM && LA237_0<=COUNT)||LA237_0==CASE||LA237_0==OUTER||(LA237_0>=JOIN && LA237_0<=FULL)||(LA237_0>=EVENTS && LA237_0<=LAST)||LA237_0==ISTREAM||(LA237_0>=UNIDIRECTIONAL && LA237_0<=CURRENT_TIMESTAMP)||(LA237_0>=SNAPSHOT && LA237_0<=INDEX)||(LA237_0>=BOOLEAN_TRUE && LA237_0<=VALUE_NULL)||(LA237_0>=DEFINE && LA237_0<=MATCHED)||LA237_0==NEWKW||LA237_0==CONTEXT||LA237_0==NUM_DOUBLE||(LA237_0>=IDENT && LA237_0<=LPAREN)||LA237_0==LCURLY||LA237_0==QUESTION||(LA237_0>=PLUS && LA237_0<=QUOTED_STRING_LITERAL)||LA237_0==MINUS||LA237_0==NUM_INT||(LA237_0>=TICKED_STRING_LITERAL && LA237_0<=NUM_FLOAT)) ) {
                    	                        alt237=1;
                    	                    }
                    	                    switch (alt237) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression9072);
                    	                            expressionList607=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList607.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN608=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression9075); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN608);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression9080);
                    	                    subSelectGroupExpression609=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression609.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop240;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt241=2;
                    int LA241_0 = input.LA(1);
                    if ( (LA241_0==NOT_EXPR) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression9176); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt247=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA247_1 = input.LA(2);
                        if ( (LA247_1==LPAREN) ) {
                            int LA247_5 = input.LA(3);
                            if ( (LA247_5==SELECT) ) {
                                alt247=2;
                            }
                            else if ( (LA247_5==WINDOW||LA247_5==BETWEEN||LA247_5==ESCAPE||(LA247_5>=NOT_EXPR && LA247_5<=EVERY_EXPR)||LA247_5==WHERE||(LA247_5>=SUM && LA247_5<=COUNT)||LA247_5==CASE||LA247_5==OUTER||(LA247_5>=JOIN && LA247_5<=FULL)||(LA247_5>=EVENTS && LA247_5<=LAST)||LA247_5==ISTREAM||(LA247_5>=UNIDIRECTIONAL && LA247_5<=CURRENT_TIMESTAMP)||(LA247_5>=SNAPSHOT && LA247_5<=INDEX)||(LA247_5>=BOOLEAN_TRUE && LA247_5<=VALUE_NULL)||(LA247_5>=DEFINE && LA247_5<=MATCHED)||LA247_5==NEWKW||LA247_5==CONTEXT||LA247_5==NUM_DOUBLE||(LA247_5>=IDENT && LA247_5<=LPAREN)||LA247_5==LCURLY||LA247_5==QUESTION||(LA247_5>=PLUS && LA247_5<=QUOTED_STRING_LITERAL)||LA247_5==MINUS||LA247_5==NUM_INT||(LA247_5>=TICKED_STRING_LITERAL && LA247_5<=NUM_FLOAT)) ) {
                                alt247=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 247, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA247_1==LBRACK) ) {
                            alt247=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 247, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt247=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt247=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt247=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 247, 0, input);
                        throw nvae;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9203); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt242=2;
                            int LA242_0 = input.LA(1);
                            if ( (LA242_0==LPAREN) ) {
                                alt242=1;
                            }
                            else if ( (LA242_0==LBRACK) ) {
                                alt242=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 242, 0, input);
                                throw nvae;
                            }
                            switch (alt242) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression9215); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression9221); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression9224);
                            expression610=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression610.getTree());
                            int alt244=2;
                            int LA244_0 = input.LA(1);
                            if ( (LA244_0==COLON) ) {
                                alt244=1;
                            }
                            else if ( (LA244_0==RBRACK||LA244_0==RPAREN||LA244_0==COMMA) ) {
                                alt244=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 244, 0, input);
                                throw nvae;
                            }
                            switch (alt244) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression9246); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression9249);
                                    expression611=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression611.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop243:
                                    do {
                                        int alt243=2;
                                        int LA243_0 = input.LA(1);
                                        if ( (LA243_0==COMMA) ) {
                                            alt243=1;
                                        }
                                        switch (alt243) {
                                    	case 1 :
                                    	    {
                                    	    COMMA612=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression9275); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA612);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression9277);
                                    	    expression613=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression613.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop243;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt245=2;
                            int LA245_0 = input.LA(1);
                            if ( (LA245_0==RPAREN) ) {
                                alt245=1;
                            }
                            else if ( (LA245_0==RBRACK) ) {
                                alt245=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 245, 0, input);
                                throw nvae;
                            }
                            switch (alt245) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression9303); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression9309); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET614=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9432); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET614);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression9434);
                            inSubSelectQuery615=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery615.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN616=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression9480); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN616);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression9482);
                            betweenList617=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList617.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE618=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression9532); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE618);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9534);
                            concatenationExpr619=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr619.getTree());
                            int alt246=2;
                            int LA246_0 = input.LA(1);
                            if ( (LA246_0==ESCAPE) ) {
                                alt246=1;
                            }
                            switch (alt246) {
                                case 1 :
                                    {
                                    ESCAPE620=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression9537); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE620);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression9539);
                                    stringconstant621=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant621.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP622=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression9591); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP622);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9593);
                            concatenationExpr623=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr623.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr624 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery9655);
            subQueryExpr624=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr624.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR627=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression625 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression626 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression628 = null;
        CommonTree c_tree=null;
        CommonTree LOR627_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9680);
            additiveExpression625=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression625.getTree());
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==LOR) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9688);
                    additiveExpression626=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression626.getTree());
                    loop249:
                    do {
                        int alt249=2;
                        int LA249_0 = input.LA(1);
                        if ( (LA249_0==LOR) ) {
                            alt249=1;
                        }
                        switch (alt249) {
                    	case 1 :
                    	    {
                    	    LOR627=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9692); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR627);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9694);
                    	    additiveExpression628=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression628.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop249;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS630=null;
        Token MINUS631=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression629 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression632 = null;
        CommonTree PLUS630_tree=null;
        CommonTree MINUS631_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9735);
            multiplyExpression629=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression629.getTree());
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);
                if ( (LA252_0==PLUS||LA252_0==MINUS) ) {
                    alt252=1;
                }
                switch (alt252) {
            	case 1 :
            	    {
            	    int alt251=2;
            	    int LA251_0 = input.LA(1);
            	    if ( (LA251_0==PLUS) ) {
            	        alt251=1;
            	    }
            	    else if ( (LA251_0==MINUS) ) {
            	        alt251=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 251, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt251) {
            	        case 1 :
            	            {
            	            PLUS630=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression9740); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS630_tree = (CommonTree)adaptor.create(PLUS630);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS630_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS631=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression9743); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS631_tree = (CommonTree)adaptor.create(MINUS631);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS631_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9747);
            	    multiplyExpression632=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression632.getTree());
            	    }
            	    break;
            	default :
            	    break loop252;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR634=null;
        Token DIV635=null;
        Token MOD636=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression633 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression637 = null;
        CommonTree STAR634_tree=null;
        CommonTree DIV635_tree=null;
        CommonTree MOD636_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9761);
            unaryExpression633=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression633.getTree());
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);
                if ( (LA254_0==STAR||(LA254_0>=DIV && LA254_0<=MOD)) ) {
                    alt254=1;
                }
                switch (alt254) {
            	case 1 :
            	    {
            	    int alt253=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt253=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt253=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt253=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 253, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt253) {
            	        case 1 :
            	            {
            	            STAR634=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression9766); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR634_tree = (CommonTree)adaptor.create(STAR634);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR634_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV635=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression9769); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV635_tree = (CommonTree)adaptor.create(DIV635);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV635_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD636=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression9772); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD636_tree = (CommonTree)adaptor.create(MOD636);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD636_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9776);
            	    unaryExpression637=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression637.getTree());
            	    }
            	    break;
            	default :
            	    break loop254;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS638=null;
        Token LPAREN642=null;
        Token RPAREN644=null;
        Token NEWKW654=null;
        Token LCURLY655=null;
        Token COMMA657=null;
        Token RCURLY659=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty639 = null;
        EsperEPL2GrammarParser.constant_return constant640 = null;
        EsperEPL2GrammarParser.substitution_return substitution641 = null;
        EsperEPL2GrammarParser.expression_return expression643 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass645 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass646 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction647 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc648 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression649 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression650 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass651 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass652 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression653 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign656 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign658 = null;
        CommonTree d_tree=null;
        CommonTree MINUS638_tree=null;
        CommonTree LPAREN642_tree=null;
        CommonTree RPAREN644_tree=null;
        CommonTree NEWKW654_tree=null;
        CommonTree LCURLY655_tree=null;
        CommonTree COMMA657_tree=null;
        CommonTree RCURLY659_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt260=10;
            alt260 = dfa260.predict(input);
            switch (alt260) {
                case 1 :
                    {
                    MINUS638=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression9791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS638);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression9793);
                    eventProperty639=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty639.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression9806);
                    constant640=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant640.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression9811);
                    substitution641=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution641.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN642=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression9816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN642);
                    pushFollow(FOLLOW_expression_in_unaryExpression9818);
                    expression643=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression643.getTree());
                    RPAREN644=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression9820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN644);
                    int alt256=2;
                    int LA256_0 = input.LA(1);
                    if ( (LA256_0==DOT) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9825); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9827);
                            libFunctionNoClass645=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass645.getTree());
                            loop255:
                            do {
                                int alt255=2;
                                int LA255_0 = input.LA(1);
                                if ( (LA255_0==DOT) ) {
                                    alt255=1;
                                }
                                switch (alt255) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9832); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9834);
                            	    libFunctionNoClass646=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass646.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop255;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression9871);
                    eventPropertyOrLibFunction647=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction647.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression9883);
                    builtinFunc648=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc648.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression9889);
                    arrayExpression649=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression649.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression9894);
                    subSelectExpression650=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression650.getTree());
                    int alt258=2;
                    int LA258_0 = input.LA(1);
                    if ( (LA258_0==DOT) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9899); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9901);
                            libFunctionNoClass651=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass651.getTree());
                            loop257:
                            do {
                                int alt257=2;
                                int LA257_0 = input.LA(1);
                                if ( (LA257_0==DOT) ) {
                                    alt257=1;
                                }
                                switch (alt257) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9906); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9908);
                            	    libFunctionNoClass652=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass652.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop257;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression9945);
                    existsSubSelectExpression653=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression653.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW654=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression9950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW654);
                    LCURLY655=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression9952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY655);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression9954);
                    newAssign656=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign656.getTree());
                    loop259:
                    do {
                        int alt259=2;
                        int LA259_0 = input.LA(1);
                        if ( (LA259_0==COMMA) ) {
                            alt259=1;
                        }
                        switch (alt259) {
                    	case 1 :
                    	    {
                    	    COMMA657=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression9957); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA657);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression9959);
                    	    newAssign658=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign658.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop259;
                        }
                    } while (true);
                    RCURLY659=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression9963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY659);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS661=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty660 = null;
        EsperEPL2GrammarParser.expression_return expression662 = null;
        CommonTree EQUALS661_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign9985);
            eventProperty660=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty660.getTree());
            int alt261=2;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==EQUALS) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    {
                    EQUALS661=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign9988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS661);
                    pushFollow(FOLLOW_expression_in_newAssign9990);
                    expression662=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression662.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr663 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression10018);
            subQueryExpr663=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr663.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr664 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression10040);
            subQueryExpr664=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr664.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS665=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr666 = null;
        CommonTree EXISTS665_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS665=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression10062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS665);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression10064);
            subQueryExpr666=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr666.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN667=null;
        Token SELECT668=null;
        Token DISTINCT669=null;
        Token FROM671=null;
        Token WHERE673=null;
        Token RPAREN675=null;
        EsperEPL2GrammarParser.selectionList_return selectionList670 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr672 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause674 = null;
        CommonTree LPAREN667_tree=null;
        CommonTree SELECT668_tree=null;
        CommonTree DISTINCT669_tree=null;
        CommonTree FROM671_tree=null;
        CommonTree WHERE673_tree=null;
        CommonTree RPAREN675_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN667=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr10097); if (state.failed) return retval;
            SELECT668=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr10103); if (state.failed) return retval;
            int alt262=2;
            int LA262_0 = input.LA(1);
            if ( (LA262_0==DISTINCT) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    DISTINCT669=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr10106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT669_tree = (CommonTree)adaptor.create(DISTINCT669);
                    adaptor.addChild(root_0, DISTINCT669_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr10109);
            selectionList670=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList670.getTree());
            FROM671=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr10116); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr10119);
            subSelectFilterExpr672=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr672.getTree());
            int alt263=2;
            int LA263_0 = input.LA(1);
            if ( (LA263_0==WHERE) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    {
                    WHERE673=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr10127); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr10130);
                    whereClause674=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause674.getTree());
                    }
                    break;
            }
            RPAREN675=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr10139); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT677=null;
        Token DOT679=null;
        Token AS681=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression676 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression678 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression680 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT677_tree=null;
        CommonTree DOT679_tree=null;
        CommonTree AS681_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr10163);
            eventFilterExpression676=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression676.getTree());
            int alt265=2;
            int LA265_0 = input.LA(1);
            if ( (LA265_0==DOT) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    DOT677=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr10168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT677);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr10170);
                    viewExpression678=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression678.getTree());
                    loop264:
                    do {
                        int alt264=2;
                        int LA264_0 = input.LA(1);
                        if ( (LA264_0==DOT) ) {
                            alt264=1;
                        }
                        switch (alt264) {
                    	case 1 :
                    	    {
                    	    DOT679=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr10173); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT679);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr10175);
                    	    viewExpression680=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression680.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop264;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt266=3;
            int LA266_0 = input.LA(1);
            if ( (LA266_0==AS) ) {
                alt266=1;
            }
            else if ( (LA266_0==IDENT) ) {
                alt266=2;
            }
            switch (alt266) {
                case 1 :
                    {
                    AS681=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr10182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS681);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr10186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr10192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt267=3;
            int LA267_0 = input.LA(1);
            if ( (LA267_0==RETAINUNION) ) {
                alt267=1;
            }
            else if ( (LA267_0==RETAININTERSECTION) ) {
                alt267=2;
            }
            switch (alt267) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr10199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr10203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY682=null;
        Token COMMA684=null;
        Token RCURLY686=null;
        EsperEPL2GrammarParser.expression_return expression683 = null;
        EsperEPL2GrammarParser.expression_return expression685 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass687 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass688 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY682_tree=null;
        CommonTree COMMA684_tree=null;
        CommonTree RCURLY686_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY682=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression10243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY682);
            int alt269=2;
            int LA269_0 = input.LA(1);
            if ( (LA269_0==WINDOW||LA269_0==BETWEEN||LA269_0==ESCAPE||(LA269_0>=NOT_EXPR && LA269_0<=EVERY_EXPR)||LA269_0==WHERE||(LA269_0>=SUM && LA269_0<=COUNT)||LA269_0==CASE||LA269_0==OUTER||(LA269_0>=JOIN && LA269_0<=FULL)||(LA269_0>=EVENTS && LA269_0<=LAST)||LA269_0==ISTREAM||(LA269_0>=UNIDIRECTIONAL && LA269_0<=CURRENT_TIMESTAMP)||(LA269_0>=SNAPSHOT && LA269_0<=INDEX)||(LA269_0>=BOOLEAN_TRUE && LA269_0<=VALUE_NULL)||(LA269_0>=DEFINE && LA269_0<=MATCHED)||LA269_0==NEWKW||LA269_0==CONTEXT||LA269_0==NUM_DOUBLE||(LA269_0>=IDENT && LA269_0<=LPAREN)||LA269_0==LCURLY||LA269_0==QUESTION||(LA269_0>=PLUS && LA269_0<=QUOTED_STRING_LITERAL)||LA269_0==MINUS||LA269_0==NUM_INT||(LA269_0>=TICKED_STRING_LITERAL && LA269_0<=NUM_FLOAT)) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression10246);
                    expression683=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression683.getTree());
                    loop268:
                    do {
                        int alt268=2;
                        int LA268_0 = input.LA(1);
                        if ( (LA268_0==COMMA) ) {
                            alt268=1;
                        }
                        switch (alt268) {
                    	case 1 :
                    	    {
                    	    COMMA684=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression10249); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA684);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression10251);
                    	    expression685=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression685.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop268;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY686=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression10258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY686);
            int alt271=2;
            int LA271_0 = input.LA(1);
            if ( (LA271_0==DOT) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10265);
                    libFunctionNoClass687=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass687.getTree());
                    loop270:
                    do {
                        int alt270=2;
                        int LA270_0 = input.LA(1);
                        if ( (LA270_0==DOT) ) {
                            alt270=1;
                        }
                        switch (alt270) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10270); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10272);
                    	    libFunctionNoClass688=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass688.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop270;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM689=null;
        Token LPAREN690=null;
        Token ALL691=null;
        Token DISTINCT692=null;
        Token RPAREN695=null;
        Token AVG696=null;
        Token LPAREN697=null;
        Token ALL698=null;
        Token DISTINCT699=null;
        Token RPAREN702=null;
        Token COUNT703=null;
        Token LPAREN704=null;
        Token ALL705=null;
        Token DISTINCT706=null;
        Token STAR708=null;
        Token RPAREN710=null;
        Token MEDIAN711=null;
        Token LPAREN712=null;
        Token ALL713=null;
        Token DISTINCT714=null;
        Token RPAREN717=null;
        Token STDDEV718=null;
        Token LPAREN719=null;
        Token ALL720=null;
        Token DISTINCT721=null;
        Token RPAREN724=null;
        Token AVEDEV725=null;
        Token LPAREN726=null;
        Token ALL727=null;
        Token DISTINCT728=null;
        Token RPAREN731=null;
        Token COALESCE735=null;
        Token LPAREN736=null;
        Token COMMA738=null;
        Token COMMA740=null;
        Token RPAREN742=null;
        Token PREVIOUS743=null;
        Token LPAREN744=null;
        Token COMMA746=null;
        Token RPAREN748=null;
        Token PREVIOUSTAIL751=null;
        Token LPAREN752=null;
        Token COMMA754=null;
        Token RPAREN756=null;
        Token PREVIOUSCOUNT759=null;
        Token LPAREN760=null;
        Token RPAREN762=null;
        Token PREVIOUSWINDOW763=null;
        Token LPAREN764=null;
        Token RPAREN766=null;
        Token PRIOR769=null;
        Token LPAREN770=null;
        Token NUM_INT771=null;
        Token COMMA772=null;
        Token RPAREN774=null;
        Token INSTANCEOF775=null;
        Token LPAREN776=null;
        Token COMMA778=null;
        Token COMMA780=null;
        Token RPAREN782=null;
        Token TYPEOF783=null;
        Token LPAREN784=null;
        Token RPAREN786=null;
        Token CAST787=null;
        Token LPAREN788=null;
        Token COMMA790=null;
        Token AS791=null;
        Token RPAREN793=null;
        Token EXISTS796=null;
        Token LPAREN797=null;
        Token RPAREN799=null;
        Token CURRENT_TIMESTAMP800=null;
        Token LPAREN801=null;
        Token RPAREN802=null;
        Token ISTREAM805=null;
        Token LPAREN806=null;
        Token RPAREN807=null;
        EsperEPL2GrammarParser.expression_return expression693 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr694 = null;
        EsperEPL2GrammarParser.expression_return expression700 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr701 = null;
        EsperEPL2GrammarParser.expression_return expression707 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr709 = null;
        EsperEPL2GrammarParser.expression_return expression715 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr716 = null;
        EsperEPL2GrammarParser.expression_return expression722 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr723 = null;
        EsperEPL2GrammarParser.expression_return expression729 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr730 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation732 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation733 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation734 = null;
        EsperEPL2GrammarParser.expression_return expression737 = null;
        EsperEPL2GrammarParser.expression_return expression739 = null;
        EsperEPL2GrammarParser.expression_return expression741 = null;
        EsperEPL2GrammarParser.expression_return expression745 = null;
        EsperEPL2GrammarParser.expression_return expression747 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass749 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass750 = null;
        EsperEPL2GrammarParser.expression_return expression753 = null;
        EsperEPL2GrammarParser.expression_return expression755 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass757 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass758 = null;
        EsperEPL2GrammarParser.expression_return expression761 = null;
        EsperEPL2GrammarParser.expression_return expression765 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass767 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass768 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty773 = null;
        EsperEPL2GrammarParser.expression_return expression777 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier779 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier781 = null;
        EsperEPL2GrammarParser.expression_return expression785 = null;
        EsperEPL2GrammarParser.expression_return expression789 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier792 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass794 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass795 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty798 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass803 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass804 = null;
        CommonTree d_tree=null;
        CommonTree SUM689_tree=null;
        CommonTree LPAREN690_tree=null;
        CommonTree ALL691_tree=null;
        CommonTree DISTINCT692_tree=null;
        CommonTree RPAREN695_tree=null;
        CommonTree AVG696_tree=null;
        CommonTree LPAREN697_tree=null;
        CommonTree ALL698_tree=null;
        CommonTree DISTINCT699_tree=null;
        CommonTree RPAREN702_tree=null;
        CommonTree COUNT703_tree=null;
        CommonTree LPAREN704_tree=null;
        CommonTree ALL705_tree=null;
        CommonTree DISTINCT706_tree=null;
        CommonTree STAR708_tree=null;
        CommonTree RPAREN710_tree=null;
        CommonTree MEDIAN711_tree=null;
        CommonTree LPAREN712_tree=null;
        CommonTree ALL713_tree=null;
        CommonTree DISTINCT714_tree=null;
        CommonTree RPAREN717_tree=null;
        CommonTree STDDEV718_tree=null;
        CommonTree LPAREN719_tree=null;
        CommonTree ALL720_tree=null;
        CommonTree DISTINCT721_tree=null;
        CommonTree RPAREN724_tree=null;
        CommonTree AVEDEV725_tree=null;
        CommonTree LPAREN726_tree=null;
        CommonTree ALL727_tree=null;
        CommonTree DISTINCT728_tree=null;
        CommonTree RPAREN731_tree=null;
        CommonTree COALESCE735_tree=null;
        CommonTree LPAREN736_tree=null;
        CommonTree COMMA738_tree=null;
        CommonTree COMMA740_tree=null;
        CommonTree RPAREN742_tree=null;
        CommonTree PREVIOUS743_tree=null;
        CommonTree LPAREN744_tree=null;
        CommonTree COMMA746_tree=null;
        CommonTree RPAREN748_tree=null;
        CommonTree PREVIOUSTAIL751_tree=null;
        CommonTree LPAREN752_tree=null;
        CommonTree COMMA754_tree=null;
        CommonTree RPAREN756_tree=null;
        CommonTree PREVIOUSCOUNT759_tree=null;
        CommonTree LPAREN760_tree=null;
        CommonTree RPAREN762_tree=null;
        CommonTree PREVIOUSWINDOW763_tree=null;
        CommonTree LPAREN764_tree=null;
        CommonTree RPAREN766_tree=null;
        CommonTree PRIOR769_tree=null;
        CommonTree LPAREN770_tree=null;
        CommonTree NUM_INT771_tree=null;
        CommonTree COMMA772_tree=null;
        CommonTree RPAREN774_tree=null;
        CommonTree INSTANCEOF775_tree=null;
        CommonTree LPAREN776_tree=null;
        CommonTree COMMA778_tree=null;
        CommonTree COMMA780_tree=null;
        CommonTree RPAREN782_tree=null;
        CommonTree TYPEOF783_tree=null;
        CommonTree LPAREN784_tree=null;
        CommonTree RPAREN786_tree=null;
        CommonTree CAST787_tree=null;
        CommonTree LPAREN788_tree=null;
        CommonTree COMMA790_tree=null;
        CommonTree AS791_tree=null;
        CommonTree RPAREN793_tree=null;
        CommonTree EXISTS796_tree=null;
        CommonTree LPAREN797_tree=null;
        CommonTree RPAREN799_tree=null;
        CommonTree CURRENT_TIMESTAMP800_tree=null;
        CommonTree LPAREN801_tree=null;
        CommonTree RPAREN802_tree=null;
        CommonTree ISTREAM805_tree=null;
        CommonTree LPAREN806_tree=null;
        CommonTree RPAREN807_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt301=21;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt301=1;
                }
                break;
            case AVG:
                {
                alt301=2;
                }
                break;
            case COUNT:
                {
                alt301=3;
                }
                break;
            case MEDIAN:
                {
                alt301=4;
                }
                break;
            case STDDEV:
                {
                alt301=5;
                }
                break;
            case AVEDEV:
                {
                alt301=6;
                }
                break;
            case FIRST:
                {
                alt301=7;
                }
                break;
            case LAST:
                {
                alt301=8;
                }
                break;
            case WINDOW:
                {
                alt301=9;
                }
                break;
            case COALESCE:
                {
                alt301=10;
                }
                break;
            case PREVIOUS:
                {
                alt301=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt301=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt301=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt301=14;
                }
                break;
            case PRIOR:
                {
                alt301=15;
                }
                break;
            case INSTANCEOF:
                {
                alt301=16;
                }
                break;
            case TYPEOF:
                {
                alt301=17;
                }
                break;
            case CAST:
                {
                alt301=18;
                }
                break;
            case EXISTS:
                {
                alt301=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt301=20;
                }
                break;
            case ISTREAM:
                {
                alt301=21;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);
                throw nvae;
            }
            switch (alt301) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM689=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc10321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM689_tree = (CommonTree)adaptor.create(SUM689);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM689_tree, root_0);
                    }
                    LPAREN690=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10324); if (state.failed) return retval;
                    int alt272=3;
                    int LA272_0 = input.LA(1);
                    if ( (LA272_0==ALL) ) {
                        alt272=1;
                    }
                    else if ( (LA272_0==DISTINCT) ) {
                        alt272=2;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            ALL691=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10328); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT692=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10333); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT692_tree = (CommonTree)adaptor.create(DISTINCT692);
                            adaptor.addChild(root_0, DISTINCT692_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10337);
                    expression693=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression693.getTree());
                    int alt273=2;
                    int LA273_0 = input.LA(1);
                    if ( (LA273_0==COMMA) ) {
                        alt273=1;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10339);
                            aggregationFilterExpr694=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr694.getTree());
                            }
                            break;
                    }
                    RPAREN695=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10342); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG696=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc10348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG696_tree = (CommonTree)adaptor.create(AVG696);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG696_tree, root_0);
                    }
                    LPAREN697=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10351); if (state.failed) return retval;
                    int alt274=3;
                    int LA274_0 = input.LA(1);
                    if ( (LA274_0==ALL) ) {
                        alt274=1;
                    }
                    else if ( (LA274_0==DISTINCT) ) {
                        alt274=2;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            ALL698=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10355); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT699=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10360); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT699_tree = (CommonTree)adaptor.create(DISTINCT699);
                            adaptor.addChild(root_0, DISTINCT699_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10364);
                    expression700=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression700.getTree());
                    int alt275=2;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==COMMA) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10366);
                            aggregationFilterExpr701=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr701.getTree());
                            }
                            break;
                    }
                    RPAREN702=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10369); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT703=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc10375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT703_tree = (CommonTree)adaptor.create(COUNT703);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT703_tree, root_0);
                    }
                    LPAREN704=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10378); if (state.failed) return retval;
                    int alt277=2;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==WINDOW||LA277_0==BETWEEN||LA277_0==ESCAPE||(LA277_0>=NOT_EXPR && LA277_0<=EVERY_EXPR)||LA277_0==WHERE||(LA277_0>=SUM && LA277_0<=COUNT)||LA277_0==CASE||LA277_0==OUTER||(LA277_0>=JOIN && LA277_0<=FULL)||(LA277_0>=DISTINCT && LA277_0<=ALL)||(LA277_0>=EVENTS && LA277_0<=LAST)||LA277_0==ISTREAM||(LA277_0>=UNIDIRECTIONAL && LA277_0<=CURRENT_TIMESTAMP)||(LA277_0>=SNAPSHOT && LA277_0<=INDEX)||(LA277_0>=BOOLEAN_TRUE && LA277_0<=VALUE_NULL)||(LA277_0>=DEFINE && LA277_0<=MATCHED)||LA277_0==NEWKW||LA277_0==CONTEXT||LA277_0==NUM_DOUBLE||(LA277_0>=IDENT && LA277_0<=LPAREN)||LA277_0==LCURLY||LA277_0==QUESTION||(LA277_0>=PLUS && LA277_0<=QUOTED_STRING_LITERAL)||LA277_0==MINUS||LA277_0==NUM_INT||(LA277_0>=TICKED_STRING_LITERAL && LA277_0<=NUM_FLOAT)) ) {
                        alt277=1;
                    }
                    else if ( (LA277_0==STAR) ) {
                        alt277=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 0, input);
                        throw nvae;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            {
                            int alt276=3;
                            int LA276_0 = input.LA(1);
                            if ( (LA276_0==ALL) ) {
                                alt276=1;
                            }
                            else if ( (LA276_0==DISTINCT) ) {
                                alt276=2;
                            }
                            switch (alt276) {
                                case 1 :
                                    {
                                    ALL705=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10390); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT706=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10395); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT706_tree = (CommonTree)adaptor.create(DISTINCT706);
                                    adaptor.addChild(root_0, DISTINCT706_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc10399);
                            expression707=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression707.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR708=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc10410); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==COMMA) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10421);
                            aggregationFilterExpr709=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr709.getTree());
                            }
                            break;
                    }
                    RPAREN710=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10424); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN711=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc10430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN711_tree = (CommonTree)adaptor.create(MEDIAN711);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN711_tree, root_0);
                    }
                    LPAREN712=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10433); if (state.failed) return retval;
                    int alt279=3;
                    int LA279_0 = input.LA(1);
                    if ( (LA279_0==ALL) ) {
                        alt279=1;
                    }
                    else if ( (LA279_0==DISTINCT) ) {
                        alt279=2;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            ALL713=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10437); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT714=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10442); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT714_tree = (CommonTree)adaptor.create(DISTINCT714);
                            adaptor.addChild(root_0, DISTINCT714_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10446);
                    expression715=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression715.getTree());
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==COMMA) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10448);
                            aggregationFilterExpr716=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr716.getTree());
                            }
                            break;
                    }
                    RPAREN717=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10451); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV718=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc10457); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV718_tree = (CommonTree)adaptor.create(STDDEV718);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV718_tree, root_0);
                    }
                    LPAREN719=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10460); if (state.failed) return retval;
                    int alt281=3;
                    int LA281_0 = input.LA(1);
                    if ( (LA281_0==ALL) ) {
                        alt281=1;
                    }
                    else if ( (LA281_0==DISTINCT) ) {
                        alt281=2;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            ALL720=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10464); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT721=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10469); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT721_tree = (CommonTree)adaptor.create(DISTINCT721);
                            adaptor.addChild(root_0, DISTINCT721_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10473);
                    expression722=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression722.getTree());
                    int alt282=2;
                    int LA282_0 = input.LA(1);
                    if ( (LA282_0==COMMA) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10475);
                            aggregationFilterExpr723=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr723.getTree());
                            }
                            break;
                    }
                    RPAREN724=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10478); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV725=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc10484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV725_tree = (CommonTree)adaptor.create(AVEDEV725);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV725_tree, root_0);
                    }
                    LPAREN726=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10487); if (state.failed) return retval;
                    int alt283=3;
                    int LA283_0 = input.LA(1);
                    if ( (LA283_0==ALL) ) {
                        alt283=1;
                    }
                    else if ( (LA283_0==DISTINCT) ) {
                        alt283=2;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            ALL727=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10491); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT728=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10496); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT728_tree = (CommonTree)adaptor.create(DISTINCT728);
                            adaptor.addChild(root_0, DISTINCT728_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10500);
                    expression729=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression729.getTree());
                    int alt284=2;
                    int LA284_0 = input.LA(1);
                    if ( (LA284_0==COMMA) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10502);
                            aggregationFilterExpr730=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr730.getTree());
                            }
                            break;
                    }
                    RPAREN731=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10505); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc10511);
                    firstAggregation732=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation732.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc10516);
                    lastAggregation733=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation733.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc10521);
                    windowAggregation734=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation734.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE735=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc10526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE735_tree = (CommonTree)adaptor.create(COALESCE735);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE735_tree, root_0);
                    }
                    LPAREN736=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10529); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10532);
                    expression737=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression737.getTree());
                    COMMA738=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10534); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10537);
                    expression739=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression739.getTree());
                    loop285:
                    do {
                        int alt285=2;
                        int LA285_0 = input.LA(1);
                        if ( (LA285_0==COMMA) ) {
                            alt285=1;
                        }
                        switch (alt285) {
                    	case 1 :
                    	    {
                    	    COMMA740=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10540); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc10543);
                    	    expression741=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression741.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop285;
                        }
                    } while (true);
                    RPAREN742=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10547); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS743=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc10553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS743);
                    LPAREN744=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN744);
                    pushFollow(FOLLOW_expression_in_builtinFunc10557);
                    expression745=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression745.getTree());
                    int alt286=2;
                    int LA286_0 = input.LA(1);
                    if ( (LA286_0==COMMA) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            COMMA746=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10560); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA746);
                            pushFollow(FOLLOW_expression_in_builtinFunc10562);
                            expression747=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression747.getTree());
                            }
                            break;
                    }
                    RPAREN748=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN748);
                    int alt288=2;
                    int LA288_0 = input.LA(1);
                    if ( (LA288_0==DOT) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10571); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10573);
                            libFunctionNoClass749=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass749.getTree());
                            loop287:
                            do {
                                int alt287=2;
                                int LA287_0 = input.LA(1);
                                if ( (LA287_0==DOT) ) {
                                    alt287=1;
                                }
                                switch (alt287) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10578); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10580);
                            	    libFunctionNoClass750=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass750.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop287;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL751=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc10627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL751);
                    LPAREN752=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN752);
                    pushFollow(FOLLOW_expression_in_builtinFunc10631);
                    expression753=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression753.getTree());
                    int alt289=2;
                    int LA289_0 = input.LA(1);
                    if ( (LA289_0==COMMA) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            COMMA754=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10634); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA754);
                            pushFollow(FOLLOW_expression_in_builtinFunc10636);
                            expression755=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression755.getTree());
                            }
                            break;
                    }
                    RPAREN756=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN756);
                    int alt291=2;
                    int LA291_0 = input.LA(1);
                    if ( (LA291_0==DOT) ) {
                        alt291=1;
                    }
                    switch (alt291) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10645); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10647);
                            libFunctionNoClass757=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass757.getTree());
                            loop290:
                            do {
                                int alt290=2;
                                int LA290_0 = input.LA(1);
                                if ( (LA290_0==DOT) ) {
                                    alt290=1;
                                }
                                switch (alt290) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10652); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10654);
                            	    libFunctionNoClass758=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass758.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop290;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT759=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc10701); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT759_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT759);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT759_tree, root_0);
                    }
                    LPAREN760=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10704); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10707);
                    expression761=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression761.getTree());
                    RPAREN762=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10709); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW763=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc10715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW763);
                    LPAREN764=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN764);
                    pushFollow(FOLLOW_expression_in_builtinFunc10719);
                    expression765=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression765.getTree());
                    RPAREN766=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN766);
                    int alt293=2;
                    int LA293_0 = input.LA(1);
                    if ( (LA293_0==DOT) ) {
                        alt293=1;
                    }
                    switch (alt293) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10726); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10728);
                            libFunctionNoClass767=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass767.getTree());
                            loop292:
                            do {
                                int alt292=2;
                                int LA292_0 = input.LA(1);
                                if ( (LA292_0==DOT) ) {
                                    alt292=1;
                                }
                                switch (alt292) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10733); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10735);
                            	    libFunctionNoClass768=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass768.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop292;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR769=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc10780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR769_tree = (CommonTree)adaptor.create(PRIOR769);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR769_tree, root_0);
                    }
                    LPAREN770=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10783); if (state.failed) return retval;
                    NUM_INT771=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc10786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT771_tree = (CommonTree)adaptor.create(NUM_INT771);
                    adaptor.addChild(root_0, NUM_INT771_tree);
                    }
                    COMMA772=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10788); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10791);
                    eventProperty773=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty773.getTree());
                    RPAREN774=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10793); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF775=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc10803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF775_tree = (CommonTree)adaptor.create(INSTANCEOF775);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF775_tree, root_0);
                    }
                    LPAREN776=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10806); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10809);
                    expression777=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression777.getTree());
                    COMMA778=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10811); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10814);
                    classIdentifier779=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier779.getTree());
                    loop294:
                    do {
                        int alt294=2;
                        int LA294_0 = input.LA(1);
                        if ( (LA294_0==COMMA) ) {
                            alt294=1;
                        }
                        switch (alt294) {
                    	case 1 :
                    	    {
                    	    COMMA780=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10817); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10820);
                    	    classIdentifier781=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier781.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop294;
                        }
                    } while (true);
                    RPAREN782=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10824); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF783=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc10830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF783_tree = (CommonTree)adaptor.create(TYPEOF783);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF783_tree, root_0);
                    }
                    LPAREN784=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10833); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10836);
                    expression785=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression785.getTree());
                    RPAREN786=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10838); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST787=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc10844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST787);
                    LPAREN788=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN788);
                    pushFollow(FOLLOW_expression_in_builtinFunc10848);
                    expression789=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression789.getTree());
                    int alt295=2;
                    int LA295_0 = input.LA(1);
                    if ( (LA295_0==COMMA) ) {
                        alt295=1;
                    }
                    else if ( (LA295_0==AS) ) {
                        alt295=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 295, 0, input);
                        throw nvae;
                    }
                    switch (alt295) {
                        case 1 :
                            {
                            COMMA790=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10851); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA790);
                            }
                            break;
                        case 2 :
                            {
                            AS791=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc10855); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS791);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10858);
                    classIdentifier792=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier792.getTree());
                    RPAREN793=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN793);
                    int alt297=2;
                    int LA297_0 = input.LA(1);
                    if ( (LA297_0==DOT) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10865); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10867);
                            libFunctionNoClass794=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass794.getTree());
                            loop296:
                            do {
                                int alt296=2;
                                int LA296_0 = input.LA(1);
                                if ( (LA296_0==DOT) ) {
                                    alt296=1;
                                }
                                switch (alt296) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10872); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10874);
                            	    libFunctionNoClass795=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass795.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop296;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS796=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc10919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS796_tree = (CommonTree)adaptor.create(EXISTS796);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS796_tree, root_0);
                    }
                    LPAREN797=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10922); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10925);
                    eventProperty798=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty798.getTree());
                    RPAREN799=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10927); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP800=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP800);
                    int alt298=2;
                    int LA298_0 = input.LA(1);
                    if ( (LA298_0==LPAREN) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            {
                            LPAREN801=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10936); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN801);
                            RPAREN802=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10938); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN802);
                            }
                            break;
                    }
                    int alt300=2;
                    int LA300_0 = input.LA(1);
                    if ( (LA300_0==DOT) ) {
                        alt300=1;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10945); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10947);
                            libFunctionNoClass803=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass803.getTree());
                            loop299:
                            do {
                                int alt299=2;
                                int LA299_0 = input.LA(1);
                                if ( (LA299_0==DOT) ) {
                                    alt299=1;
                                }
                                switch (alt299) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10952); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10954);
                            	    libFunctionNoClass804=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass804.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop299;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ISTREAM805=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_builtinFunc10991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISTREAM805_tree = (CommonTree)adaptor.create(ISTREAM805);
                    root_0 = (CommonTree)adaptor.becomeRoot(ISTREAM805_tree, root_0);
                    }
                    LPAREN806=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10994); if (state.failed) return retval;
                    RPAREN807=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10997); if (state.failed) return retval;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST808=null;
        Token LPAREN809=null;
        Token COMMA811=null;
        Token RPAREN813=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr810 = null;
        EsperEPL2GrammarParser.expression_return expression812 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass814 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass815 = null;
        CommonTree d_tree=null;
        CommonTree FIRST808_tree=null;
        CommonTree LPAREN809_tree=null;
        CommonTree COMMA811_tree=null;
        CommonTree RPAREN813_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST808=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation11010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST808);
            LPAREN809=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation11012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN809);
            int alt303=2;
            int LA303_0 = input.LA(1);
            if ( (LA303_0==WINDOW||LA303_0==BETWEEN||LA303_0==ESCAPE||(LA303_0>=NOT_EXPR && LA303_0<=EVERY_EXPR)||LA303_0==WHERE||(LA303_0>=SUM && LA303_0<=COUNT)||LA303_0==CASE||LA303_0==OUTER||(LA303_0>=JOIN && LA303_0<=FULL)||(LA303_0>=EVENTS && LA303_0<=LAST)||LA303_0==ISTREAM||(LA303_0>=UNIDIRECTIONAL && LA303_0<=CURRENT_TIMESTAMP)||(LA303_0>=SNAPSHOT && LA303_0<=INDEX)||(LA303_0>=BOOLEAN_TRUE && LA303_0<=VALUE_NULL)||(LA303_0>=DEFINE && LA303_0<=MATCHED)||LA303_0==NEWKW||LA303_0==CONTEXT||LA303_0==NUM_DOUBLE||(LA303_0>=IDENT && LA303_0<=LPAREN)||LA303_0==LCURLY||LA303_0==STAR||LA303_0==QUESTION||(LA303_0>=PLUS && LA303_0<=QUOTED_STRING_LITERAL)||LA303_0==MINUS||LA303_0==NUM_INT||(LA303_0>=TICKED_STRING_LITERAL && LA303_0<=NUM_FLOAT)) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation11015);
                    accessAggExpr810=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr810.getTree());
                    int alt302=2;
                    int LA302_0 = input.LA(1);
                    if ( (LA302_0==COMMA) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            {
                            COMMA811=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation11018); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA811);
                            pushFollow(FOLLOW_expression_in_firstAggregation11020);
                            expression812=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression812.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN813=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation11026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN813);
            int alt305=2;
            int LA305_0 = input.LA(1);
            if ( (LA305_0==DOT) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation11031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation11033);
                    libFunctionNoClass814=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass814.getTree());
                    loop304:
                    do {
                        int alt304=2;
                        int LA304_0 = input.LA(1);
                        if ( (LA304_0==DOT) ) {
                            alt304=1;
                        }
                        switch (alt304) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation11038); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation11040);
                    	    libFunctionNoClass815=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass815.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop304;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST816=null;
        Token LPAREN817=null;
        Token COMMA819=null;
        Token RPAREN821=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr818 = null;
        EsperEPL2GrammarParser.expression_return expression820 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass822 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass823 = null;
        CommonTree d_tree=null;
        CommonTree LAST816_tree=null;
        CommonTree LPAREN817_tree=null;
        CommonTree COMMA819_tree=null;
        CommonTree RPAREN821_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST816=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation11095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST816);
            LPAREN817=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation11097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN817);
            int alt307=2;
            int LA307_0 = input.LA(1);
            if ( (LA307_0==WINDOW||LA307_0==BETWEEN||LA307_0==ESCAPE||(LA307_0>=NOT_EXPR && LA307_0<=EVERY_EXPR)||LA307_0==WHERE||(LA307_0>=SUM && LA307_0<=COUNT)||LA307_0==CASE||LA307_0==OUTER||(LA307_0>=JOIN && LA307_0<=FULL)||(LA307_0>=EVENTS && LA307_0<=LAST)||LA307_0==ISTREAM||(LA307_0>=UNIDIRECTIONAL && LA307_0<=CURRENT_TIMESTAMP)||(LA307_0>=SNAPSHOT && LA307_0<=INDEX)||(LA307_0>=BOOLEAN_TRUE && LA307_0<=VALUE_NULL)||(LA307_0>=DEFINE && LA307_0<=MATCHED)||LA307_0==NEWKW||LA307_0==CONTEXT||LA307_0==NUM_DOUBLE||(LA307_0>=IDENT && LA307_0<=LPAREN)||LA307_0==LCURLY||LA307_0==STAR||LA307_0==QUESTION||(LA307_0>=PLUS && LA307_0<=QUOTED_STRING_LITERAL)||LA307_0==MINUS||LA307_0==NUM_INT||(LA307_0>=TICKED_STRING_LITERAL && LA307_0<=NUM_FLOAT)) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation11100);
                    accessAggExpr818=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr818.getTree());
                    int alt306=2;
                    int LA306_0 = input.LA(1);
                    if ( (LA306_0==COMMA) ) {
                        alt306=1;
                    }
                    switch (alt306) {
                        case 1 :
                            {
                            COMMA819=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation11103); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA819);
                            pushFollow(FOLLOW_expression_in_lastAggregation11105);
                            expression820=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression820.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN821=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation11111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN821);
            int alt309=2;
            int LA309_0 = input.LA(1);
            if ( (LA309_0==DOT) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation11116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation11118);
                    libFunctionNoClass822=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass822.getTree());
                    loop308:
                    do {
                        int alt308=2;
                        int LA308_0 = input.LA(1);
                        if ( (LA308_0==DOT) ) {
                            alt308=1;
                        }
                        switch (alt308) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation11123); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation11125);
                    	    libFunctionNoClass823=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass823.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop308;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW824=null;
        Token LPAREN825=null;
        Token RPAREN827=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr826 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass828 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass829 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW824_tree=null;
        CommonTree LPAREN825_tree=null;
        CommonTree RPAREN827_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW824=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation11181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW824);
            LPAREN825=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation11183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN825);
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==WINDOW||LA310_0==BETWEEN||LA310_0==ESCAPE||(LA310_0>=NOT_EXPR && LA310_0<=EVERY_EXPR)||LA310_0==WHERE||(LA310_0>=SUM && LA310_0<=COUNT)||LA310_0==CASE||LA310_0==OUTER||(LA310_0>=JOIN && LA310_0<=FULL)||(LA310_0>=EVENTS && LA310_0<=LAST)||LA310_0==ISTREAM||(LA310_0>=UNIDIRECTIONAL && LA310_0<=CURRENT_TIMESTAMP)||(LA310_0>=SNAPSHOT && LA310_0<=INDEX)||(LA310_0>=BOOLEAN_TRUE && LA310_0<=VALUE_NULL)||(LA310_0>=DEFINE && LA310_0<=MATCHED)||LA310_0==NEWKW||LA310_0==CONTEXT||LA310_0==NUM_DOUBLE||(LA310_0>=IDENT && LA310_0<=LPAREN)||LA310_0==LCURLY||LA310_0==STAR||LA310_0==QUESTION||(LA310_0>=PLUS && LA310_0<=QUOTED_STRING_LITERAL)||LA310_0==MINUS||LA310_0==NUM_INT||(LA310_0>=TICKED_STRING_LITERAL && LA310_0<=NUM_FLOAT)) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation11185);
                    accessAggExpr826=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr826.getTree());
                    }
                    break;
            }
            RPAREN827=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation11188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN827);
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( (LA312_0==DOT) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation11193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation11195);
                    libFunctionNoClass828=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass828.getTree());
                    loop311:
                    do {
                        int alt311=2;
                        int LA311_0 = input.LA(1);
                        if ( (LA311_0==DOT) ) {
                            alt311=1;
                        }
                        switch (alt311) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation11200); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation11202);
                    	    libFunctionNoClass829=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass829.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop311;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector830 = null;
        EsperEPL2GrammarParser.expression_return expression831 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt313=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt313=1;
                }
                break;
            case IDENT:
                {
                int LA313_2 = input.LA(2);
                if ( (LA313_2==DOT) ) {
                    int LA313_78 = input.LA(3);
                    if ( (LA313_78==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt313=2;
                    }
                    else if ( (LA313_78==WINDOW||LA313_78==BETWEEN||LA313_78==ESCAPE||LA313_78==EVERY_EXPR||LA313_78==WHERE||(LA313_78>=SUM && LA313_78<=COUNT)||LA313_78==OUTER||(LA313_78>=JOIN && LA313_78<=FULL)||(LA313_78>=EVENTS && LA313_78<=LAST)||(LA313_78>=UNIDIRECTIONAL && LA313_78<=PREVIOUSTAIL)||LA313_78==PRIOR||(LA313_78>=WEEKDAY && LA313_78<=CAST)||(LA313_78>=SNAPSHOT && LA313_78<=INDEX)||(LA313_78>=DEFINE && LA313_78<=MATCHED)||LA313_78==CONTEXT||LA313_78==IDENT||LA313_78==TICKED_STRING_LITERAL) ) {
                        alt313=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 313, 78, input);
                        throw nvae;
                    }
                }
                else if ( ((LA313_2>=IN_SET && LA313_2<=REGEXP)||(LA313_2>=OR_EXPR && LA313_2<=NOT_EXPR)||LA313_2==IS||LA313_2==LBRACK||(LA313_2>=LPAREN && LA313_2<=RPAREN)||(LA313_2>=COMMA && LA313_2<=EQUALS)||LA313_2==STAR||(LA313_2>=LT && LA313_2<=PLUS)||(LA313_2>=BAND && LA313_2<=MOD)||LA313_2==ESCAPECHAR) ) {
                    alt313=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 313, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt313=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);
                throw nvae;
            }
            switch (alt313) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr11259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr11279);
                    propertyStreamSelector830=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector830.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr11292);
                    expression831=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression831.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA832=null;
        EsperEPL2GrammarParser.expression_return expression833 = null;
        CommonTree COMMA832_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA832=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr11311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA832);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr11313);
            expression833=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression833.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty834 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction835 = null;
        try {
            int alt314=2;
            alt314 = dfa314.predict(input);
            switch (alt314) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction11341);
                    eventProperty834=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty834.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction11346);
                    libFunction835=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction835.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT837=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass836 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass838 = null;
        CommonTree DOT837_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction11358);
            libFunctionWithClass836=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass836.getTree());
            loop315:
            do {
                int alt315=2;
                int LA315_0 = input.LA(1);
                if ( (LA315_0==DOT) ) {
                    alt315=1;
                }
                switch (alt315) {
            	case 1 :
            	    {
            	    DOT837=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction11361); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT837);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction11363);
            	    libFunctionNoClass838=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass838.getTree());
            	    }
            	    break;
            	default :
            	    break loop315;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT840=null;
        Token RPAREN843=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy839 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent841 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs842 = null;
        CommonTree l_tree=null;
        CommonTree DOT840_tree=null;
        CommonTree RPAREN843_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt316=2;
            switch ( input.LA(1) ) {
                case IDENT:
                    {
                    int LA316_1 = input.LA(2);
                    if ( (LA316_1==DOT) ) {
                        alt316=1;
                    }
                    }
                    break;
                case EVENTS:
                    {
                    alt316=1;
                    }
                    break;
                case TICKED_STRING_LITERAL:
                    {
                    int LA316_3 = input.LA(2);
                    if ( (LA316_3==DOT) ) {
                        alt316=1;
                    }
                    }
                    break;
            }
            switch (alt316) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass11396);
                    classIdentifierNonGreedy839=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy839.getTree());
                    DOT840=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass11398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT840);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass11402);
            funcIdent841=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent841.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass11406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt317=2;
            int LA317_0 = input.LA(1);
            if ( (LA317_0==WINDOW||LA317_0==BETWEEN||LA317_0==ESCAPE||(LA317_0>=NOT_EXPR && LA317_0<=EVERY_EXPR)||LA317_0==WHERE||(LA317_0>=SUM && LA317_0<=COUNT)||LA317_0==CASE||LA317_0==OUTER||(LA317_0>=JOIN && LA317_0<=FULL)||(LA317_0>=DISTINCT && LA317_0<=ALL)||(LA317_0>=EVENTS && LA317_0<=LAST)||LA317_0==ISTREAM||(LA317_0>=UNIDIRECTIONAL && LA317_0<=CURRENT_TIMESTAMP)||(LA317_0>=SNAPSHOT && LA317_0<=INDEX)||(LA317_0>=BOOLEAN_TRUE && LA317_0<=VALUE_NULL)||(LA317_0>=DEFINE && LA317_0<=MATCHED)||LA317_0==NEWKW||LA317_0==CONTEXT||LA317_0==NUM_DOUBLE||LA317_0==LBRACK||(LA317_0>=IDENT && LA317_0<=LPAREN)||LA317_0==LCURLY||LA317_0==STAR||LA317_0==QUESTION||(LA317_0>=PLUS && LA317_0<=QUOTED_STRING_LITERAL)||LA317_0==MINUS||LA317_0==NUM_INT||(LA317_0>=TICKED_STRING_LITERAL && LA317_0<=NUM_FLOAT)) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass11409);
                    libFunctionArgs842=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs842.getTree());
                    }
                    break;
            }
            RPAREN843=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass11413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN843);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN846=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent844 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs845 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN846_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass11446);
            funcIdent844=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent844.getTree());
            int alt319=2;
            int LA319_0 = input.LA(1);
            if ( (LA319_0==LPAREN) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass11451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt318=2;
                    int LA318_0 = input.LA(1);
                    if ( (LA318_0==WINDOW||LA318_0==BETWEEN||LA318_0==ESCAPE||(LA318_0>=NOT_EXPR && LA318_0<=EVERY_EXPR)||LA318_0==WHERE||(LA318_0>=SUM && LA318_0<=COUNT)||LA318_0==CASE||LA318_0==OUTER||(LA318_0>=JOIN && LA318_0<=FULL)||(LA318_0>=DISTINCT && LA318_0<=ALL)||(LA318_0>=EVENTS && LA318_0<=LAST)||LA318_0==ISTREAM||(LA318_0>=UNIDIRECTIONAL && LA318_0<=CURRENT_TIMESTAMP)||(LA318_0>=SNAPSHOT && LA318_0<=INDEX)||(LA318_0>=BOOLEAN_TRUE && LA318_0<=VALUE_NULL)||(LA318_0>=DEFINE && LA318_0<=MATCHED)||LA318_0==NEWKW||LA318_0==CONTEXT||LA318_0==NUM_DOUBLE||LA318_0==LBRACK||(LA318_0>=IDENT && LA318_0<=LPAREN)||LA318_0==LCURLY||LA318_0==STAR||LA318_0==QUESTION||(LA318_0>=PLUS && LA318_0<=QUOTED_STRING_LITERAL)||LA318_0==MINUS||LA318_0==NUM_INT||(LA318_0>=TICKED_STRING_LITERAL && LA318_0<=NUM_FLOAT)) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass11454);
                            libFunctionArgs845=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs845.getTree());
                            }
                            break;
                    }
                    RPAREN846=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass11458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN846);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent847 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt320=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt320=1;
                }
                break;
            case MAX:
                {
                alt320=2;
                }
                break;
            case MIN:
                {
                alt320=3;
                }
                break;
            case WHERE:
                {
                alt320=4;
                }
                break;
            case SET:
                {
                alt320=5;
                }
                break;
            case AFTER:
                {
                alt320=6;
                }
                break;
            case BETWEEN:
                {
                alt320=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);
                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent11490);
                    escapableIdent847=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent847.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent11497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent11509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent11521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent11533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent11545); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent11556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL848=null;
        Token DISTINCT849=null;
        Token COMMA851=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem850 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem852 = null;
        CommonTree ALL848_tree=null;
        CommonTree DISTINCT849_tree=null;
        CommonTree COMMA851_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt321=3;
            int LA321_0 = input.LA(1);
            if ( (LA321_0==ALL) ) {
                alt321=1;
            }
            else if ( (LA321_0==DISTINCT) ) {
                alt321=2;
            }
            switch (alt321) {
                case 1 :
                    {
                    ALL848=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs11573); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT849=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs11578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT849_tree = (CommonTree)adaptor.create(DISTINCT849);
                    adaptor.addChild(root_0, DISTINCT849_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11582);
            libFunctionArgItem850=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem850.getTree());
            loop322:
            do {
                int alt322=2;
                int LA322_0 = input.LA(1);
                if ( (LA322_0==COMMA) ) {
                    alt322=1;
                }
                switch (alt322) {
            	case 1 :
            	    {
            	    COMMA851=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs11585); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11588);
            	    libFunctionArgItem852=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem852.getTree());
            	    }
            	    break;
            	default :
            	    break loop322;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl853 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime854 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt323=2;
            int LA323_0 = input.LA(1);
            if ( (LA323_0==IDENT) ) {
                int LA323_1 = input.LA(2);
                if ( (LA323_1==GOES) ) {
                    alt323=1;
                }
            }
            else if ( (LA323_0==LPAREN) ) {
                int LA323_2 = input.LA(2);
                if ( (LA323_2==IDENT) ) {
                    int LA323_150 = input.LA(3);
                    if ( (LA323_150==COMMA) ) {
                        alt323=1;
                    }
                    else if ( (LA323_150==RPAREN) ) {
                        int LA323_213 = input.LA(4);
                        if ( (LA323_213==GOES) ) {
                            alt323=1;
                        }
                    }
                }
            }
            switch (alt323) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem11602);
                    expressionLambdaDecl853=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl853.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem11605);
            expressionWithTime854=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime854.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR856=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr855 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr857 = null;
        CommonTree AND_EXPR856_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11616);
            concatenationExpr855=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr855.getTree());
            AND_EXPR856=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList11618); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11621);
            concatenationExpr857=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr857.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression858 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression11649);
            followedByExpression858=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression858.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression859 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat860 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression11668);
            orExpression859=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression859.getTree());
            loop324:
            do {
                int alt324=2;
                int LA324_0 = input.LA(1);
                if ( (LA324_0==FOLLOWED_BY||LA324_0==FOLLOWMAX_BEGIN) ) {
                    alt324=1;
                }
                switch (alt324) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression11671);
            	    followedByRepeat860=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat860.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop324;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END862=null;
        EsperEPL2GrammarParser.expression_return expression861 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression863 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END862_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt325=2;
            int LA325_0 = input.LA(1);
            if ( (LA325_0==FOLLOWED_BY) ) {
                alt325=1;
            }
            else if ( (LA325_0==FOLLOWMAX_BEGIN) ) {
                alt325=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 325, 0, input);
                throw nvae;
            }
            switch (alt325) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat11724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat11731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat11733);
                    expression861=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression861.getTree());
                    FOLLOWMAX_END862=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat11735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END862);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat11739);
            orExpression863=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression863.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression864 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression865 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression11768);
            andExpression864=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression864.getTree());
            loop326:
            do {
                int alt326=2;
                int LA326_0 = input.LA(1);
                if ( (LA326_0==OR_EXPR) ) {
                    alt326=1;
                }
                switch (alt326) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression11773); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression11775);
            	    andExpression865=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression865.getTree());
            	    }
            	    break;
            	default :
            	    break loop326;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression866 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression867 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression11807);
            matchUntilExpression866=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression866.getTree());
            loop327:
            do {
                int alt327=2;
                int LA327_0 = input.LA(1);
                if ( (LA327_0==AND_EXPR) ) {
                    alt327=1;
                }
                switch (alt327) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression11812); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression11814);
            	    matchUntilExpression867=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression867.getTree());
            	    }
            	    break;
            	default :
            	    break loop327;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression868 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression869 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt328=2;
            int LA328_0 = input.LA(1);
            if ( (LA328_0==LBRACK) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression11849);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11853);
            qualifyExpression868=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression868.getTree());
            int alt329=2;
            int LA329_0 = input.LA(1);
            if ( (LA329_0==UNTIL) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression11858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11860);
                    qualifyExpression869=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression869.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList870 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix871 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt332=2;
            int LA332_0 = input.LA(1);
            if ( ((LA332_0>=NOT_EXPR && LA332_0<=EVERY_DISTINCT_EXPR)) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    {
                    int alt330=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt330=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt330=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt330=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 330, 0, input);
                        throw nvae;
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression11925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression11931); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11937); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression11939);
                            distinctExpressionList870=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList870.getTree());
                            }
                            break;
                    }
                    int alt331=2;
                    int LA331_0 = input.LA(1);
                    if ( (LA331_0==LBRACK) ) {
                        alt331=1;
                    }
                    switch (alt331) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression11945);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression11954);
            guardPostFix871=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix871.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN872=null;
        Token COMMA874=null;
        Token RPAREN876=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom873 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom875 = null;
        CommonTree LPAREN872_tree=null;
        CommonTree COMMA874_tree=null;
        CommonTree RPAREN876_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN872=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList12069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN872);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList12071);
            distinctExpressionAtom873=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom873.getTree());
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);
                if ( (LA333_0==COMMA) ) {
                    alt333=1;
                }
                switch (alt333) {
            	case 1 :
            	    {
            	    COMMA874=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList12074); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA874);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList12076);
            	    distinctExpressionAtom875=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom875.getTree());
            	    }
            	    break;
            	default :
            	    break loop333;
                }
            } while (true);
            RPAREN876=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList12080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN876);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime877 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom12103);
            expressionWithTime877=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime877.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN880=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression878 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression879 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression881 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression882 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN880_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt334=2;
            int LA334_0 = input.LA(1);
            if ( (LA334_0==EVENTS||LA334_0==IDENT||LA334_0==TICKED_STRING_LITERAL) ) {
                alt334=1;
            }
            else if ( (LA334_0==LPAREN) ) {
                alt334=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);
                throw nvae;
            }
            switch (alt334) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix12118);
                    atomicExpression878=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression878.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix12124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix12126);
                    patternExpression879=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression879.getTree());
                    RPAREN880=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix12128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN880);
                    }
                    break;
            }
            int alt335=3;
            int LA335_0 = input.LA(1);
            if ( (LA335_0==WHERE) ) {
                alt335=1;
            }
            else if ( (LA335_0==WHILE) ) {
                alt335=2;
            }
            switch (alt335) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix12135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix12137);
                    guardWhereExpression881=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression881.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix12145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix12147);
                    guardWhileExpression882=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression882.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression883 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression884 = null;
        try {
            int alt336=2;
            int LA336_0 = input.LA(1);
            if ( (LA336_0==IDENT) ) {
                int LA336_1 = input.LA(2);
                if ( (LA336_1==COLON) ) {
                    alt336=1;
                }
                else if ( (LA336_1==EOF||(LA336_1>=OR_EXPR && LA336_1<=AND_EXPR)||LA336_1==WHERE||LA336_1==UNTIL||LA336_1==WHILE||(LA336_1>=LBRACK && LA336_1<=RBRACK)||(LA336_1>=LPAREN && LA336_1<=RPAREN)||LA336_1==ATCHAR||(LA336_1>=EQUALS && LA336_1<=DOT)||LA336_1==FOLLOWED_BY||LA336_1==FOLLOWMAX_BEGIN) ) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==EVENTS||LA336_0==TICKED_STRING_LITERAL) ) {
                alt336=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);
                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression12209);
                    observerExpression883=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression883.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression12213);
                    patternFilterExpression884=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression884.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON885=null;
        Token LPAREN886=null;
        Token RPAREN888=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList887 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON885_tree=null;
        CommonTree LPAREN886_tree=null;
        CommonTree RPAREN888_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON885=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression12230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON885);
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==IDENT) ) {
                alt337=1;
            }
            else if ( (LA337_0==AT) ) {
                alt337=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);
                throw nvae;
            }
            switch (alt337) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression12241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN886=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression12244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN886);
            int alt338=2;
            int LA338_0 = input.LA(1);
            if ( (LA338_0==WINDOW||LA338_0==BETWEEN||LA338_0==ESCAPE||(LA338_0>=NOT_EXPR && LA338_0<=EVERY_EXPR)||LA338_0==WHERE||(LA338_0>=SUM && LA338_0<=COUNT)||LA338_0==CASE||LA338_0==OUTER||(LA338_0>=JOIN && LA338_0<=FULL)||(LA338_0>=EVENTS && LA338_0<=LAST)||LA338_0==ISTREAM||(LA338_0>=UNIDIRECTIONAL && LA338_0<=CURRENT_TIMESTAMP)||(LA338_0>=SNAPSHOT && LA338_0<=INDEX)||(LA338_0>=BOOLEAN_TRUE && LA338_0<=VALUE_NULL)||(LA338_0>=DEFINE && LA338_0<=MATCHED)||LA338_0==NEWKW||LA338_0==CONTEXT||LA338_0==NUM_DOUBLE||LA338_0==LBRACK||(LA338_0>=IDENT && LA338_0<=LPAREN)||LA338_0==LCURLY||LA338_0==STAR||LA338_0==QUESTION||(LA338_0>=PLUS && LA338_0<=QUOTED_STRING_LITERAL)||LA338_0==MINUS||LA338_0==NUM_INT||(LA338_0>=TICKED_STRING_LITERAL && LA338_0<=NUM_FLOAT)) ) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression12246);
                    expressionWithTimeList887=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList887.getTree());
                    }
                    break;
            }
            RPAREN888=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression12249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN888);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT889=null;
        Token COLON890=null;
        Token IDENT891=null;
        Token LPAREN892=null;
        Token RPAREN894=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList893 = null;
        CommonTree IDENT889_tree=null;
        CommonTree COLON890_tree=null;
        CommonTree IDENT891_tree=null;
        CommonTree LPAREN892_tree=null;
        CommonTree RPAREN894_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT889=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT889_tree = (CommonTree)adaptor.create(IDENT889);
            adaptor.addChild(root_0, IDENT889_tree);
            }
            COLON890=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression12300); if (state.failed) return retval;
            IDENT891=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT891_tree = (CommonTree)adaptor.create(IDENT891);
            adaptor.addChild(root_0, IDENT891_tree);
            }
            LPAREN892=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression12305); if (state.failed) return retval;
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==WINDOW||LA339_0==BETWEEN||LA339_0==ESCAPE||(LA339_0>=NOT_EXPR && LA339_0<=EVERY_EXPR)||LA339_0==WHERE||(LA339_0>=SUM && LA339_0<=COUNT)||LA339_0==CASE||LA339_0==OUTER||(LA339_0>=JOIN && LA339_0<=FULL)||(LA339_0>=EVENTS && LA339_0<=LAST)||LA339_0==ISTREAM||(LA339_0>=UNIDIRECTIONAL && LA339_0<=CURRENT_TIMESTAMP)||(LA339_0>=SNAPSHOT && LA339_0<=INDEX)||(LA339_0>=BOOLEAN_TRUE && LA339_0<=VALUE_NULL)||(LA339_0>=DEFINE && LA339_0<=MATCHED)||LA339_0==NEWKW||LA339_0==CONTEXT||LA339_0==NUM_DOUBLE||LA339_0==LBRACK||(LA339_0>=IDENT && LA339_0<=LPAREN)||LA339_0==LCURLY||LA339_0==STAR||LA339_0==QUESTION||(LA339_0>=PLUS && LA339_0<=QUOTED_STRING_LITERAL)||LA339_0==MINUS||LA339_0==NUM_INT||(LA339_0>=TICKED_STRING_LITERAL && LA339_0<=NUM_FLOAT)) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression12309);
                    expressionWithTimeList893=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList893.getTree());
                    }
                    break;
            }
            RPAREN894=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression12313); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN895=null;
        Token RPAREN897=null;
        EsperEPL2GrammarParser.expression_return expression896 = null;
        CommonTree LPAREN895_tree=null;
        CommonTree RPAREN897_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN895=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression12326); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression12329);
            expression896=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression896.getTree());
            RPAREN897=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression12331); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK898=null;
        Token RBRACK902=null;
        EsperEPL2GrammarParser.expression_return expression899 = null;
        EsperEPL2GrammarParser.expression_return expression900 = null;
        EsperEPL2GrammarParser.expression_return expression901 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK898_tree=null;
        CommonTree RBRACK902_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK898=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange12352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK898);
            int alt342=2;
            int LA342_0 = input.LA(1);
            if ( (LA342_0==WINDOW||LA342_0==BETWEEN||LA342_0==ESCAPE||(LA342_0>=NOT_EXPR && LA342_0<=EVERY_EXPR)||LA342_0==WHERE||(LA342_0>=SUM && LA342_0<=COUNT)||LA342_0==CASE||LA342_0==OUTER||(LA342_0>=JOIN && LA342_0<=FULL)||(LA342_0>=EVENTS && LA342_0<=LAST)||LA342_0==ISTREAM||(LA342_0>=UNIDIRECTIONAL && LA342_0<=CURRENT_TIMESTAMP)||(LA342_0>=SNAPSHOT && LA342_0<=INDEX)||(LA342_0>=BOOLEAN_TRUE && LA342_0<=VALUE_NULL)||(LA342_0>=DEFINE && LA342_0<=MATCHED)||LA342_0==NEWKW||LA342_0==CONTEXT||LA342_0==NUM_DOUBLE||(LA342_0>=IDENT && LA342_0<=LPAREN)||LA342_0==LCURLY||LA342_0==QUESTION||(LA342_0>=PLUS && LA342_0<=QUOTED_STRING_LITERAL)||LA342_0==MINUS||LA342_0==NUM_INT||(LA342_0>=TICKED_STRING_LITERAL && LA342_0<=NUM_FLOAT)) ) {
                alt342=1;
            }
            else if ( (LA342_0==COLON) ) {
                alt342=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);
                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange12359);
                    expression899=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression899.getTree());
                    int alt341=2;
                    int LA341_0 = input.LA(1);
                    if ( (LA341_0==COLON) ) {
                        alt341=1;
                    }
                    switch (alt341) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12364); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt340=2;
                            int LA340_0 = input.LA(1);
                            if ( (LA340_0==WINDOW||LA340_0==BETWEEN||LA340_0==ESCAPE||(LA340_0>=NOT_EXPR && LA340_0<=EVERY_EXPR)||LA340_0==WHERE||(LA340_0>=SUM && LA340_0<=COUNT)||LA340_0==CASE||LA340_0==OUTER||(LA340_0>=JOIN && LA340_0<=FULL)||(LA340_0>=EVENTS && LA340_0<=LAST)||LA340_0==ISTREAM||(LA340_0>=UNIDIRECTIONAL && LA340_0<=CURRENT_TIMESTAMP)||(LA340_0>=SNAPSHOT && LA340_0<=INDEX)||(LA340_0>=BOOLEAN_TRUE && LA340_0<=VALUE_NULL)||(LA340_0>=DEFINE && LA340_0<=MATCHED)||LA340_0==NEWKW||LA340_0==CONTEXT||LA340_0==NUM_DOUBLE||(LA340_0>=IDENT && LA340_0<=LPAREN)||LA340_0==LCURLY||LA340_0==QUESTION||(LA340_0>=PLUS && LA340_0<=QUOTED_STRING_LITERAL)||LA340_0==MINUS||LA340_0==NUM_INT||(LA340_0>=TICKED_STRING_LITERAL && LA340_0<=NUM_FLOAT)) ) {
                                alt340=1;
                            }
                            switch (alt340) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange12367);
                                    expression900=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression900.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange12389);
                    expression901=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression901.getTree());
                    }
                    break;
            }
            RBRACK902=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange12400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK902);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS903=null;
        Token LPAREN905=null;
        Token RPAREN907=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier904 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList906 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression908 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS903_tree=null;
        CommonTree LPAREN905_tree=null;
        CommonTree RPAREN907_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt343=2;
            int LA343_0 = input.LA(1);
            if ( (LA343_0==IDENT) ) {
                int LA343_1 = input.LA(2);
                if ( (LA343_1==EQUALS) ) {
                    alt343=1;
                }
            }
            switch (alt343) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression12487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS903=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression12489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS903);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression12498);
            classIdentifier904=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier904.getTree());
            int alt345=2;
            int LA345_0 = input.LA(1);
            if ( (LA345_0==LPAREN) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    {
                    LPAREN905=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression12509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN905);
                    int alt344=2;
                    int LA344_0 = input.LA(1);
                    if ( (LA344_0==WINDOW||LA344_0==BETWEEN||LA344_0==ESCAPE||(LA344_0>=NOT_EXPR && LA344_0<=EVERY_EXPR)||LA344_0==WHERE||(LA344_0>=SUM && LA344_0<=COUNT)||LA344_0==CASE||LA344_0==OUTER||(LA344_0>=JOIN && LA344_0<=FULL)||(LA344_0>=EVENTS && LA344_0<=LAST)||LA344_0==ISTREAM||(LA344_0>=UNIDIRECTIONAL && LA344_0<=CURRENT_TIMESTAMP)||(LA344_0>=SNAPSHOT && LA344_0<=INDEX)||(LA344_0>=BOOLEAN_TRUE && LA344_0<=VALUE_NULL)||(LA344_0>=DEFINE && LA344_0<=MATCHED)||LA344_0==NEWKW||LA344_0==CONTEXT||LA344_0==NUM_DOUBLE||(LA344_0>=IDENT && LA344_0<=LPAREN)||LA344_0==LCURLY||LA344_0==QUESTION||(LA344_0>=PLUS && LA344_0<=QUOTED_STRING_LITERAL)||LA344_0==MINUS||LA344_0==NUM_INT||(LA344_0>=TICKED_STRING_LITERAL && LA344_0<=NUM_FLOAT)) ) {
                        alt344=1;
                    }
                    switch (alt344) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression12511);
                            expressionList906=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList906.getTree());
                            }
                            break;
                    }
                    RPAREN907=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression12514); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN907);
                    }
                    break;
            }
            int alt346=2;
            int LA346_0 = input.LA(1);
            if ( (LA346_0==LBRACK) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression12526);
                    propertyExpression908=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression908.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic909 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic910 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12571);
            propertyExpressionAtomic909=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic909.getTree());
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);
                if ( (LA347_0==LBRACK) ) {
                    alt347=1;
                }
                switch (alt347) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12574);
            	    propertyExpressionAtomic910=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic910.getTree());
            	    }
            	    break;
            	default :
            	    break loop347;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK911=null;
        Token AS915=null;
        Token IDENT916=null;
        Token WHERE917=null;
        Token RBRACK919=null;
        EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect912 = null;
        EsperEPL2GrammarParser.expression_return expression913 = null;
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation914 = null;
        EsperEPL2GrammarParser.expression_return expression918 = null;
        CommonTree LBRACK911_tree=null;
        CommonTree AS915_tree=null;
        CommonTree IDENT916_tree=null;
        CommonTree WHERE917_tree=null;
        CommonTree RBRACK919_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyExpressionAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAnnotation");
        RewriteRuleSubtreeStream stream_propertyExpressionSelect=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionSelect");
        try {
            {
            LBRACK911=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic12604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK911);
            int alt348=2;
            int LA348_0 = input.LA(1);
            if ( (LA348_0==SELECT) ) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic12606);
                    propertyExpressionSelect912=propertyExpressionSelect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionSelect.add(propertyExpressionSelect912.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12609);
            expression913=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression913.getTree());
            int alt349=2;
            int LA349_0 = input.LA(1);
            if ( (LA349_0==ATCHAR) ) {
                alt349=1;
            }
            switch (alt349) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic12611);
                    propertyExpressionAnnotation914=propertyExpressionAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionAnnotation.add(propertyExpressionAnnotation914.getTree());
                    }
                    break;
            }
            int alt350=2;
            int LA350_0 = input.LA(1);
            if ( (LA350_0==AS) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    {
                    AS915=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic12615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS915);
                    IDENT916=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic12617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT916);
                    }
                    break;
            }
            int alt351=2;
            int LA351_0 = input.LA(1);
            if ( (LA351_0==WHERE) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    {
                    WHERE917=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic12622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE917);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12624);
                    expression918=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression918.getTree());
                    }
                    break;
            }
            RBRACK919=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic12628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK919);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertyExpressionSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionSelect.nextTree());
                }
                stream_propertyExpressionSelect.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_propertyExpressionAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAnnotation.nextTree());
                }
                stream_propertyExpressionAnnotation.reset();
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionSelect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionSelect_return retval = new EsperEPL2GrammarParser.propertyExpressionSelect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT920=null;
        Token FROM922=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList921 = null;
        CommonTree SELECT920_tree=null;
        CommonTree FROM922_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        try {
            {
            SELECT920=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionSelect12686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT920);
            pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionSelect12688);
            propertySelectionList921=propertySelectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList921.getTree());
            FROM922=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionSelect12690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM922);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return retval = new EsperEPL2GrammarParser.propertyExpressionAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token v=null;
        Token ATCHAR923=null;
        Token LPAREN924=null;
        Token RPAREN925=null;
        CommonTree n_tree=null;
        CommonTree v_tree=null;
        CommonTree ATCHAR923_tree=null;
        CommonTree LPAREN924_tree=null;
        CommonTree RPAREN925_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        try {
            {
            ATCHAR923=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_propertyExpressionAnnotation12713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR923);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            {
            LPAREN924=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_propertyExpressionAnnotation12720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN924);
            v=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(v);
            RPAREN925=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_propertyExpressionAnnotation12726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN925);
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_v.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA927=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement926 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement928 = null;
        CommonTree COMMA927_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12756);
            propertySelectionListElement926=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement926.getTree());
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);
                if ( (LA352_0==COMMA) ) {
                    alt352=1;
                }
                switch (alt352) {
            	case 1 :
            	    {
            	    COMMA927=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList12759); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12762);
            	    propertySelectionListElement928=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement928.getTree());
            	    }
            	    break;
            	default :
            	    break loop352;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS931=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector929 = null;
        EsperEPL2GrammarParser.expression_return expression930 = null;
        CommonTree s_tree=null;
        CommonTree AS931_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt354=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt354=1;
                }
                break;
            case IDENT:
                {
                int LA354_2 = input.LA(2);
                if ( (LA354_2==DOT) ) {
                    int LA354_78 = input.LA(3);
                    if ( (LA354_78==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt354=2;
                    }
                    else if ( (LA354_78==WINDOW||LA354_78==BETWEEN||LA354_78==ESCAPE||LA354_78==EVERY_EXPR||LA354_78==WHERE||(LA354_78>=SUM && LA354_78<=COUNT)||LA354_78==OUTER||(LA354_78>=JOIN && LA354_78<=FULL)||(LA354_78>=EVENTS && LA354_78<=LAST)||(LA354_78>=UNIDIRECTIONAL && LA354_78<=PREVIOUSTAIL)||LA354_78==PRIOR||(LA354_78>=WEEKDAY && LA354_78<=CAST)||(LA354_78>=SNAPSHOT && LA354_78<=INDEX)||(LA354_78>=DEFINE && LA354_78<=MATCHED)||LA354_78==CONTEXT||LA354_78==IDENT||LA354_78==TICKED_STRING_LITERAL) ) {
                        alt354=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 354, 78, input);
                        throw nvae;
                    }
                }
                else if ( ((LA354_2>=IN_SET && LA354_2<=REGEXP)||(LA354_2>=OR_EXPR && LA354_2<=NOT_EXPR)||LA354_2==AS||LA354_2==FROM||LA354_2==IS||LA354_2==LBRACK||LA354_2==LPAREN||(LA354_2>=COMMA && LA354_2<=EQUALS)||LA354_2==STAR||(LA354_2>=LT && LA354_2<=PLUS)||(LA354_2>=BAND && LA354_2<=MOD)||LA354_2==ESCAPECHAR) ) {
                    alt354=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 354, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt354=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);
                throw nvae;
            }
            switch (alt354) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement12788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement12804);
                    propertyStreamSelector929=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector929.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement12809);
                    expression930=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression930.getTree());
                    int alt353=2;
                    int LA353_0 = input.LA(1);
                    if ( (LA353_0==AS) ) {
                        alt353=1;
                    }
                    switch (alt353) {
                        case 1 :
                            {
                            AS931=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement12812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS931);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement12816);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT932=null;
        Token STAR933=null;
        Token AS934=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT932_tree=null;
        CommonTree STAR933_tree=null;
        CommonTree AS934_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT932=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector12862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT932);
            STAR933=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector12864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR933);
            int alt355=2;
            int LA355_0 = input.LA(1);
            if ( (LA355_0==AS) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    {
                    AS934=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector12867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS934);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS935=null;
        Token LPAREN937=null;
        Token RPAREN939=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier936 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList938 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression940 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation941 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS935_tree=null;
        CommonTree LPAREN937_tree=null;
        CommonTree RPAREN939_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt356=2;
            int LA356_0 = input.LA(1);
            if ( (LA356_0==IDENT) ) {
                int LA356_1 = input.LA(2);
                if ( (LA356_1==EQUALS) ) {
                    alt356=1;
                }
            }
            switch (alt356) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression12918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS935=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression12920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS935);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression12929);
            classIdentifier936=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier936.getTree());
            int alt358=2;
            int LA358_0 = input.LA(1);
            if ( (LA358_0==LPAREN) ) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    {
                    LPAREN937=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression12940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN937);
                    int alt357=2;
                    int LA357_0 = input.LA(1);
                    if ( (LA357_0==WINDOW||LA357_0==BETWEEN||LA357_0==ESCAPE||(LA357_0>=NOT_EXPR && LA357_0<=EVERY_EXPR)||LA357_0==WHERE||(LA357_0>=SUM && LA357_0<=COUNT)||LA357_0==CASE||LA357_0==OUTER||(LA357_0>=JOIN && LA357_0<=FULL)||(LA357_0>=EVENTS && LA357_0<=LAST)||LA357_0==ISTREAM||(LA357_0>=UNIDIRECTIONAL && LA357_0<=CURRENT_TIMESTAMP)||(LA357_0>=SNAPSHOT && LA357_0<=INDEX)||(LA357_0>=BOOLEAN_TRUE && LA357_0<=VALUE_NULL)||(LA357_0>=DEFINE && LA357_0<=MATCHED)||LA357_0==NEWKW||LA357_0==CONTEXT||LA357_0==NUM_DOUBLE||(LA357_0>=IDENT && LA357_0<=LPAREN)||LA357_0==LCURLY||LA357_0==QUESTION||(LA357_0>=PLUS && LA357_0<=QUOTED_STRING_LITERAL)||LA357_0==MINUS||LA357_0==NUM_INT||(LA357_0>=TICKED_STRING_LITERAL && LA357_0<=NUM_FLOAT)) ) {
                        alt357=1;
                    }
                    switch (alt357) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression12942);
                            expressionList938=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList938.getTree());
                            }
                            break;
                    }
                    RPAREN939=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression12945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN939);
                    }
                    break;
            }
            int alt359=2;
            int LA359_0 = input.LA(1);
            if ( (LA359_0==LBRACK) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression12957);
                    propertyExpression940=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression940.getTree());
                    }
                    break;
            }
            int alt360=2;
            int LA360_0 = input.LA(1);
            if ( (LA360_0==ATCHAR) ) {
                alt360=1;
            }
            switch (alt360) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression12968);
                    patternFilterAnnotation941=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation941.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR942=null;
        Token LPAREN943=null;
        Token RPAREN945=null;
        EsperEPL2GrammarParser.number_return number944 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR942_tree=null;
        CommonTree LPAREN943_tree=null;
        CommonTree RPAREN945_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR942=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation13020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR942);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation13024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt361=2;
            int LA361_0 = input.LA(1);
            if ( (LA361_0==LPAREN) ) {
                alt361=1;
            }
            switch (alt361) {
                case 1 :
                    {
                    LPAREN943=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation13027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN943);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation13029);
                    number944=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number944.getTree());
                    RPAREN945=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation13031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN945);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT946=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT946_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier13067);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);
                if ( (LA362_0==DOT) ) {
                    int LA362_28 = input.LA(2);
                    if ( (LA362_28==IDENT) ) {
                        int LA362_54 = input.LA(3);
                        if ( (LA362_54==EOF||LA362_54==CREATE||(LA362_54>=OR_EXPR && LA362_54<=AS)||LA362_54==SELECT||LA362_54==END||(LA362_54>=INNER && LA362_54<=ON)||(LA362_54>=GROUP && LA362_54<=HAVING)||(LA362_54>=OUTPUT && LA362_54<=EVENTS)||LA362_54==INSERT||LA362_54==ORDER||(LA362_54>=UNIDIRECTIONAL && LA362_54<=RETAININTERSECTION)||LA362_54==DELETE||LA362_54==SET||LA362_54==UNTIL||LA362_54==ROW_LIMIT_EXPR||(LA362_54>=UPDATE && LA362_54<=MATCH_RECOGNIZE)||(LA362_54>=FOR && LA362_54<=WHILE)||LA362_54==MERGE||LA362_54==EXPRESSIONDECL||LA362_54==CONTEXT||LA362_54==TERMINATED||(LA362_54>=LBRACK && LA362_54<=RPAREN)||(LA362_54>=LCURLY && LA362_54<=RCURLY)||(LA362_54>=ATCHAR && LA362_54<=COMMA)||LA362_54==DOT||(LA362_54>=FOLLOWED_BY && LA362_54<=GT)||LA362_54==FOLLOWMAX_BEGIN||LA362_54==TICKED_STRING_LITERAL) ) {
                            alt362=1;
                        }
                    }
                    else if ( (LA362_28==EVENTS||LA362_28==TICKED_STRING_LITERAL) ) {
                        alt362=1;
                    }
                }
                switch (alt362) {
            	case 1 :
            	    {
            	    DOT946=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier13086); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT946);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier13090);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop362;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT947=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT947_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy13135);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);
                if ( (LA363_0==EVENTS||LA363_0==IDENT||LA363_0==TICKED_STRING_LITERAL) ) {
                    alt363=2;
                }
                else if ( (LA363_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA363_5 = input.LA(3);
                        if ( (LA363_5==EVENTS||LA363_5==IDENT||LA363_5==DOT||LA363_5==TICKED_STRING_LITERAL) ) {
                            alt363=1;
                        }
                        else if ( (LA363_5==LPAREN) ) {
                            alt363=2;
                        }
                        }
                        break;
                    case EVENTS:
                        {
                        alt363=1;
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA363_7 = input.LA(3);
                        if ( (LA363_7==LPAREN) ) {
                            alt363=2;
                        }
                        else if ( (LA363_7==EVENTS||LA363_7==IDENT||LA363_7==DOT||LA363_7==TICKED_STRING_LITERAL) ) {
                            alt363=1;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt363=2;
                        }
                        break;
                    }
                }
                switch (alt363) {
            	case 1 :
            	    {
            	    DOT947=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy13170); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT947);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy13174);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop363;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA949=null;
        EsperEPL2GrammarParser.expression_return expression948 = null;
        EsperEPL2GrammarParser.expression_return expression950 = null;
        CommonTree COMMA949_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList13216);
            expression948=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression948.getTree());
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);
                if ( (LA364_0==COMMA) ) {
                    alt364=1;
                }
                switch (alt364) {
            	case 1 :
            	    {
            	    COMMA949=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13219); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList13222);
            	    expression950=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression950.getTree());
            	    }
            	    break;
            	default :
            	    break loop364;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA952=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast951 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast953 = null;
        CommonTree COMMA952_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13250);
            expressionWithTimeInclLast951=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast951.getTree());
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);
                if ( (LA365_0==COMMA) ) {
                    alt365=1;
                }
                switch (alt365) {
            	case 1 :
            	    {
            	    COMMA952=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList13253); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13256);
            	    expressionWithTimeInclLast953=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast953.getTree());
            	    }
            	    break;
            	default :
            	    break loop365;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand954 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod955 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable956 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand957 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand958 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator959 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator960 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList961 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar962 = null;
        try {
            int alt366=9;
            int LA366_0 = input.LA(1);
            if ( (LA366_0==LW) ) {
                int LA366_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt366=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt366=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==MINUS) ) {
                int LA366_2 = input.LA(2);
                if ( (LA366_2==NUM_INT) ) {
                    int LA366_116 = input.LA(3);
                    if ( (LA366_116==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==TIMEPERIOD_SECONDS) ) {
                        int LA366_516 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 516, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_116==TIMEPERIOD_SECOND) ) {
                        int LA366_517 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 517, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_116==TIMEPERIOD_SEC) ) {
                        int LA366_518 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 518, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_116==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_116==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_116==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_2==NUM_LONG) ) {
                    int LA366_117 = input.LA(3);
                    if ( (LA366_117==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_SECONDS) ) {
                        int LA366_540 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 540, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_117==TIMEPERIOD_SECOND) ) {
                        int LA366_541 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 541, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_117==TIMEPERIOD_SEC) ) {
                        int LA366_542 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 542, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_117==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_117==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_117==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 117, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_2==NUM_FLOAT) ) {
                    int LA366_118 = input.LA(3);
                    if ( (LA366_118==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==TIMEPERIOD_SECONDS) ) {
                        int LA366_600 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 600, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_118==TIMEPERIOD_SECOND) ) {
                        int LA366_601 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 601, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_118==TIMEPERIOD_SEC) ) {
                        int LA366_602 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 602, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_118==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_118==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_118==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 118, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_2==NUM_DOUBLE) ) {
                    int LA366_119 = input.LA(3);
                    if ( (LA366_119==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==TIMEPERIOD_SECONDS) ) {
                        int LA366_648 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 648, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_119==TIMEPERIOD_SECOND) ) {
                        int LA366_649 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 649, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_119==TIMEPERIOD_SEC) ) {
                        int LA366_650 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 650, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_119==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_119==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_119==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 119, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==FOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_2==USING) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA366_170 = input.LA(3);
                    if ( (LA366_170==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==TIMEPERIOD_SECONDS) ) {
                        int LA366_704 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 704, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_170==TIMEPERIOD_SECOND) ) {
                        int LA366_705 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 705, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_170==TIMEPERIOD_SEC) ) {
                        int LA366_706 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 706, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_170==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_170==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_170==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 170, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA366_171 = input.LA(3);
                    if ( (LA366_171==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_SECONDS) ) {
                        int LA366_728 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 728, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_171==TIMEPERIOD_SECOND) ) {
                        int LA366_729 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 729, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_171==TIMEPERIOD_SEC) ) {
                        int LA366_730 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 730, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_171==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_171==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_171==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 171, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA366_172 = input.LA(3);
                    if ( (LA366_172==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==TIMEPERIOD_SECONDS) ) {
                        int LA366_788 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 788, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_172==TIMEPERIOD_SECOND) ) {
                        int LA366_789 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 789, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_172==TIMEPERIOD_SEC) ) {
                        int LA366_790 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 790, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_172==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_172==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_172==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 172, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA366_173 = input.LA(3);
                    if ( (LA366_173==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==TIMEPERIOD_SECONDS) ) {
                        int LA366_836 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 836, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_173==TIMEPERIOD_SECOND) ) {
                        int LA366_837 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 837, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_173==TIMEPERIOD_SEC) ) {
                        int LA366_838 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt366=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt366=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 366, 838, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA366_173==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt366=3;
                    }
                    else if ( (LA366_173==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else if ( (LA366_173==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt366=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 173, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==NUM_INT) ) {
                int LA366_4 = input.LA(2);
                if ( (LA366_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt366=4;
                }
                else if ( (LA366_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt366=7;
                }
                else if ( (LA366_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt366=6;
                }
                else if ( (LA366_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==TIMEPERIOD_SECONDS) ) {
                    int LA366_211 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 211, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_4==TIMEPERIOD_SECOND) ) {
                    int LA366_212 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 212, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_4==TIMEPERIOD_SEC) ) {
                    int LA366_213 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 213, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==NUM_LONG) ) {
                int LA366_5 = input.LA(2);
                if ( (LA366_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt366=7;
                }
                else if ( (LA366_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt366=4;
                }
                else if ( (LA366_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt366=6;
                }
                else if ( (LA366_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_SECONDS) ) {
                    int LA366_238 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 238, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_5==TIMEPERIOD_SECOND) ) {
                    int LA366_239 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 239, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_5==TIMEPERIOD_SEC) ) {
                    int LA366_240 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 240, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==NUM_FLOAT) ) {
                int LA366_6 = input.LA(2);
                if ( (LA366_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==TIMEPERIOD_SECONDS) ) {
                    int LA366_295 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 295, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_6==TIMEPERIOD_SECOND) ) {
                    int LA366_296 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 296, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_6==TIMEPERIOD_SEC) ) {
                    int LA366_297 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 297, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt366=7;
                }
                else if ( (LA366_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt366=6;
                }
                else if ( (LA366_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt366=4;
                }
                else if ( (LA366_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==NUM_DOUBLE) ) {
                int LA366_7 = input.LA(2);
                if ( (LA366_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==TIMEPERIOD_SECONDS) ) {
                    int LA366_349 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 349, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_7==TIMEPERIOD_SECOND) ) {
                    int LA366_350 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 350, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_7==TIMEPERIOD_SEC) ) {
                    int LA366_351 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 351, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt366=6;
                }
                else if ( (LA366_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt366=4;
                }
                else if ( (LA366_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt366=7;
                }
                else if ( (LA366_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==IDENT) ) {
                int LA366_8 = input.LA(2);
                if ( (LA366_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==TIMEPERIOD_SECONDS) ) {
                    int LA366_402 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 402, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_8==TIMEPERIOD_SECOND) ) {
                    int LA366_403 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 403, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_8==TIMEPERIOD_SEC) ) {
                    int LA366_404 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 404, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt366=4;
                }
                else if ( (LA366_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt366=6;
                }
                else if ( (LA366_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt366=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==QUESTION) ) {
                int LA366_9 = input.LA(2);
                if ( (LA366_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt366=7;
                }
                else if ( (LA366_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt366=6;
                }
                else if ( (LA366_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==TIMEPERIOD_SECONDS) ) {
                    int LA366_461 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 461, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_9==TIMEPERIOD_SECOND) ) {
                    int LA366_462 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 462, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_9==TIMEPERIOD_SEC) ) {
                    int LA366_463 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt366=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt366=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 366, 463, input);
                        throw nvae;
                    }
                }
                else if ( (LA366_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt366=3;
                }
                else if ( (LA366_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt366=4;
                }
                else if ( (LA366_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else if ( (LA366_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt366=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==FOR) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==USING) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==ISTREAM) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt366=3;
            }
            else if ( (LA366_0==STAR) ) {
                int LA366_77 = input.LA(2);
                if ( (LA366_77==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt366=5;
                }
                else if ( (LA366_77==RPAREN||LA366_77==COMMA) ) {
                    alt366=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 366, 77, input);
                    throw nvae;
                }
            }
            else if ( (LA366_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt366=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 366, 0, input);
                throw nvae;
            }
            switch (alt366) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime13285);
                    lastWeekdayOperand954=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand954.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime13296);
                    timePeriod955=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod955.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime13307);
                    expressionQualifyable956=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable956.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime13318);
                    rangeOperand957=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand957.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime13330);
                    frequencyOperand958=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand958.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime13341);
                    lastOperator959=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator959.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime13353);
                    weekDayOperator960=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator960.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime13365);
                    numericParameterList961=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList961.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime13370);
                    numberSetStar962=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar962.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand963 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime964 = null;
        try {
            int alt367=2;
            int LA367_0 = input.LA(1);
            if ( (LA367_0==LAST) ) {
                int LA367_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt367=1;
                }
                else if ( (true) ) {
                    alt367=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==WINDOW||LA367_0==BETWEEN||LA367_0==ESCAPE||(LA367_0>=NOT_EXPR && LA367_0<=EVERY_EXPR)||LA367_0==WHERE||(LA367_0>=SUM && LA367_0<=COUNT)||LA367_0==CASE||LA367_0==OUTER||(LA367_0>=JOIN && LA367_0<=FULL)||(LA367_0>=EVENTS && LA367_0<=FIRST)||LA367_0==ISTREAM||(LA367_0>=UNIDIRECTIONAL && LA367_0<=CURRENT_TIMESTAMP)||(LA367_0>=SNAPSHOT && LA367_0<=INDEX)||(LA367_0>=BOOLEAN_TRUE && LA367_0<=VALUE_NULL)||(LA367_0>=DEFINE && LA367_0<=MATCHED)||LA367_0==NEWKW||LA367_0==CONTEXT||LA367_0==NUM_DOUBLE||LA367_0==LBRACK||(LA367_0>=IDENT && LA367_0<=LPAREN)||LA367_0==LCURLY||LA367_0==STAR||LA367_0==QUESTION||(LA367_0>=PLUS && LA367_0<=QUOTED_STRING_LITERAL)||LA367_0==MINUS||LA367_0==NUM_INT||(LA367_0>=TICKED_STRING_LITERAL && LA367_0<=NUM_FLOAT)) ) {
                alt367=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);
                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast13390);
                    lastOperand963=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand963.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast13395);
                    expressionWithTime964=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime964.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression965 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable13406);
            expression965=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression965.getTree());
            int alt368=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt368=1;
                    }
                    break;
                case DESC:
                    {
                    alt368=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt368=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt368=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt368=5;
                    }
                    break;
            }
            switch (alt368) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable13411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable13415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable13419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable13423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable13427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR966=null;
        CommonTree STAR966_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR966=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar13484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR966);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW967=null;
        CommonTree LW967_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW967=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand13504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW967_tree = (CommonTree)adaptor.create(LW967);
            root_0 = (CommonTree)adaptor.becomeRoot(LW967_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST968=null;
        CommonTree LAST968_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST968=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand13517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST968_tree = (CommonTree)adaptor.create(LAST968);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST968_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR969=null;
        Token DIV970=null;
        EsperEPL2GrammarParser.number_return number971 = null;
        EsperEPL2GrammarParser.substitution_return substitution972 = null;
        CommonTree i_tree=null;
        CommonTree STAR969_tree=null;
        CommonTree DIV970_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR969=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand13529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR969);
            DIV970=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand13531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV970);
            int alt369=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt369=1;
                }
                break;
            case IDENT:
                {
                alt369=2;
                }
                break;
            case QUESTION:
                {
                alt369=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);
                throw nvae;
            }
            switch (alt369) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand13534);
                    number971=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number971.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand13538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand13540);
                    substitution972=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution972.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON975=null;
        EsperEPL2GrammarParser.number_return number973 = null;
        EsperEPL2GrammarParser.substitution_return substitution974 = null;
        EsperEPL2GrammarParser.number_return number976 = null;
        EsperEPL2GrammarParser.substitution_return substitution977 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON975_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt370=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt370=1;
                }
                break;
            case IDENT:
                {
                alt370=2;
                }
                break;
            case QUESTION:
                {
                alt370=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 370, 0, input);
                throw nvae;
            }
            switch (alt370) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13589);
                    number973=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number973.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13595);
                    substitution974=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution974.getTree());
                    }
                    break;
            }
            COLON975=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand13598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON975);
            int alt371=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt371=1;
                }
                break;
            case IDENT:
                {
                alt371=2;
                }
                break;
            case QUESTION:
                {
                alt371=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 371, 0, input);
                throw nvae;
            }
            switch (alt371) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13601);
                    number976=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number976.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13607);
                    substitution977=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution977.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST980=null;
        EsperEPL2GrammarParser.number_return number978 = null;
        EsperEPL2GrammarParser.substitution_return substitution979 = null;
        CommonTree i_tree=null;
        CommonTree LAST980_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt372=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt372=1;
                }
                break;
            case IDENT:
                {
                alt372=2;
                }
                break;
            case QUESTION:
                {
                alt372=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);
                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator13721);
                    number978=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number978.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator13725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator13727);
                    substitution979=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution979.getTree());
                    }
                    break;
            }
            LAST980=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator13730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST980);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY983=null;
        EsperEPL2GrammarParser.number_return number981 = null;
        EsperEPL2GrammarParser.substitution_return substitution982 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY983_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt373=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt373=1;
                }
                break;
            case IDENT:
                {
                alt373=2;
                }
                break;
            case QUESTION:
                {
                alt373=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 373, 0, input);
                throw nvae;
            }
            switch (alt373) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator13778);
                    number981=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number981.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator13782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator13784);
                    substitution982=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution982.getTree());
                    }
                    break;
            }
            WEEKDAY983=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator13787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY983);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK984=null;
        Token COMMA986=null;
        Token RBRACK988=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter985 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter987 = null;
        CommonTree LBRACK984_tree=null;
        CommonTree COMMA986_tree=null;
        CommonTree RBRACK988_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK984=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList13834); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK984);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList13836);
            numericListParameter985=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter985.getTree());
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);
                if ( (LA374_0==COMMA) ) {
                    alt374=1;
                }
                switch (alt374) {
            	case 1 :
            	    {
            	    COMMA986=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList13839); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA986);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList13841);
            	    numericListParameter987=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter987.getTree());
            	    }
            	    break;
            	default :
            	    break loop374;
                }
            } while (true);
            RBRACK988=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList13845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK988);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand989 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand990 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant991 = null;
        try {
            int alt375=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA375_1 = input.LA(2);
                if ( (LA375_1==COLON) ) {
                    alt375=1;
                }
                else if ( (LA375_1==RBRACK||LA375_1==COMMA) ) {
                    alt375=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 375, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA375_2 = input.LA(2);
                if ( (LA375_2==RBRACK||LA375_2==COMMA) ) {
                    alt375=3;
                }
                else if ( (LA375_2==COLON) ) {
                    alt375=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 375, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA375_3 = input.LA(2);
                if ( (LA375_3==RBRACK||LA375_3==COMMA) ) {
                    alt375=3;
                }
                else if ( (LA375_3==COLON) ) {
                    alt375=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 375, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA375_4 = input.LA(2);
                if ( (LA375_4==COLON) ) {
                    alt375=1;
                }
                else if ( (LA375_4==RBRACK||LA375_4==COMMA) ) {
                    alt375=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 375, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt375=1;
                }
                break;
            case STAR:
                {
                alt375=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt375=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);
                throw nvae;
            }
            switch (alt375) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter13867);
                    rangeOperand989=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand989.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter13873);
                    frequencyOperand990=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand990.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter13878);
                    numberconstant991=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant991.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT993=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic992 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic994 = null;
        CommonTree DOT993_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13894);
            eventPropertyAtomic992=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic992.getTree());
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);
                if ( (LA376_0==DOT) ) {
                    alt376=1;
                }
                switch (alt376) {
            	case 1 :
            	    {
            	    DOT993=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty13897); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT993);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13899);
            	    eventPropertyAtomic994=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic994.getTree());
            	    }
            	    break;
            	default :
            	    break loop376;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK996=null;
        Token RPAREN997=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent995 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK996_tree=null;
        CommonTree RPAREN997_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13925);
            eventPropertyIdent995=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent995.getTree());
            int alt380=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt380=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt380=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt380=3;
                    }
                    break;
            }
            switch (alt380) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic13934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic13938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK996=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic13940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK996);
                    int alt377=2;
                    int LA377_0 = input.LA(1);
                    if ( (LA377_0==QUESTION) ) {
                        alt377=1;
                    }
                    switch (alt377) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13945); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic13959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt378=2;
                    int LA378_0 = input.LA(1);
                    if ( (LA378_0==STRING_LITERAL) ) {
                        alt378=1;
                    }
                    else if ( (LA378_0==QUOTED_STRING_LITERAL) ) {
                        alt378=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 378, 0, input);
                        throw nvae;
                    }
                    switch (alt378) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13964); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13970); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN997=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic13973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN997);
                    int alt379=2;
                    int LA379_0 = input.LA(1);
                    if ( (LA379_0==QUESTION) ) {
                        alt379=1;
                    }
                    switch (alt379) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13978); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR998=null;
        Token DOT999=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR998_tree=null;
        CommonTree DOT999_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent14115);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop382:
            do {
                int alt382=2;
                int LA382_0 = input.LA(1);
                if ( (LA382_0==ESCAPECHAR) ) {
                    alt382=1;
                }
                switch (alt382) {
            	case 1 :
            	    {
            	    ESCAPECHAR998=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent14127); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR998);
            	    DOT999=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent14129); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT999);
            	    int alt381=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case USING:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt381=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA381_5 = input.LA(2);
            	            if ( (LA381_5==EOF||(LA381_5>=IN_SET && LA381_5<=NOT_EXPR)||(LA381_5>=WHERE && LA381_5<=AS)||(LA381_5>=ELSE && LA381_5<=FROM)||(LA381_5>=INNER && LA381_5<=FULL)||LA381_5==IS||(LA381_5>=GROUP && LA381_5<=HAVING)||LA381_5==ALL||LA381_5==OUTPUT||LA381_5==INSERT||(LA381_5>=ORDER && LA381_5<=DESC)||LA381_5==PATTERN||(LA381_5>=TIMEPERIOD_SEC && LA381_5<=TIMEPERIOD_SECONDS)||LA381_5==ROW_LIMIT_EXPR||(LA381_5>=MATCH_RECOGNIZE && LA381_5<=MEASURES)||(LA381_5>=AFTER && LA381_5<=FOR)||(LA381_5>=LBRACK && LA381_5<=RBRACK)||(LA381_5>=LPAREN && LA381_5<=COLON)||LA381_5==RCURLY||(LA381_5>=ATCHAR && LA381_5<=STAR)||(LA381_5>=LT && LA381_5<=PLUS)||(LA381_5>=BAND && LA381_5<=MOD)||(LA381_5>=FOLLOWMAX_END && LA381_5<=ESCAPECHAR)) ) {
            	                alt381=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA381_25 = input.LA(2);
            	            if ( (LA381_25==LPAREN) ) {
            	                int LA381_180 = input.LA(3);
            	                if ( ((LA381_180>=STRING_LITERAL && LA381_180<=QUOTED_STRING_LITERAL)) ) {
            	                    alt381=1;
            	                }
            	            }
            	            else if ( (LA381_25==EOF||(LA381_25>=IN_SET && LA381_25<=NOT_EXPR)||(LA381_25>=WHERE && LA381_25<=AS)||(LA381_25>=ELSE && LA381_25<=FROM)||(LA381_25>=INNER && LA381_25<=FULL)||LA381_25==IS||(LA381_25>=GROUP && LA381_25<=HAVING)||LA381_25==ALL||LA381_25==OUTPUT||LA381_25==INSERT||(LA381_25>=ORDER && LA381_25<=DESC)||LA381_25==PATTERN||(LA381_25>=TIMEPERIOD_SEC && LA381_25<=TIMEPERIOD_SECONDS)||LA381_25==ROW_LIMIT_EXPR||(LA381_25>=MATCH_RECOGNIZE && LA381_25<=MEASURES)||(LA381_25>=AFTER && LA381_25<=FOR)||(LA381_25>=LBRACK && LA381_25<=RBRACK)||(LA381_25>=RPAREN && LA381_25<=COLON)||LA381_25==RCURLY||(LA381_25>=ATCHAR && LA381_25<=STAR)||(LA381_25>=LT && LA381_25<=PLUS)||(LA381_25>=BAND && LA381_25<=MOD)||(LA381_25>=FOLLOWMAX_END && LA381_25<=ESCAPECHAR)) ) {
            	                alt381=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA381_40 = input.LA(2);
            	            if ( (LA381_40==EOF||(LA381_40>=IN_SET && LA381_40<=NOT_EXPR)||(LA381_40>=WHERE && LA381_40<=AS)||(LA381_40>=ELSE && LA381_40<=FROM)||(LA381_40>=INNER && LA381_40<=FULL)||LA381_40==IS||(LA381_40>=GROUP && LA381_40<=HAVING)||LA381_40==ALL||LA381_40==OUTPUT||LA381_40==INSERT||(LA381_40>=ORDER && LA381_40<=DESC)||LA381_40==PATTERN||(LA381_40>=TIMEPERIOD_SEC && LA381_40<=TIMEPERIOD_SECONDS)||LA381_40==ROW_LIMIT_EXPR||(LA381_40>=MATCH_RECOGNIZE && LA381_40<=MEASURES)||(LA381_40>=AFTER && LA381_40<=FOR)||(LA381_40>=LBRACK && LA381_40<=RBRACK)||(LA381_40>=LPAREN && LA381_40<=COLON)||LA381_40==RCURLY||(LA381_40>=ATCHAR && LA381_40<=STAR)||(LA381_40>=LT && LA381_40<=PLUS)||(LA381_40>=BAND && LA381_40<=MOD)||(LA381_40>=FOLLOWMAX_END && LA381_40<=ESCAPECHAR)) ) {
            	                alt381=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA381_41 = input.LA(2);
            	            if ( (LA381_41==EOF||(LA381_41>=IN_SET && LA381_41<=NOT_EXPR)||(LA381_41>=WHERE && LA381_41<=AS)||(LA381_41>=ELSE && LA381_41<=FROM)||(LA381_41>=INNER && LA381_41<=FULL)||LA381_41==IS||(LA381_41>=GROUP && LA381_41<=HAVING)||LA381_41==ALL||LA381_41==OUTPUT||LA381_41==INSERT||(LA381_41>=ORDER && LA381_41<=DESC)||LA381_41==PATTERN||(LA381_41>=TIMEPERIOD_SEC && LA381_41<=TIMEPERIOD_SECONDS)||LA381_41==ROW_LIMIT_EXPR||(LA381_41>=MATCH_RECOGNIZE && LA381_41<=MEASURES)||(LA381_41>=AFTER && LA381_41<=FOR)||(LA381_41>=LBRACK && LA381_41<=RBRACK)||(LA381_41>=LPAREN && LA381_41<=COLON)||LA381_41==RCURLY||(LA381_41>=ATCHAR && LA381_41<=STAR)||(LA381_41>=LT && LA381_41<=PLUS)||(LA381_41>=BAND && LA381_41<=MOD)||(LA381_41>=FOLLOWMAX_END && LA381_41<=ESCAPECHAR)) ) {
            	                alt381=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA381_43 = input.LA(2);
            	            if ( (LA381_43==EOF||(LA381_43>=IN_SET && LA381_43<=NOT_EXPR)||(LA381_43>=WHERE && LA381_43<=AS)||(LA381_43>=ELSE && LA381_43<=FROM)||(LA381_43>=INNER && LA381_43<=FULL)||LA381_43==IS||(LA381_43>=GROUP && LA381_43<=HAVING)||LA381_43==ALL||LA381_43==OUTPUT||LA381_43==INSERT||(LA381_43>=ORDER && LA381_43<=DESC)||LA381_43==PATTERN||(LA381_43>=TIMEPERIOD_SEC && LA381_43<=TIMEPERIOD_SECONDS)||LA381_43==ROW_LIMIT_EXPR||(LA381_43>=MATCH_RECOGNIZE && LA381_43<=MEASURES)||(LA381_43>=AFTER && LA381_43<=FOR)||(LA381_43>=LBRACK && LA381_43<=RBRACK)||(LA381_43>=LPAREN && LA381_43<=COLON)||LA381_43==RCURLY||(LA381_43>=ATCHAR && LA381_43<=STAR)||(LA381_43>=LT && LA381_43<=PLUS)||(LA381_43>=BAND && LA381_43<=MOD)||(LA381_43>=FOLLOWMAX_END && LA381_43<=ESCAPECHAR)) ) {
            	                alt381=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA381_44 = input.LA(2);
            	            if ( (LA381_44==PATTERN) ) {
            	                int LA381_454 = input.LA(3);
            	                if ( (LA381_454==LPAREN) ) {
            	                    alt381=1;
            	                }
            	            }
            	            else if ( (LA381_44==EOF||(LA381_44>=IN_SET && LA381_44<=NOT_EXPR)||(LA381_44>=WHERE && LA381_44<=AS)||(LA381_44>=ELSE && LA381_44<=FROM)||(LA381_44>=INNER && LA381_44<=FULL)||LA381_44==IS||(LA381_44>=GROUP && LA381_44<=HAVING)||LA381_44==ALL||LA381_44==OUTPUT||LA381_44==INSERT||(LA381_44>=ORDER && LA381_44<=DESC)||(LA381_44>=TIMEPERIOD_SEC && LA381_44<=TIMEPERIOD_SECONDS)||LA381_44==ROW_LIMIT_EXPR||(LA381_44>=MATCH_RECOGNIZE && LA381_44<=MEASURES)||(LA381_44>=AFTER && LA381_44<=FOR)||(LA381_44>=LBRACK && LA381_44<=RBRACK)||(LA381_44>=LPAREN && LA381_44<=COLON)||LA381_44==RCURLY||(LA381_44>=ATCHAR && LA381_44<=STAR)||(LA381_44>=LT && LA381_44<=PLUS)||(LA381_44>=BAND && LA381_44<=MOD)||(LA381_44>=FOLLOWMAX_END && LA381_44<=ESCAPECHAR)) ) {
            	                alt381=1;
            	            }
            	            }
            	            break;
            	        case FOR:
            	            {
            	            int LA381_49 = input.LA(2);
            	            if ( (LA381_49==EOF||(LA381_49>=IN_SET && LA381_49<=NOT_EXPR)||(LA381_49>=WHERE && LA381_49<=AS)||(LA381_49>=ELSE && LA381_49<=FROM)||(LA381_49>=INNER && LA381_49<=FULL)||LA381_49==IS||(LA381_49>=GROUP && LA381_49<=HAVING)||LA381_49==ALL||LA381_49==OUTPUT||LA381_49==INSERT||(LA381_49>=ORDER && LA381_49<=DESC)||LA381_49==PATTERN||(LA381_49>=TIMEPERIOD_SEC && LA381_49<=TIMEPERIOD_SECONDS)||LA381_49==ROW_LIMIT_EXPR||(LA381_49>=MATCH_RECOGNIZE && LA381_49<=MEASURES)||(LA381_49>=AFTER && LA381_49<=FOR)||(LA381_49>=LBRACK && LA381_49<=RBRACK)||(LA381_49>=LPAREN && LA381_49<=COLON)||LA381_49==RCURLY||(LA381_49>=ATCHAR && LA381_49<=STAR)||(LA381_49>=LT && LA381_49<=PLUS)||(LA381_49>=BAND && LA381_49<=MOD)||(LA381_49>=FOLLOWMAX_END && LA381_49<=ESCAPECHAR)) ) {
            	                alt381=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt381) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent14133);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop382;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT1000=null;
        Token COUNT1001=null;
        Token ESCAPE1002=null;
        Token EVERY_EXPR1003=null;
        Token SUM1004=null;
        Token AVG1005=null;
        Token MAX1006=null;
        Token MIN1007=null;
        Token COALESCE1008=null;
        Token MEDIAN1009=null;
        Token STDDEV1010=null;
        Token AVEDEV1011=null;
        Token EVENTS1012=null;
        Token FIRST1013=null;
        Token LAST1014=null;
        Token WHILE1015=null;
        Token MERGE1016=null;
        Token MATCHED1017=null;
        Token UNIDIRECTIONAL1018=null;
        Token RETAINUNION1019=null;
        Token RETAININTERSECTION1020=null;
        Token UNTIL1021=null;
        Token PATTERN1022=null;
        Token SQL1023=null;
        Token METADATASQL1024=null;
        Token PREVIOUS1025=null;
        Token PREVIOUSTAIL1026=null;
        Token PRIOR1027=null;
        Token WEEKDAY1028=null;
        Token LW1029=null;
        Token INSTANCEOF1030=null;
        Token TYPEOF1031=null;
        Token CAST1032=null;
        Token SNAPSHOT1033=null;
        Token VARIABLE1034=null;
        Token INDEX1035=null;
        Token WINDOW1036=null;
        Token LEFT1037=null;
        Token RIGHT1038=null;
        Token OUTER1039=null;
        Token FULL1040=null;
        Token JOIN1041=null;
        Token DEFINE1042=null;
        Token PARTITION1043=null;
        Token MATCHES1044=null;
        Token CONTEXT1045=null;
        Token FOR1046=null;
        Token USING1047=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT1000_tree=null;
        CommonTree COUNT1001_tree=null;
        CommonTree ESCAPE1002_tree=null;
        CommonTree EVERY_EXPR1003_tree=null;
        CommonTree SUM1004_tree=null;
        CommonTree AVG1005_tree=null;
        CommonTree MAX1006_tree=null;
        CommonTree MIN1007_tree=null;
        CommonTree COALESCE1008_tree=null;
        CommonTree MEDIAN1009_tree=null;
        CommonTree STDDEV1010_tree=null;
        CommonTree AVEDEV1011_tree=null;
        CommonTree EVENTS1012_tree=null;
        CommonTree FIRST1013_tree=null;
        CommonTree LAST1014_tree=null;
        CommonTree WHILE1015_tree=null;
        CommonTree MERGE1016_tree=null;
        CommonTree MATCHED1017_tree=null;
        CommonTree UNIDIRECTIONAL1018_tree=null;
        CommonTree RETAINUNION1019_tree=null;
        CommonTree RETAININTERSECTION1020_tree=null;
        CommonTree UNTIL1021_tree=null;
        CommonTree PATTERN1022_tree=null;
        CommonTree SQL1023_tree=null;
        CommonTree METADATASQL1024_tree=null;
        CommonTree PREVIOUS1025_tree=null;
        CommonTree PREVIOUSTAIL1026_tree=null;
        CommonTree PRIOR1027_tree=null;
        CommonTree WEEKDAY1028_tree=null;
        CommonTree LW1029_tree=null;
        CommonTree INSTANCEOF1030_tree=null;
        CommonTree TYPEOF1031_tree=null;
        CommonTree CAST1032_tree=null;
        CommonTree SNAPSHOT1033_tree=null;
        CommonTree VARIABLE1034_tree=null;
        CommonTree INDEX1035_tree=null;
        CommonTree WINDOW1036_tree=null;
        CommonTree LEFT1037_tree=null;
        CommonTree RIGHT1038_tree=null;
        CommonTree OUTER1039_tree=null;
        CommonTree FULL1040_tree=null;
        CommonTree JOIN1041_tree=null;
        CommonTree DEFINE1042_tree=null;
        CommonTree PARTITION1043_tree=null;
        CommonTree MATCHES1044_tree=null;
        CommonTree CONTEXT1045_tree=null;
        CommonTree FOR1046_tree=null;
        CommonTree USING1047_tree=null;
        try {
            int alt383=50;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt383=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt383=2;
                }
                break;
            case AT:
                {
                alt383=3;
                }
                break;
            case COUNT:
                {
                alt383=4;
                }
                break;
            case ESCAPE:
                {
                alt383=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt383=6;
                }
                break;
            case SUM:
                {
                alt383=7;
                }
                break;
            case AVG:
                {
                alt383=8;
                }
                break;
            case MAX:
                {
                alt383=9;
                }
                break;
            case MIN:
                {
                alt383=10;
                }
                break;
            case COALESCE:
                {
                alt383=11;
                }
                break;
            case MEDIAN:
                {
                alt383=12;
                }
                break;
            case STDDEV:
                {
                alt383=13;
                }
                break;
            case AVEDEV:
                {
                alt383=14;
                }
                break;
            case EVENTS:
                {
                alt383=15;
                }
                break;
            case FIRST:
                {
                alt383=16;
                }
                break;
            case LAST:
                {
                alt383=17;
                }
                break;
            case WHILE:
                {
                alt383=18;
                }
                break;
            case MERGE:
                {
                alt383=19;
                }
                break;
            case MATCHED:
                {
                alt383=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt383=21;
                }
                break;
            case RETAINUNION:
                {
                alt383=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt383=23;
                }
                break;
            case UNTIL:
                {
                alt383=24;
                }
                break;
            case PATTERN:
                {
                alt383=25;
                }
                break;
            case SQL:
                {
                alt383=26;
                }
                break;
            case METADATASQL:
                {
                alt383=27;
                }
                break;
            case PREVIOUS:
                {
                alt383=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt383=29;
                }
                break;
            case PRIOR:
                {
                alt383=30;
                }
                break;
            case WEEKDAY:
                {
                alt383=31;
                }
                break;
            case LW:
                {
                alt383=32;
                }
                break;
            case INSTANCEOF:
                {
                alt383=33;
                }
                break;
            case TYPEOF:
                {
                alt383=34;
                }
                break;
            case CAST:
                {
                alt383=35;
                }
                break;
            case SNAPSHOT:
                {
                alt383=36;
                }
                break;
            case VARIABLE:
                {
                alt383=37;
                }
                break;
            case INDEX:
                {
                alt383=38;
                }
                break;
            case WINDOW:
                {
                alt383=39;
                }
                break;
            case LEFT:
                {
                alt383=40;
                }
                break;
            case RIGHT:
                {
                alt383=41;
                }
                break;
            case OUTER:
                {
                alt383=42;
                }
                break;
            case FULL:
                {
                alt383=43;
                }
                break;
            case JOIN:
                {
                alt383=44;
                }
                break;
            case DEFINE:
                {
                alt383=45;
                }
                break;
            case PARTITION:
                {
                alt383=46;
                }
                break;
            case MATCHES:
                {
                alt383=47;
                }
                break;
            case CONTEXT:
                {
                alt383=48;
                }
                break;
            case FOR:
                {
                alt383=49;
                }
                break;
            case USING:
                {
                alt383=50;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 383, 0, input);
                throw nvae;
            }
            switch (alt383) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent14172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent14181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i2.getText(); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT1000=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent14188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT1000_tree = (CommonTree)adaptor.create(AT1000);
                    adaptor.addChild(root_0, AT1000_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT1001=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent14195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT1001_tree = (CommonTree)adaptor.create(COUNT1001);
                    adaptor.addChild(root_0, COUNT1001_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE1002=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent14202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE1002_tree = (CommonTree)adaptor.create(ESCAPE1002);
                    adaptor.addChild(root_0, ESCAPE1002_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR1003=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent14213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR1003_tree = (CommonTree)adaptor.create(EVERY_EXPR1003);
                    adaptor.addChild(root_0, EVERY_EXPR1003_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM1004=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent14220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM1004_tree = (CommonTree)adaptor.create(SUM1004);
                    adaptor.addChild(root_0, SUM1004_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG1005=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent14227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG1005_tree = (CommonTree)adaptor.create(AVG1005);
                    adaptor.addChild(root_0, AVG1005_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX1006=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent14234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX1006_tree = (CommonTree)adaptor.create(MAX1006);
                    adaptor.addChild(root_0, MAX1006_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN1007=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent14241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN1007_tree = (CommonTree)adaptor.create(MIN1007);
                    adaptor.addChild(root_0, MIN1007_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE1008=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent14248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE1008_tree = (CommonTree)adaptor.create(COALESCE1008);
                    adaptor.addChild(root_0, COALESCE1008_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN1009=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent14255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN1009_tree = (CommonTree)adaptor.create(MEDIAN1009);
                    adaptor.addChild(root_0, MEDIAN1009_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV1010=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent14262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV1010_tree = (CommonTree)adaptor.create(STDDEV1010);
                    adaptor.addChild(root_0, STDDEV1010_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV1011=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent14269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV1011_tree = (CommonTree)adaptor.create(AVEDEV1011);
                    adaptor.addChild(root_0, AVEDEV1011_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS1012=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent14276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS1012_tree = (CommonTree)adaptor.create(EVENTS1012);
                    adaptor.addChild(root_0, EVENTS1012_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST1013=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent14283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST1013_tree = (CommonTree)adaptor.create(FIRST1013);
                    adaptor.addChild(root_0, FIRST1013_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST1014=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent14290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST1014_tree = (CommonTree)adaptor.create(LAST1014);
                    adaptor.addChild(root_0, LAST1014_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE1015=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent14297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE1015_tree = (CommonTree)adaptor.create(WHILE1015);
                    adaptor.addChild(root_0, WHILE1015_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE1016=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent14304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE1016_tree = (CommonTree)adaptor.create(MERGE1016);
                    adaptor.addChild(root_0, MERGE1016_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED1017=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent14311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED1017_tree = (CommonTree)adaptor.create(MATCHED1017);
                    adaptor.addChild(root_0, MATCHED1017_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL1018=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent14318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL1018_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL1018);
                    adaptor.addChild(root_0, UNIDIRECTIONAL1018_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION1019=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent14325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION1019_tree = (CommonTree)adaptor.create(RETAINUNION1019);
                    adaptor.addChild(root_0, RETAINUNION1019_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION1020=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent14332); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION1020_tree = (CommonTree)adaptor.create(RETAININTERSECTION1020);
                    adaptor.addChild(root_0, RETAININTERSECTION1020_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL1021=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent14339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL1021_tree = (CommonTree)adaptor.create(UNTIL1021);
                    adaptor.addChild(root_0, UNTIL1021_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN1022=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent14346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN1022_tree = (CommonTree)adaptor.create(PATTERN1022);
                    adaptor.addChild(root_0, PATTERN1022_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL1023=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent14353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL1023_tree = (CommonTree)adaptor.create(SQL1023);
                    adaptor.addChild(root_0, SQL1023_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL1024=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent14360); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL1024_tree = (CommonTree)adaptor.create(METADATASQL1024);
                    adaptor.addChild(root_0, METADATASQL1024_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS1025=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent14367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS1025_tree = (CommonTree)adaptor.create(PREVIOUS1025);
                    adaptor.addChild(root_0, PREVIOUS1025_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL1026=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent14374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL1026_tree = (CommonTree)adaptor.create(PREVIOUSTAIL1026);
                    adaptor.addChild(root_0, PREVIOUSTAIL1026_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR1027=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent14381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR1027_tree = (CommonTree)adaptor.create(PRIOR1027);
                    adaptor.addChild(root_0, PRIOR1027_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY1028=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent14388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY1028_tree = (CommonTree)adaptor.create(WEEKDAY1028);
                    adaptor.addChild(root_0, WEEKDAY1028_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW1029=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent14395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW1029_tree = (CommonTree)adaptor.create(LW1029);
                    adaptor.addChild(root_0, LW1029_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF1030=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent14402); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF1030_tree = (CommonTree)adaptor.create(INSTANCEOF1030);
                    adaptor.addChild(root_0, INSTANCEOF1030_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF1031=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent14409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF1031_tree = (CommonTree)adaptor.create(TYPEOF1031);
                    adaptor.addChild(root_0, TYPEOF1031_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST1032=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent14416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST1032_tree = (CommonTree)adaptor.create(CAST1032);
                    adaptor.addChild(root_0, CAST1032_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT1033=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent14423); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT1033_tree = (CommonTree)adaptor.create(SNAPSHOT1033);
                    adaptor.addChild(root_0, SNAPSHOT1033_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE1034=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent14430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE1034_tree = (CommonTree)adaptor.create(VARIABLE1034);
                    adaptor.addChild(root_0, VARIABLE1034_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX1035=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent14439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX1035_tree = (CommonTree)adaptor.create(INDEX1035);
                    adaptor.addChild(root_0, INDEX1035_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW1036=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent14448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW1036_tree = (CommonTree)adaptor.create(WINDOW1036);
                    adaptor.addChild(root_0, WINDOW1036_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT1037=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent14455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT1037_tree = (CommonTree)adaptor.create(LEFT1037);
                    adaptor.addChild(root_0, LEFT1037_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT1038=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent14462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT1038_tree = (CommonTree)adaptor.create(RIGHT1038);
                    adaptor.addChild(root_0, RIGHT1038_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER1039=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent14469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER1039_tree = (CommonTree)adaptor.create(OUTER1039);
                    adaptor.addChild(root_0, OUTER1039_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL1040=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent14476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL1040_tree = (CommonTree)adaptor.create(FULL1040);
                    adaptor.addChild(root_0, FULL1040_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN1041=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent14483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN1041_tree = (CommonTree)adaptor.create(JOIN1041);
                    adaptor.addChild(root_0, JOIN1041_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE1042=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent14490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE1042_tree = (CommonTree)adaptor.create(DEFINE1042);
                    adaptor.addChild(root_0, DEFINE1042_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION1043=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent14497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION1043_tree = (CommonTree)adaptor.create(PARTITION1043);
                    adaptor.addChild(root_0, PARTITION1043_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES1044=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent14504); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES1044_tree = (CommonTree)adaptor.create(MATCHES1044);
                    adaptor.addChild(root_0, MATCHES1044_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT1045=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent14511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT1045_tree = (CommonTree)adaptor.create(CONTEXT1045);
                    adaptor.addChild(root_0, CONTEXT1045_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
                case 49 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FOR1046=(Token)match(input,FOR,FOLLOW_FOR_in_keywordAllowedIdent14518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR1046_tree = (CommonTree)adaptor.create(FOR1046);
                    adaptor.addChild(root_0, FOR1046_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "for"; 
                    }
                    }
                    break;
                case 50 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    USING1047=(Token)match(input,USING,FOLLOW_USING_in_keywordAllowedIdent14525); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING1047_tree = (CommonTree)adaptor.create(USING1047);
                    adaptor.addChild(root_0, USING1047_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "using"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token i3=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree i3_tree=null;
        try {
            int alt384=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt384=1;
                }
                break;
            case EVENTS:
                {
                alt384=2;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt384=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 384, 0, input);
                throw nvae;
            }
            switch (alt384) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr14546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_escapableStr14555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i2.getText(); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i3=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr14564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i3_tree = (CommonTree)adaptor.create(i3);
                    adaptor.addChild(root_0, i3_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i3.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT1048=null;
        CommonTree t_tree=null;
        CommonTree IDENT1048_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt385=2;
            int LA385_0 = input.LA(1);
            if ( (LA385_0==IDENT) ) {
                alt385=1;
            }
            else if ( (LA385_0==TICKED_STRING_LITERAL) ) {
                alt385=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 385, 0, input);
                throw nvae;
            }
            switch (alt385) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT1048=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent14578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT1048_tree = (CommonTree)adaptor.create(IDENT1048);
                    adaptor.addChild(root_0, IDENT1048_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent14586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart1049 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1050 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1051 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1052 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1053 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1054 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1055 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1056 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1057 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1058 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1059 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1060 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1061 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1062 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1063 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1064 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1065 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1066 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1067 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1068 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1069 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1070 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1071 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1072 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1073 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1074 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1075 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1076 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1077 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1078 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1079 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1080 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1081 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1082 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1083 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1084 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt414=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt414=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt414=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt414=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt414=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt414=7;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt414=3;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt414=1;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt414=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 414, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt414=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt414=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt414=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt414=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt414=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt414=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt414=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt414=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt414=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt414=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt414=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt414=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt414=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt414=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt414=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt414=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt414=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt414=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt414=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt414=7;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt414=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt414=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt414=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt414=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt414=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt414=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt414=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt414=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt414=2;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt414=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt414=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt414=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt414=8;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt414=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt414=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt414=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt414=5;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt414=2;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt414=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt414=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt414=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt414=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt414=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt414=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt414=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt414=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt414=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt414=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 414, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 414, 0, input);
                throw nvae;
            }
            switch (alt414) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod14611);
                    yearPart1049=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart1049.getTree());
                    int alt386=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA386_26 = input.LA(3);
                                    if ( ((LA386_26>=TIMEPERIOD_MONTH && LA386_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA386_27 = input.LA(3);
                                    if ( ((LA386_27>=TIMEPERIOD_MONTH && LA386_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA386_28 = input.LA(3);
                                    if ( ((LA386_28>=TIMEPERIOD_MONTH && LA386_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA386_29 = input.LA(3);
                                    if ( ((LA386_29>=TIMEPERIOD_MONTH && LA386_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA386_30 = input.LA(3);
                                    if ( ((LA386_30>=TIMEPERIOD_MONTH && LA386_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA386_31 = input.LA(3);
                                    if ( ((LA386_31>=TIMEPERIOD_MONTH && LA386_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA386_32 = input.LA(3);
                                    if ( ((LA386_32>=TIMEPERIOD_MONTH && LA386_32<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA386_33 = input.LA(3);
                                    if ( ((LA386_33>=TIMEPERIOD_MONTH && LA386_33<=TIMEPERIOD_MONTHS)) ) {
                                        alt386=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA386_3 = input.LA(2);
                            if ( ((LA386_3>=TIMEPERIOD_MONTH && LA386_3<=TIMEPERIOD_MONTHS)) ) {
                                alt386=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA386_4 = input.LA(2);
                            if ( ((LA386_4>=TIMEPERIOD_MONTH && LA386_4<=TIMEPERIOD_MONTHS)) ) {
                                alt386=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA386_5 = input.LA(2);
                            if ( ((LA386_5>=TIMEPERIOD_MONTH && LA386_5<=TIMEPERIOD_MONTHS)) ) {
                                alt386=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA386_6 = input.LA(2);
                            if ( ((LA386_6>=TIMEPERIOD_MONTH && LA386_6<=TIMEPERIOD_MONTHS)) ) {
                                alt386=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA386_7 = input.LA(2);
                            if ( ((LA386_7>=TIMEPERIOD_MONTH && LA386_7<=TIMEPERIOD_MONTHS)) ) {
                                alt386=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA386_8 = input.LA(2);
                            if ( ((LA386_8>=TIMEPERIOD_MONTH && LA386_8<=TIMEPERIOD_MONTHS)) ) {
                                alt386=1;
                            }
                            }
                            break;
                    }
                    switch (alt386) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod14613);
                            monthPart1050=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart1050.getTree());
                            }
                            break;
                    }
                    int alt387=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA387_26 = input.LA(3);
                                    if ( ((LA387_26>=TIMEPERIOD_WEEK && LA387_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA387_27 = input.LA(3);
                                    if ( ((LA387_27>=TIMEPERIOD_WEEK && LA387_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA387_28 = input.LA(3);
                                    if ( ((LA387_28>=TIMEPERIOD_WEEK && LA387_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA387_29 = input.LA(3);
                                    if ( ((LA387_29>=TIMEPERIOD_WEEK && LA387_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA387_30 = input.LA(3);
                                    if ( ((LA387_30>=TIMEPERIOD_WEEK && LA387_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA387_31 = input.LA(3);
                                    if ( ((LA387_31>=TIMEPERIOD_WEEK && LA387_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA387_32 = input.LA(3);
                                    if ( ((LA387_32>=TIMEPERIOD_WEEK && LA387_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA387_33 = input.LA(3);
                                    if ( ((LA387_33>=TIMEPERIOD_WEEK && LA387_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA387_3 = input.LA(2);
                            if ( ((LA387_3>=TIMEPERIOD_WEEK && LA387_3<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA387_4 = input.LA(2);
                            if ( ((LA387_4>=TIMEPERIOD_WEEK && LA387_4<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA387_5 = input.LA(2);
                            if ( ((LA387_5>=TIMEPERIOD_WEEK && LA387_5<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA387_6 = input.LA(2);
                            if ( ((LA387_6>=TIMEPERIOD_WEEK && LA387_6<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA387_7 = input.LA(2);
                            if ( ((LA387_7>=TIMEPERIOD_WEEK && LA387_7<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA387_8 = input.LA(2);
                            if ( ((LA387_8>=TIMEPERIOD_WEEK && LA387_8<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                    }
                    switch (alt387) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14616);
                            weekPart1051=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1051.getTree());
                            }
                            break;
                    }
                    int alt388=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA388_26 = input.LA(3);
                                    if ( ((LA388_26>=TIMEPERIOD_DAY && LA388_26<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA388_27 = input.LA(3);
                                    if ( ((LA388_27>=TIMEPERIOD_DAY && LA388_27<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA388_28 = input.LA(3);
                                    if ( ((LA388_28>=TIMEPERIOD_DAY && LA388_28<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA388_29 = input.LA(3);
                                    if ( ((LA388_29>=TIMEPERIOD_DAY && LA388_29<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA388_30 = input.LA(3);
                                    if ( ((LA388_30>=TIMEPERIOD_DAY && LA388_30<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA388_31 = input.LA(3);
                                    if ( ((LA388_31>=TIMEPERIOD_DAY && LA388_31<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA388_32 = input.LA(3);
                                    if ( ((LA388_32>=TIMEPERIOD_DAY && LA388_32<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA388_33 = input.LA(3);
                                    if ( ((LA388_33>=TIMEPERIOD_DAY && LA388_33<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA388_3 = input.LA(2);
                            if ( ((LA388_3>=TIMEPERIOD_DAY && LA388_3<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA388_4 = input.LA(2);
                            if ( ((LA388_4>=TIMEPERIOD_DAY && LA388_4<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA388_5 = input.LA(2);
                            if ( ((LA388_5>=TIMEPERIOD_DAY && LA388_5<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA388_6 = input.LA(2);
                            if ( ((LA388_6>=TIMEPERIOD_DAY && LA388_6<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA388_7 = input.LA(2);
                            if ( ((LA388_7>=TIMEPERIOD_DAY && LA388_7<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA388_8 = input.LA(2);
                            if ( ((LA388_8>=TIMEPERIOD_DAY && LA388_8<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                    }
                    switch (alt388) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14619);
                            dayPart1052=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1052.getTree());
                            }
                            break;
                    }
                    int alt389=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_26 = input.LA(3);
                                    if ( ((LA389_26>=TIMEPERIOD_HOUR && LA389_26<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_27 = input.LA(3);
                                    if ( ((LA389_27>=TIMEPERIOD_HOUR && LA389_27<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_28 = input.LA(3);
                                    if ( ((LA389_28>=TIMEPERIOD_HOUR && LA389_28<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_29 = input.LA(3);
                                    if ( ((LA389_29>=TIMEPERIOD_HOUR && LA389_29<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_30 = input.LA(3);
                                    if ( ((LA389_30>=TIMEPERIOD_HOUR && LA389_30<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_31 = input.LA(3);
                                    if ( ((LA389_31>=TIMEPERIOD_HOUR && LA389_31<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_32 = input.LA(3);
                                    if ( ((LA389_32>=TIMEPERIOD_HOUR && LA389_32<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_33 = input.LA(3);
                                    if ( ((LA389_33>=TIMEPERIOD_HOUR && LA389_33<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA389_3 = input.LA(2);
                            if ( ((LA389_3>=TIMEPERIOD_HOUR && LA389_3<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA389_4 = input.LA(2);
                            if ( ((LA389_4>=TIMEPERIOD_HOUR && LA389_4<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA389_5 = input.LA(2);
                            if ( ((LA389_5>=TIMEPERIOD_HOUR && LA389_5<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA389_6 = input.LA(2);
                            if ( ((LA389_6>=TIMEPERIOD_HOUR && LA389_6<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA389_7 = input.LA(2);
                            if ( ((LA389_7>=TIMEPERIOD_HOUR && LA389_7<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA389_8 = input.LA(2);
                            if ( ((LA389_8>=TIMEPERIOD_HOUR && LA389_8<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                    }
                    switch (alt389) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14622);
                            hourPart1053=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1053.getTree());
                            }
                            break;
                    }
                    int alt390=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_26 = input.LA(3);
                                    if ( (LA390_26==MIN||(LA390_26>=TIMEPERIOD_MINUTE && LA390_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_27 = input.LA(3);
                                    if ( (LA390_27==MIN||(LA390_27>=TIMEPERIOD_MINUTE && LA390_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_28 = input.LA(3);
                                    if ( (LA390_28==MIN||(LA390_28>=TIMEPERIOD_MINUTE && LA390_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_29 = input.LA(3);
                                    if ( (LA390_29==MIN||(LA390_29>=TIMEPERIOD_MINUTE && LA390_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_30 = input.LA(3);
                                    if ( (LA390_30==MIN||(LA390_30>=TIMEPERIOD_MINUTE && LA390_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_31 = input.LA(3);
                                    if ( (LA390_31==MIN||(LA390_31>=TIMEPERIOD_MINUTE && LA390_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_32 = input.LA(3);
                                    if ( (LA390_32==MIN||(LA390_32>=TIMEPERIOD_MINUTE && LA390_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_33 = input.LA(3);
                                    if ( (LA390_33==MIN||(LA390_33>=TIMEPERIOD_MINUTE && LA390_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA390_3 = input.LA(2);
                            if ( (LA390_3==MIN||(LA390_3>=TIMEPERIOD_MINUTE && LA390_3<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA390_4 = input.LA(2);
                            if ( (LA390_4==MIN||(LA390_4>=TIMEPERIOD_MINUTE && LA390_4<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA390_5 = input.LA(2);
                            if ( (LA390_5==MIN||(LA390_5>=TIMEPERIOD_MINUTE && LA390_5<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA390_6 = input.LA(2);
                            if ( (LA390_6==MIN||(LA390_6>=TIMEPERIOD_MINUTE && LA390_6<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA390_7 = input.LA(2);
                            if ( (LA390_7==MIN||(LA390_7>=TIMEPERIOD_MINUTE && LA390_7<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA390_8 = input.LA(2);
                            if ( (LA390_8==MIN||(LA390_8>=TIMEPERIOD_MINUTE && LA390_8<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                    }
                    switch (alt390) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14625);
                            minutePart1054=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1054.getTree());
                            }
                            break;
                    }
                    int alt391=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_26 = input.LA(3);
                                    if ( ((LA391_26>=TIMEPERIOD_SEC && LA391_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_27 = input.LA(3);
                                    if ( ((LA391_27>=TIMEPERIOD_SEC && LA391_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_28 = input.LA(3);
                                    if ( ((LA391_28>=TIMEPERIOD_SEC && LA391_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_29 = input.LA(3);
                                    if ( ((LA391_29>=TIMEPERIOD_SEC && LA391_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_30 = input.LA(3);
                                    if ( ((LA391_30>=TIMEPERIOD_SEC && LA391_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_31 = input.LA(3);
                                    if ( ((LA391_31>=TIMEPERIOD_SEC && LA391_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_32 = input.LA(3);
                                    if ( ((LA391_32>=TIMEPERIOD_SEC && LA391_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_33 = input.LA(3);
                                    if ( ((LA391_33>=TIMEPERIOD_SEC && LA391_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA391_3 = input.LA(2);
                            if ( ((LA391_3>=TIMEPERIOD_SEC && LA391_3<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA391_4 = input.LA(2);
                            if ( ((LA391_4>=TIMEPERIOD_SEC && LA391_4<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA391_5 = input.LA(2);
                            if ( ((LA391_5>=TIMEPERIOD_SEC && LA391_5<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA391_6 = input.LA(2);
                            if ( ((LA391_6>=TIMEPERIOD_SEC && LA391_6<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA391_7 = input.LA(2);
                            if ( ((LA391_7>=TIMEPERIOD_SEC && LA391_7<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA391_8 = input.LA(2);
                            if ( ((LA391_8>=TIMEPERIOD_SEC && LA391_8<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                    }
                    switch (alt391) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14628);
                            secondPart1055=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1055.getTree());
                            }
                            break;
                    }
                    int alt392=2;
                    int LA392_0 = input.LA(1);
                    if ( (LA392_0==NUM_DOUBLE||LA392_0==IDENT||LA392_0==QUESTION||LA392_0==PLUS||LA392_0==MINUS||LA392_0==NUM_INT||(LA392_0>=NUM_LONG && LA392_0<=NUM_FLOAT)) ) {
                        alt392=1;
                    }
                    switch (alt392) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14631);
                            millisecondPart1056=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1056.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod14637);
                    monthPart1057=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart1057.getTree());
                    int alt393=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA393_26 = input.LA(3);
                                    if ( ((LA393_26>=TIMEPERIOD_WEEK && LA393_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA393_27 = input.LA(3);
                                    if ( ((LA393_27>=TIMEPERIOD_WEEK && LA393_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA393_28 = input.LA(3);
                                    if ( ((LA393_28>=TIMEPERIOD_WEEK && LA393_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA393_29 = input.LA(3);
                                    if ( ((LA393_29>=TIMEPERIOD_WEEK && LA393_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA393_30 = input.LA(3);
                                    if ( ((LA393_30>=TIMEPERIOD_WEEK && LA393_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA393_31 = input.LA(3);
                                    if ( ((LA393_31>=TIMEPERIOD_WEEK && LA393_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA393_32 = input.LA(3);
                                    if ( ((LA393_32>=TIMEPERIOD_WEEK && LA393_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA393_33 = input.LA(3);
                                    if ( ((LA393_33>=TIMEPERIOD_WEEK && LA393_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA393_3 = input.LA(2);
                            if ( ((LA393_3>=TIMEPERIOD_WEEK && LA393_3<=TIMEPERIOD_WEEKS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA393_4 = input.LA(2);
                            if ( ((LA393_4>=TIMEPERIOD_WEEK && LA393_4<=TIMEPERIOD_WEEKS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA393_5 = input.LA(2);
                            if ( ((LA393_5>=TIMEPERIOD_WEEK && LA393_5<=TIMEPERIOD_WEEKS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA393_6 = input.LA(2);
                            if ( ((LA393_6>=TIMEPERIOD_WEEK && LA393_6<=TIMEPERIOD_WEEKS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA393_7 = input.LA(2);
                            if ( ((LA393_7>=TIMEPERIOD_WEEK && LA393_7<=TIMEPERIOD_WEEKS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA393_8 = input.LA(2);
                            if ( ((LA393_8>=TIMEPERIOD_WEEK && LA393_8<=TIMEPERIOD_WEEKS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                    }
                    switch (alt393) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14639);
                            weekPart1058=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1058.getTree());
                            }
                            break;
                    }
                    int alt394=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_26 = input.LA(3);
                                    if ( ((LA394_26>=TIMEPERIOD_DAY && LA394_26<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_27 = input.LA(3);
                                    if ( ((LA394_27>=TIMEPERIOD_DAY && LA394_27<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_28 = input.LA(3);
                                    if ( ((LA394_28>=TIMEPERIOD_DAY && LA394_28<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_29 = input.LA(3);
                                    if ( ((LA394_29>=TIMEPERIOD_DAY && LA394_29<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_30 = input.LA(3);
                                    if ( ((LA394_30>=TIMEPERIOD_DAY && LA394_30<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_31 = input.LA(3);
                                    if ( ((LA394_31>=TIMEPERIOD_DAY && LA394_31<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_32 = input.LA(3);
                                    if ( ((LA394_32>=TIMEPERIOD_DAY && LA394_32<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_33 = input.LA(3);
                                    if ( ((LA394_33>=TIMEPERIOD_DAY && LA394_33<=TIMEPERIOD_DAYS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA394_3 = input.LA(2);
                            if ( ((LA394_3>=TIMEPERIOD_DAY && LA394_3<=TIMEPERIOD_DAYS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA394_4 = input.LA(2);
                            if ( ((LA394_4>=TIMEPERIOD_DAY && LA394_4<=TIMEPERIOD_DAYS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA394_5 = input.LA(2);
                            if ( ((LA394_5>=TIMEPERIOD_DAY && LA394_5<=TIMEPERIOD_DAYS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA394_6 = input.LA(2);
                            if ( ((LA394_6>=TIMEPERIOD_DAY && LA394_6<=TIMEPERIOD_DAYS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA394_7 = input.LA(2);
                            if ( ((LA394_7>=TIMEPERIOD_DAY && LA394_7<=TIMEPERIOD_DAYS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA394_8 = input.LA(2);
                            if ( ((LA394_8>=TIMEPERIOD_DAY && LA394_8<=TIMEPERIOD_DAYS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                    }
                    switch (alt394) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14642);
                            dayPart1059=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1059.getTree());
                            }
                            break;
                    }
                    int alt395=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA395_26 = input.LA(3);
                                    if ( ((LA395_26>=TIMEPERIOD_HOUR && LA395_26<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA395_27 = input.LA(3);
                                    if ( ((LA395_27>=TIMEPERIOD_HOUR && LA395_27<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA395_28 = input.LA(3);
                                    if ( ((LA395_28>=TIMEPERIOD_HOUR && LA395_28<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA395_29 = input.LA(3);
                                    if ( ((LA395_29>=TIMEPERIOD_HOUR && LA395_29<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA395_30 = input.LA(3);
                                    if ( ((LA395_30>=TIMEPERIOD_HOUR && LA395_30<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA395_31 = input.LA(3);
                                    if ( ((LA395_31>=TIMEPERIOD_HOUR && LA395_31<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA395_32 = input.LA(3);
                                    if ( ((LA395_32>=TIMEPERIOD_HOUR && LA395_32<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA395_33 = input.LA(3);
                                    if ( ((LA395_33>=TIMEPERIOD_HOUR && LA395_33<=TIMEPERIOD_HOURS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA395_3 = input.LA(2);
                            if ( ((LA395_3>=TIMEPERIOD_HOUR && LA395_3<=TIMEPERIOD_HOURS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA395_4 = input.LA(2);
                            if ( ((LA395_4>=TIMEPERIOD_HOUR && LA395_4<=TIMEPERIOD_HOURS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA395_5 = input.LA(2);
                            if ( ((LA395_5>=TIMEPERIOD_HOUR && LA395_5<=TIMEPERIOD_HOURS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA395_6 = input.LA(2);
                            if ( ((LA395_6>=TIMEPERIOD_HOUR && LA395_6<=TIMEPERIOD_HOURS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA395_7 = input.LA(2);
                            if ( ((LA395_7>=TIMEPERIOD_HOUR && LA395_7<=TIMEPERIOD_HOURS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA395_8 = input.LA(2);
                            if ( ((LA395_8>=TIMEPERIOD_HOUR && LA395_8<=TIMEPERIOD_HOURS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                    }
                    switch (alt395) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14645);
                            hourPart1060=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1060.getTree());
                            }
                            break;
                    }
                    int alt396=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_26 = input.LA(3);
                                    if ( (LA396_26==MIN||(LA396_26>=TIMEPERIOD_MINUTE && LA396_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_27 = input.LA(3);
                                    if ( (LA396_27==MIN||(LA396_27>=TIMEPERIOD_MINUTE && LA396_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_28 = input.LA(3);
                                    if ( (LA396_28==MIN||(LA396_28>=TIMEPERIOD_MINUTE && LA396_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_29 = input.LA(3);
                                    if ( (LA396_29==MIN||(LA396_29>=TIMEPERIOD_MINUTE && LA396_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_30 = input.LA(3);
                                    if ( (LA396_30==MIN||(LA396_30>=TIMEPERIOD_MINUTE && LA396_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_31 = input.LA(3);
                                    if ( (LA396_31==MIN||(LA396_31>=TIMEPERIOD_MINUTE && LA396_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_32 = input.LA(3);
                                    if ( (LA396_32==MIN||(LA396_32>=TIMEPERIOD_MINUTE && LA396_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_33 = input.LA(3);
                                    if ( (LA396_33==MIN||(LA396_33>=TIMEPERIOD_MINUTE && LA396_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA396_3 = input.LA(2);
                            if ( (LA396_3==MIN||(LA396_3>=TIMEPERIOD_MINUTE && LA396_3<=TIMEPERIOD_MINUTES)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA396_4 = input.LA(2);
                            if ( (LA396_4==MIN||(LA396_4>=TIMEPERIOD_MINUTE && LA396_4<=TIMEPERIOD_MINUTES)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA396_5 = input.LA(2);
                            if ( (LA396_5==MIN||(LA396_5>=TIMEPERIOD_MINUTE && LA396_5<=TIMEPERIOD_MINUTES)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA396_6 = input.LA(2);
                            if ( (LA396_6==MIN||(LA396_6>=TIMEPERIOD_MINUTE && LA396_6<=TIMEPERIOD_MINUTES)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA396_7 = input.LA(2);
                            if ( (LA396_7==MIN||(LA396_7>=TIMEPERIOD_MINUTE && LA396_7<=TIMEPERIOD_MINUTES)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA396_8 = input.LA(2);
                            if ( (LA396_8==MIN||(LA396_8>=TIMEPERIOD_MINUTE && LA396_8<=TIMEPERIOD_MINUTES)) ) {
                                alt396=1;
                            }
                            }
                            break;
                    }
                    switch (alt396) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14648);
                            minutePart1061=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1061.getTree());
                            }
                            break;
                    }
                    int alt397=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA397_26 = input.LA(3);
                                    if ( ((LA397_26>=TIMEPERIOD_SEC && LA397_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA397_27 = input.LA(3);
                                    if ( ((LA397_27>=TIMEPERIOD_SEC && LA397_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA397_28 = input.LA(3);
                                    if ( ((LA397_28>=TIMEPERIOD_SEC && LA397_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA397_29 = input.LA(3);
                                    if ( ((LA397_29>=TIMEPERIOD_SEC && LA397_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA397_30 = input.LA(3);
                                    if ( ((LA397_30>=TIMEPERIOD_SEC && LA397_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA397_31 = input.LA(3);
                                    if ( ((LA397_31>=TIMEPERIOD_SEC && LA397_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA397_32 = input.LA(3);
                                    if ( ((LA397_32>=TIMEPERIOD_SEC && LA397_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA397_33 = input.LA(3);
                                    if ( ((LA397_33>=TIMEPERIOD_SEC && LA397_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA397_3 = input.LA(2);
                            if ( ((LA397_3>=TIMEPERIOD_SEC && LA397_3<=TIMEPERIOD_SECONDS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA397_4 = input.LA(2);
                            if ( ((LA397_4>=TIMEPERIOD_SEC && LA397_4<=TIMEPERIOD_SECONDS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA397_5 = input.LA(2);
                            if ( ((LA397_5>=TIMEPERIOD_SEC && LA397_5<=TIMEPERIOD_SECONDS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA397_6 = input.LA(2);
                            if ( ((LA397_6>=TIMEPERIOD_SEC && LA397_6<=TIMEPERIOD_SECONDS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA397_7 = input.LA(2);
                            if ( ((LA397_7>=TIMEPERIOD_SEC && LA397_7<=TIMEPERIOD_SECONDS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA397_8 = input.LA(2);
                            if ( ((LA397_8>=TIMEPERIOD_SEC && LA397_8<=TIMEPERIOD_SECONDS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                    }
                    switch (alt397) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14651);
                            secondPart1062=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1062.getTree());
                            }
                            break;
                    }
                    int alt398=2;
                    int LA398_0 = input.LA(1);
                    if ( (LA398_0==NUM_DOUBLE||LA398_0==IDENT||LA398_0==QUESTION||LA398_0==PLUS||LA398_0==MINUS||LA398_0==NUM_INT||(LA398_0>=NUM_LONG && LA398_0<=NUM_FLOAT)) ) {
                        alt398=1;
                    }
                    switch (alt398) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14654);
                            millisecondPart1063=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1063.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod14660);
                    weekPart1064=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart1064.getTree());
                    int alt399=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA399_26 = input.LA(3);
                                    if ( ((LA399_26>=TIMEPERIOD_DAY && LA399_26<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA399_27 = input.LA(3);
                                    if ( ((LA399_27>=TIMEPERIOD_DAY && LA399_27<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA399_28 = input.LA(3);
                                    if ( ((LA399_28>=TIMEPERIOD_DAY && LA399_28<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA399_29 = input.LA(3);
                                    if ( ((LA399_29>=TIMEPERIOD_DAY && LA399_29<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA399_30 = input.LA(3);
                                    if ( ((LA399_30>=TIMEPERIOD_DAY && LA399_30<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA399_31 = input.LA(3);
                                    if ( ((LA399_31>=TIMEPERIOD_DAY && LA399_31<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA399_32 = input.LA(3);
                                    if ( ((LA399_32>=TIMEPERIOD_DAY && LA399_32<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA399_33 = input.LA(3);
                                    if ( ((LA399_33>=TIMEPERIOD_DAY && LA399_33<=TIMEPERIOD_DAYS)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA399_3 = input.LA(2);
                            if ( ((LA399_3>=TIMEPERIOD_DAY && LA399_3<=TIMEPERIOD_DAYS)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA399_4 = input.LA(2);
                            if ( ((LA399_4>=TIMEPERIOD_DAY && LA399_4<=TIMEPERIOD_DAYS)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA399_5 = input.LA(2);
                            if ( ((LA399_5>=TIMEPERIOD_DAY && LA399_5<=TIMEPERIOD_DAYS)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA399_6 = input.LA(2);
                            if ( ((LA399_6>=TIMEPERIOD_DAY && LA399_6<=TIMEPERIOD_DAYS)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA399_7 = input.LA(2);
                            if ( ((LA399_7>=TIMEPERIOD_DAY && LA399_7<=TIMEPERIOD_DAYS)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA399_8 = input.LA(2);
                            if ( ((LA399_8>=TIMEPERIOD_DAY && LA399_8<=TIMEPERIOD_DAYS)) ) {
                                alt399=1;
                            }
                            }
                            break;
                    }
                    switch (alt399) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14662);
                            dayPart1065=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1065.getTree());
                            }
                            break;
                    }
                    int alt400=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_26 = input.LA(3);
                                    if ( ((LA400_26>=TIMEPERIOD_HOUR && LA400_26<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_27 = input.LA(3);
                                    if ( ((LA400_27>=TIMEPERIOD_HOUR && LA400_27<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_28 = input.LA(3);
                                    if ( ((LA400_28>=TIMEPERIOD_HOUR && LA400_28<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_29 = input.LA(3);
                                    if ( ((LA400_29>=TIMEPERIOD_HOUR && LA400_29<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_30 = input.LA(3);
                                    if ( ((LA400_30>=TIMEPERIOD_HOUR && LA400_30<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_31 = input.LA(3);
                                    if ( ((LA400_31>=TIMEPERIOD_HOUR && LA400_31<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_32 = input.LA(3);
                                    if ( ((LA400_32>=TIMEPERIOD_HOUR && LA400_32<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_33 = input.LA(3);
                                    if ( ((LA400_33>=TIMEPERIOD_HOUR && LA400_33<=TIMEPERIOD_HOURS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA400_3 = input.LA(2);
                            if ( ((LA400_3>=TIMEPERIOD_HOUR && LA400_3<=TIMEPERIOD_HOURS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA400_4 = input.LA(2);
                            if ( ((LA400_4>=TIMEPERIOD_HOUR && LA400_4<=TIMEPERIOD_HOURS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA400_5 = input.LA(2);
                            if ( ((LA400_5>=TIMEPERIOD_HOUR && LA400_5<=TIMEPERIOD_HOURS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA400_6 = input.LA(2);
                            if ( ((LA400_6>=TIMEPERIOD_HOUR && LA400_6<=TIMEPERIOD_HOURS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA400_7 = input.LA(2);
                            if ( ((LA400_7>=TIMEPERIOD_HOUR && LA400_7<=TIMEPERIOD_HOURS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA400_8 = input.LA(2);
                            if ( ((LA400_8>=TIMEPERIOD_HOUR && LA400_8<=TIMEPERIOD_HOURS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                    }
                    switch (alt400) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14665);
                            hourPart1066=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1066.getTree());
                            }
                            break;
                    }
                    int alt401=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA401_26 = input.LA(3);
                                    if ( (LA401_26==MIN||(LA401_26>=TIMEPERIOD_MINUTE && LA401_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA401_27 = input.LA(3);
                                    if ( (LA401_27==MIN||(LA401_27>=TIMEPERIOD_MINUTE && LA401_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA401_28 = input.LA(3);
                                    if ( (LA401_28==MIN||(LA401_28>=TIMEPERIOD_MINUTE && LA401_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA401_29 = input.LA(3);
                                    if ( (LA401_29==MIN||(LA401_29>=TIMEPERIOD_MINUTE && LA401_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA401_30 = input.LA(3);
                                    if ( (LA401_30==MIN||(LA401_30>=TIMEPERIOD_MINUTE && LA401_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA401_31 = input.LA(3);
                                    if ( (LA401_31==MIN||(LA401_31>=TIMEPERIOD_MINUTE && LA401_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA401_32 = input.LA(3);
                                    if ( (LA401_32==MIN||(LA401_32>=TIMEPERIOD_MINUTE && LA401_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA401_33 = input.LA(3);
                                    if ( (LA401_33==MIN||(LA401_33>=TIMEPERIOD_MINUTE && LA401_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA401_3 = input.LA(2);
                            if ( (LA401_3==MIN||(LA401_3>=TIMEPERIOD_MINUTE && LA401_3<=TIMEPERIOD_MINUTES)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA401_4 = input.LA(2);
                            if ( (LA401_4==MIN||(LA401_4>=TIMEPERIOD_MINUTE && LA401_4<=TIMEPERIOD_MINUTES)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA401_5 = input.LA(2);
                            if ( (LA401_5==MIN||(LA401_5>=TIMEPERIOD_MINUTE && LA401_5<=TIMEPERIOD_MINUTES)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA401_6 = input.LA(2);
                            if ( (LA401_6==MIN||(LA401_6>=TIMEPERIOD_MINUTE && LA401_6<=TIMEPERIOD_MINUTES)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA401_7 = input.LA(2);
                            if ( (LA401_7==MIN||(LA401_7>=TIMEPERIOD_MINUTE && LA401_7<=TIMEPERIOD_MINUTES)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA401_8 = input.LA(2);
                            if ( (LA401_8==MIN||(LA401_8>=TIMEPERIOD_MINUTE && LA401_8<=TIMEPERIOD_MINUTES)) ) {
                                alt401=1;
                            }
                            }
                            break;
                    }
                    switch (alt401) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14668);
                            minutePart1067=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1067.getTree());
                            }
                            break;
                    }
                    int alt402=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_26 = input.LA(3);
                                    if ( ((LA402_26>=TIMEPERIOD_SEC && LA402_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_27 = input.LA(3);
                                    if ( ((LA402_27>=TIMEPERIOD_SEC && LA402_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_28 = input.LA(3);
                                    if ( ((LA402_28>=TIMEPERIOD_SEC && LA402_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_29 = input.LA(3);
                                    if ( ((LA402_29>=TIMEPERIOD_SEC && LA402_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_30 = input.LA(3);
                                    if ( ((LA402_30>=TIMEPERIOD_SEC && LA402_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_31 = input.LA(3);
                                    if ( ((LA402_31>=TIMEPERIOD_SEC && LA402_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_32 = input.LA(3);
                                    if ( ((LA402_32>=TIMEPERIOD_SEC && LA402_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_33 = input.LA(3);
                                    if ( ((LA402_33>=TIMEPERIOD_SEC && LA402_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA402_3 = input.LA(2);
                            if ( ((LA402_3>=TIMEPERIOD_SEC && LA402_3<=TIMEPERIOD_SECONDS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA402_4 = input.LA(2);
                            if ( ((LA402_4>=TIMEPERIOD_SEC && LA402_4<=TIMEPERIOD_SECONDS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA402_5 = input.LA(2);
                            if ( ((LA402_5>=TIMEPERIOD_SEC && LA402_5<=TIMEPERIOD_SECONDS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA402_6 = input.LA(2);
                            if ( ((LA402_6>=TIMEPERIOD_SEC && LA402_6<=TIMEPERIOD_SECONDS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA402_7 = input.LA(2);
                            if ( ((LA402_7>=TIMEPERIOD_SEC && LA402_7<=TIMEPERIOD_SECONDS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA402_8 = input.LA(2);
                            if ( ((LA402_8>=TIMEPERIOD_SEC && LA402_8<=TIMEPERIOD_SECONDS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                    }
                    switch (alt402) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14671);
                            secondPart1068=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1068.getTree());
                            }
                            break;
                    }
                    int alt403=2;
                    int LA403_0 = input.LA(1);
                    if ( (LA403_0==NUM_DOUBLE||LA403_0==IDENT||LA403_0==QUESTION||LA403_0==PLUS||LA403_0==MINUS||LA403_0==NUM_INT||(LA403_0>=NUM_LONG && LA403_0<=NUM_FLOAT)) ) {
                        alt403=1;
                    }
                    switch (alt403) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14674);
                            millisecondPart1069=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1069.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod14680);
                    dayPart1070=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart1070.getTree());
                    int alt404=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA404_26 = input.LA(3);
                                    if ( ((LA404_26>=TIMEPERIOD_HOUR && LA404_26<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA404_27 = input.LA(3);
                                    if ( ((LA404_27>=TIMEPERIOD_HOUR && LA404_27<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA404_28 = input.LA(3);
                                    if ( ((LA404_28>=TIMEPERIOD_HOUR && LA404_28<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA404_29 = input.LA(3);
                                    if ( ((LA404_29>=TIMEPERIOD_HOUR && LA404_29<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA404_30 = input.LA(3);
                                    if ( ((LA404_30>=TIMEPERIOD_HOUR && LA404_30<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA404_31 = input.LA(3);
                                    if ( ((LA404_31>=TIMEPERIOD_HOUR && LA404_31<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA404_32 = input.LA(3);
                                    if ( ((LA404_32>=TIMEPERIOD_HOUR && LA404_32<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA404_33 = input.LA(3);
                                    if ( ((LA404_33>=TIMEPERIOD_HOUR && LA404_33<=TIMEPERIOD_HOURS)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA404_3 = input.LA(2);
                            if ( ((LA404_3>=TIMEPERIOD_HOUR && LA404_3<=TIMEPERIOD_HOURS)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA404_4 = input.LA(2);
                            if ( ((LA404_4>=TIMEPERIOD_HOUR && LA404_4<=TIMEPERIOD_HOURS)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA404_5 = input.LA(2);
                            if ( ((LA404_5>=TIMEPERIOD_HOUR && LA404_5<=TIMEPERIOD_HOURS)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA404_6 = input.LA(2);
                            if ( ((LA404_6>=TIMEPERIOD_HOUR && LA404_6<=TIMEPERIOD_HOURS)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA404_7 = input.LA(2);
                            if ( ((LA404_7>=TIMEPERIOD_HOUR && LA404_7<=TIMEPERIOD_HOURS)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA404_8 = input.LA(2);
                            if ( ((LA404_8>=TIMEPERIOD_HOUR && LA404_8<=TIMEPERIOD_HOURS)) ) {
                                alt404=1;
                            }
                            }
                            break;
                    }
                    switch (alt404) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14682);
                            hourPart1071=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1071.getTree());
                            }
                            break;
                    }
                    int alt405=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_26 = input.LA(3);
                                    if ( (LA405_26==MIN||(LA405_26>=TIMEPERIOD_MINUTE && LA405_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_27 = input.LA(3);
                                    if ( (LA405_27==MIN||(LA405_27>=TIMEPERIOD_MINUTE && LA405_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_28 = input.LA(3);
                                    if ( (LA405_28==MIN||(LA405_28>=TIMEPERIOD_MINUTE && LA405_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_29 = input.LA(3);
                                    if ( (LA405_29==MIN||(LA405_29>=TIMEPERIOD_MINUTE && LA405_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_30 = input.LA(3);
                                    if ( (LA405_30==MIN||(LA405_30>=TIMEPERIOD_MINUTE && LA405_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_31 = input.LA(3);
                                    if ( (LA405_31==MIN||(LA405_31>=TIMEPERIOD_MINUTE && LA405_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_32 = input.LA(3);
                                    if ( (LA405_32==MIN||(LA405_32>=TIMEPERIOD_MINUTE && LA405_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_33 = input.LA(3);
                                    if ( (LA405_33==MIN||(LA405_33>=TIMEPERIOD_MINUTE && LA405_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA405_3 = input.LA(2);
                            if ( (LA405_3==MIN||(LA405_3>=TIMEPERIOD_MINUTE && LA405_3<=TIMEPERIOD_MINUTES)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA405_4 = input.LA(2);
                            if ( (LA405_4==MIN||(LA405_4>=TIMEPERIOD_MINUTE && LA405_4<=TIMEPERIOD_MINUTES)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA405_5 = input.LA(2);
                            if ( (LA405_5==MIN||(LA405_5>=TIMEPERIOD_MINUTE && LA405_5<=TIMEPERIOD_MINUTES)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA405_6 = input.LA(2);
                            if ( (LA405_6==MIN||(LA405_6>=TIMEPERIOD_MINUTE && LA405_6<=TIMEPERIOD_MINUTES)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA405_7 = input.LA(2);
                            if ( (LA405_7==MIN||(LA405_7>=TIMEPERIOD_MINUTE && LA405_7<=TIMEPERIOD_MINUTES)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA405_8 = input.LA(2);
                            if ( (LA405_8==MIN||(LA405_8>=TIMEPERIOD_MINUTE && LA405_8<=TIMEPERIOD_MINUTES)) ) {
                                alt405=1;
                            }
                            }
                            break;
                    }
                    switch (alt405) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14685);
                            minutePart1072=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1072.getTree());
                            }
                            break;
                    }
                    int alt406=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA406_26 = input.LA(3);
                                    if ( ((LA406_26>=TIMEPERIOD_SEC && LA406_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA406_27 = input.LA(3);
                                    if ( ((LA406_27>=TIMEPERIOD_SEC && LA406_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA406_28 = input.LA(3);
                                    if ( ((LA406_28>=TIMEPERIOD_SEC && LA406_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA406_29 = input.LA(3);
                                    if ( ((LA406_29>=TIMEPERIOD_SEC && LA406_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA406_30 = input.LA(3);
                                    if ( ((LA406_30>=TIMEPERIOD_SEC && LA406_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA406_31 = input.LA(3);
                                    if ( ((LA406_31>=TIMEPERIOD_SEC && LA406_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA406_32 = input.LA(3);
                                    if ( ((LA406_32>=TIMEPERIOD_SEC && LA406_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA406_33 = input.LA(3);
                                    if ( ((LA406_33>=TIMEPERIOD_SEC && LA406_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA406_3 = input.LA(2);
                            if ( ((LA406_3>=TIMEPERIOD_SEC && LA406_3<=TIMEPERIOD_SECONDS)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA406_4 = input.LA(2);
                            if ( ((LA406_4>=TIMEPERIOD_SEC && LA406_4<=TIMEPERIOD_SECONDS)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA406_5 = input.LA(2);
                            if ( ((LA406_5>=TIMEPERIOD_SEC && LA406_5<=TIMEPERIOD_SECONDS)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA406_6 = input.LA(2);
                            if ( ((LA406_6>=TIMEPERIOD_SEC && LA406_6<=TIMEPERIOD_SECONDS)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA406_7 = input.LA(2);
                            if ( ((LA406_7>=TIMEPERIOD_SEC && LA406_7<=TIMEPERIOD_SECONDS)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA406_8 = input.LA(2);
                            if ( ((LA406_8>=TIMEPERIOD_SEC && LA406_8<=TIMEPERIOD_SECONDS)) ) {
                                alt406=1;
                            }
                            }
                            break;
                    }
                    switch (alt406) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14688);
                            secondPart1073=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1073.getTree());
                            }
                            break;
                    }
                    int alt407=2;
                    int LA407_0 = input.LA(1);
                    if ( (LA407_0==NUM_DOUBLE||LA407_0==IDENT||LA407_0==QUESTION||LA407_0==PLUS||LA407_0==MINUS||LA407_0==NUM_INT||(LA407_0>=NUM_LONG && LA407_0<=NUM_FLOAT)) ) {
                        alt407=1;
                    }
                    switch (alt407) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14691);
                            millisecondPart1074=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1074.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod14697);
                    hourPart1075=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart1075.getTree());
                    int alt408=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA408_26 = input.LA(3);
                                    if ( (LA408_26==MIN||(LA408_26>=TIMEPERIOD_MINUTE && LA408_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA408_27 = input.LA(3);
                                    if ( (LA408_27==MIN||(LA408_27>=TIMEPERIOD_MINUTE && LA408_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA408_28 = input.LA(3);
                                    if ( (LA408_28==MIN||(LA408_28>=TIMEPERIOD_MINUTE && LA408_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA408_29 = input.LA(3);
                                    if ( (LA408_29==MIN||(LA408_29>=TIMEPERIOD_MINUTE && LA408_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA408_30 = input.LA(3);
                                    if ( (LA408_30==MIN||(LA408_30>=TIMEPERIOD_MINUTE && LA408_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA408_31 = input.LA(3);
                                    if ( (LA408_31==MIN||(LA408_31>=TIMEPERIOD_MINUTE && LA408_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA408_32 = input.LA(3);
                                    if ( (LA408_32==MIN||(LA408_32>=TIMEPERIOD_MINUTE && LA408_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA408_33 = input.LA(3);
                                    if ( (LA408_33==MIN||(LA408_33>=TIMEPERIOD_MINUTE && LA408_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA408_3 = input.LA(2);
                            if ( (LA408_3==MIN||(LA408_3>=TIMEPERIOD_MINUTE && LA408_3<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA408_4 = input.LA(2);
                            if ( (LA408_4==MIN||(LA408_4>=TIMEPERIOD_MINUTE && LA408_4<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA408_5 = input.LA(2);
                            if ( (LA408_5==MIN||(LA408_5>=TIMEPERIOD_MINUTE && LA408_5<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA408_6 = input.LA(2);
                            if ( (LA408_6==MIN||(LA408_6>=TIMEPERIOD_MINUTE && LA408_6<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA408_7 = input.LA(2);
                            if ( (LA408_7==MIN||(LA408_7>=TIMEPERIOD_MINUTE && LA408_7<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA408_8 = input.LA(2);
                            if ( (LA408_8==MIN||(LA408_8>=TIMEPERIOD_MINUTE && LA408_8<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                    }
                    switch (alt408) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14699);
                            minutePart1076=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1076.getTree());
                            }
                            break;
                    }
                    int alt409=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA409_26 = input.LA(3);
                                    if ( ((LA409_26>=TIMEPERIOD_SEC && LA409_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA409_27 = input.LA(3);
                                    if ( ((LA409_27>=TIMEPERIOD_SEC && LA409_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA409_28 = input.LA(3);
                                    if ( ((LA409_28>=TIMEPERIOD_SEC && LA409_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA409_29 = input.LA(3);
                                    if ( ((LA409_29>=TIMEPERIOD_SEC && LA409_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA409_30 = input.LA(3);
                                    if ( ((LA409_30>=TIMEPERIOD_SEC && LA409_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA409_31 = input.LA(3);
                                    if ( ((LA409_31>=TIMEPERIOD_SEC && LA409_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA409_32 = input.LA(3);
                                    if ( ((LA409_32>=TIMEPERIOD_SEC && LA409_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA409_33 = input.LA(3);
                                    if ( ((LA409_33>=TIMEPERIOD_SEC && LA409_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA409_3 = input.LA(2);
                            if ( ((LA409_3>=TIMEPERIOD_SEC && LA409_3<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA409_4 = input.LA(2);
                            if ( ((LA409_4>=TIMEPERIOD_SEC && LA409_4<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA409_5 = input.LA(2);
                            if ( ((LA409_5>=TIMEPERIOD_SEC && LA409_5<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA409_6 = input.LA(2);
                            if ( ((LA409_6>=TIMEPERIOD_SEC && LA409_6<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA409_7 = input.LA(2);
                            if ( ((LA409_7>=TIMEPERIOD_SEC && LA409_7<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA409_8 = input.LA(2);
                            if ( ((LA409_8>=TIMEPERIOD_SEC && LA409_8<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                    }
                    switch (alt409) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14702);
                            secondPart1077=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1077.getTree());
                            }
                            break;
                    }
                    int alt410=2;
                    int LA410_0 = input.LA(1);
                    if ( (LA410_0==NUM_DOUBLE||LA410_0==IDENT||LA410_0==QUESTION||LA410_0==PLUS||LA410_0==MINUS||LA410_0==NUM_INT||(LA410_0>=NUM_LONG && LA410_0<=NUM_FLOAT)) ) {
                        alt410=1;
                    }
                    switch (alt410) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14705);
                            millisecondPart1078=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1078.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod14711);
                    minutePart1079=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart1079.getTree());
                    int alt411=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA411_26 = input.LA(3);
                                    if ( ((LA411_26>=TIMEPERIOD_SEC && LA411_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA411_27 = input.LA(3);
                                    if ( ((LA411_27>=TIMEPERIOD_SEC && LA411_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA411_28 = input.LA(3);
                                    if ( ((LA411_28>=TIMEPERIOD_SEC && LA411_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA411_29 = input.LA(3);
                                    if ( ((LA411_29>=TIMEPERIOD_SEC && LA411_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA411_30 = input.LA(3);
                                    if ( ((LA411_30>=TIMEPERIOD_SEC && LA411_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA411_31 = input.LA(3);
                                    if ( ((LA411_31>=TIMEPERIOD_SEC && LA411_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA411_32 = input.LA(3);
                                    if ( ((LA411_32>=TIMEPERIOD_SEC && LA411_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA411_33 = input.LA(3);
                                    if ( ((LA411_33>=TIMEPERIOD_SEC && LA411_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA411_3 = input.LA(2);
                            if ( ((LA411_3>=TIMEPERIOD_SEC && LA411_3<=TIMEPERIOD_SECONDS)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA411_4 = input.LA(2);
                            if ( ((LA411_4>=TIMEPERIOD_SEC && LA411_4<=TIMEPERIOD_SECONDS)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA411_5 = input.LA(2);
                            if ( ((LA411_5>=TIMEPERIOD_SEC && LA411_5<=TIMEPERIOD_SECONDS)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA411_6 = input.LA(2);
                            if ( ((LA411_6>=TIMEPERIOD_SEC && LA411_6<=TIMEPERIOD_SECONDS)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA411_7 = input.LA(2);
                            if ( ((LA411_7>=TIMEPERIOD_SEC && LA411_7<=TIMEPERIOD_SECONDS)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA411_8 = input.LA(2);
                            if ( ((LA411_8>=TIMEPERIOD_SEC && LA411_8<=TIMEPERIOD_SECONDS)) ) {
                                alt411=1;
                            }
                            }
                            break;
                    }
                    switch (alt411) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14713);
                            secondPart1080=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1080.getTree());
                            }
                            break;
                    }
                    int alt412=2;
                    int LA412_0 = input.LA(1);
                    if ( (LA412_0==NUM_DOUBLE||LA412_0==IDENT||LA412_0==QUESTION||LA412_0==PLUS||LA412_0==MINUS||LA412_0==NUM_INT||(LA412_0>=NUM_LONG && LA412_0<=NUM_FLOAT)) ) {
                        alt412=1;
                    }
                    switch (alt412) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14716);
                            millisecondPart1081=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1081.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod14722);
                    secondPart1082=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart1082.getTree());
                    int alt413=2;
                    int LA413_0 = input.LA(1);
                    if ( (LA413_0==NUM_DOUBLE||LA413_0==IDENT||LA413_0==QUESTION||LA413_0==PLUS||LA413_0==MINUS||LA413_0==NUM_INT||(LA413_0>=NUM_LONG && LA413_0<=NUM_FLOAT)) ) {
                        alt413=1;
                    }
                    switch (alt413) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14724);
                            millisecondPart1083=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1083.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod14730);
                    millisecondPart1084=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1084.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS1087=null;
        Token TIMEPERIOD_YEAR1088=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1085 = null;
        EsperEPL2GrammarParser.substitution_return substitution1086 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS1087_tree=null;
        CommonTree TIMEPERIOD_YEAR1088_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt415=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt415=1;
                }
                break;
            case IDENT:
                {
                alt415=2;
                }
                break;
            case QUESTION:
                {
                alt415=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 415, 0, input);
                throw nvae;
            }
            switch (alt415) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart14777);
                    numberconstant1085=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1085.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart14781); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart14783);
                    substitution1086=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1086.getTree());
                    }
                    break;
            }
            int alt416=2;
            int LA416_0 = input.LA(1);
            if ( (LA416_0==TIMEPERIOD_YEARS) ) {
                alt416=1;
            }
            else if ( (LA416_0==TIMEPERIOD_YEAR) ) {
                alt416=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);
                throw nvae;
            }
            switch (alt416) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS1087=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart14787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS1087);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR1088=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart14791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR1088);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS1091=null;
        Token TIMEPERIOD_MONTH1092=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1089 = null;
        EsperEPL2GrammarParser.substitution_return substitution1090 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS1091_tree=null;
        CommonTree TIMEPERIOD_MONTH1092_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt417=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt417=1;
                }
                break;
            case IDENT:
                {
                alt417=2;
                }
                break;
            case QUESTION:
                {
                alt417=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);
                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart14839);
                    numberconstant1089=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1089.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart14843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart14845);
                    substitution1090=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1090.getTree());
                    }
                    break;
            }
            int alt418=2;
            int LA418_0 = input.LA(1);
            if ( (LA418_0==TIMEPERIOD_MONTHS) ) {
                alt418=1;
            }
            else if ( (LA418_0==TIMEPERIOD_MONTH) ) {
                alt418=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);
                throw nvae;
            }
            switch (alt418) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS1091=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart14849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS1091);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH1092=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart14853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH1092);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS1095=null;
        Token TIMEPERIOD_WEEK1096=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1093 = null;
        EsperEPL2GrammarParser.substitution_return substitution1094 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS1095_tree=null;
        CommonTree TIMEPERIOD_WEEK1096_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt419=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt419=1;
                }
                break;
            case IDENT:
                {
                alt419=2;
                }
                break;
            case QUESTION:
                {
                alt419=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);
                throw nvae;
            }
            switch (alt419) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart14901);
                    numberconstant1093=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1093.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart14905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart14907);
                    substitution1094=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1094.getTree());
                    }
                    break;
            }
            int alt420=2;
            int LA420_0 = input.LA(1);
            if ( (LA420_0==TIMEPERIOD_WEEKS) ) {
                alt420=1;
            }
            else if ( (LA420_0==TIMEPERIOD_WEEK) ) {
                alt420=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 420, 0, input);
                throw nvae;
            }
            switch (alt420) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS1095=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart14911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS1095);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK1096=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart14915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK1096);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS1099=null;
        Token TIMEPERIOD_DAY1100=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1097 = null;
        EsperEPL2GrammarParser.substitution_return substitution1098 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS1099_tree=null;
        CommonTree TIMEPERIOD_DAY1100_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt421=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt421=1;
                }
                break;
            case IDENT:
                {
                alt421=2;
                }
                break;
            case QUESTION:
                {
                alt421=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);
                throw nvae;
            }
            switch (alt421) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart14963);
                    numberconstant1097=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1097.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart14967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart14969);
                    substitution1098=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1098.getTree());
                    }
                    break;
            }
            int alt422=2;
            int LA422_0 = input.LA(1);
            if ( (LA422_0==TIMEPERIOD_DAYS) ) {
                alt422=1;
            }
            else if ( (LA422_0==TIMEPERIOD_DAY) ) {
                alt422=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 0, input);
                throw nvae;
            }
            switch (alt422) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS1099=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart14973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS1099);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY1100=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart14977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY1100);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS1103=null;
        Token TIMEPERIOD_HOUR1104=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1101 = null;
        EsperEPL2GrammarParser.substitution_return substitution1102 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS1103_tree=null;
        CommonTree TIMEPERIOD_HOUR1104_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt423=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt423=1;
                }
                break;
            case IDENT:
                {
                alt423=2;
                }
                break;
            case QUESTION:
                {
                alt423=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);
                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart15026);
                    numberconstant1101=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1101.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart15030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart15032);
                    substitution1102=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1102.getTree());
                    }
                    break;
            }
            int alt424=2;
            int LA424_0 = input.LA(1);
            if ( (LA424_0==TIMEPERIOD_HOURS) ) {
                alt424=1;
            }
            else if ( (LA424_0==TIMEPERIOD_HOUR) ) {
                alt424=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);
                throw nvae;
            }
            switch (alt424) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS1103=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart15036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS1103);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR1104=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart15040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR1104);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES1107=null;
        Token TIMEPERIOD_MINUTE1108=null;
        Token MIN1109=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1105 = null;
        EsperEPL2GrammarParser.substitution_return substitution1106 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES1107_tree=null;
        CommonTree TIMEPERIOD_MINUTE1108_tree=null;
        CommonTree MIN1109_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt425=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt425=1;
                }
                break;
            case IDENT:
                {
                alt425=2;
                }
                break;
            case QUESTION:
                {
                alt425=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart15089);
                    numberconstant1105=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1105.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart15093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart15095);
                    substitution1106=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1106.getTree());
                    }
                    break;
            }
            int alt426=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt426=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt426=2;
                }
                break;
            case MIN:
                {
                alt426=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);
                throw nvae;
            }
            switch (alt426) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES1107=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart15099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES1107);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE1108=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart15103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE1108);
                    }
                    break;
                case 3 :
                    {
                    MIN1109=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart15107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN1109);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS1112=null;
        Token TIMEPERIOD_SECOND1113=null;
        Token TIMEPERIOD_SEC1114=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1110 = null;
        EsperEPL2GrammarParser.substitution_return substitution1111 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS1112_tree=null;
        CommonTree TIMEPERIOD_SECOND1113_tree=null;
        CommonTree TIMEPERIOD_SEC1114_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt427=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt427=1;
                }
                break;
            case IDENT:
                {
                alt427=2;
                }
                break;
            case QUESTION:
                {
                alt427=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);
                throw nvae;
            }
            switch (alt427) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart15157);
                    numberconstant1110=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1110.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart15161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart15163);
                    substitution1111=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1111.getTree());
                    }
                    break;
            }
            int alt428=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt428=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt428=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt428=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);
                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS1112=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart15167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS1112);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND1113=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart15171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND1113);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC1114=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart15175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC1114);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS1117=null;
        Token TIMEPERIOD_MILLISECOND1118=null;
        Token TIMEPERIOD_MILLISEC1119=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1115 = null;
        EsperEPL2GrammarParser.substitution_return substitution1116 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS1117_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND1118_tree=null;
        CommonTree TIMEPERIOD_MILLISEC1119_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt429=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt429=1;
                }
                break;
            case IDENT:
                {
                alt429=2;
                }
                break;
            case QUESTION:
                {
                alt429=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);
                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart15225);
                    numberconstant1115=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1115.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart15229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart15231);
                    substitution1116=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1116.getTree());
                    }
                    break;
            }
            int alt430=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt430=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt430=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt430=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 0, input);
                throw nvae;
            }
            switch (alt430) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS1117=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart15235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS1117);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND1118=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart15239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND1118);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC1119=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart15243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC1119);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt431=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt431=1;
                }
                break;
            case NUM_LONG:
                {
                alt431=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt431=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt431=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 431, 0, input);
                throw nvae;
            }
            switch (alt431) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number15298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number15315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number15332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number15349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution15370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1120 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1121 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt432=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt432=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt432=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt432=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt432=4;
                }
                break;
            case VALUE_NULL:
                {
                alt432=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);
                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant15389);
                    numberconstant1120=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant1120.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant15396);
                    stringconstant1121=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant1121.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant15409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant15429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant15449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number1122 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt433=3;
            int LA433_0 = input.LA(1);
            if ( (LA433_0==MINUS) ) {
                alt433=1;
            }
            else if ( (LA433_0==PLUS) ) {
                alt433=2;
            }
            switch (alt433) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant15471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant15477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant15481);
            number1122=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number1122.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number1122!=null?((CommonTree)number1122.tree):null).getType(), "-" + (number1122!=null?input.toString(number1122.start,number1122.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt434=2;
            int LA434_0 = input.LA(1);
            if ( (LA434_0==STRING_LITERAL) ) {
                alt434=1;
            }
            else if ( (LA434_0==QUOTED_STRING_LITERAL) ) {
                alt434=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);
                throw nvae;
            }
            switch (alt434) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant15510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant15526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonvalue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonvalue_return jsonvalue() throws RecognitionException {
        EsperEPL2GrammarParser.jsonvalue_return retval = new EsperEPL2GrammarParser.jsonvalue_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.constant_return constant1123 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject1124 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray1125 = null;
        try {
            int alt435=3;
            switch ( input.LA(1) ) {
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt435=1;
                }
                break;
            case LCURLY:
                {
                alt435=2;
                }
                break;
            case LBRACK:
                {
                alt435=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 435, 0, input);
                throw nvae;
            }
            switch (alt435) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_jsonvalue15547);
                    constant1123=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant1123.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonobject_in_jsonvalue15552);
                    jsonobject1124=jsonobject();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonobject1124.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonarray_in_jsonvalue15557);
                    jsonarray1125=jsonarray();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonarray1125.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonobject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonobject_return jsonobject() throws RecognitionException {
        EsperEPL2GrammarParser.jsonobject_return retval = new EsperEPL2GrammarParser.jsonobject_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY1126=null;
        Token RCURLY1128=null;
        EsperEPL2GrammarParser.jsonmembers_return jsonmembers1127 = null;
        CommonTree LCURLY1126_tree=null;
        CommonTree RCURLY1128_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_jsonmembers=new RewriteRuleSubtreeStream(adaptor,"rule jsonmembers");
        try {
            {
            LCURLY1126=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_jsonobject15568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY1126);
            pushFollow(FOLLOW_jsonmembers_in_jsonobject15570);
            jsonmembers1127=jsonmembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonmembers.add(jsonmembers1127.getTree());
            RCURLY1128=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_jsonobject15572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY1128);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_OBJECT, "JSON_OBJECT"), root_1);
                adaptor.addChild(root_1, stream_jsonmembers.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonarray_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonarray_return jsonarray() throws RecognitionException {
        EsperEPL2GrammarParser.jsonarray_return retval = new EsperEPL2GrammarParser.jsonarray_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK1129=null;
        Token RBRACK1131=null;
        EsperEPL2GrammarParser.jsonelements_return jsonelements1130 = null;
        CommonTree LBRACK1129_tree=null;
        CommonTree RBRACK1131_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_jsonelements=new RewriteRuleSubtreeStream(adaptor,"rule jsonelements");
        try {
            {
            LBRACK1129=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_jsonarray15604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK1129);
            int alt436=2;
            int LA436_0 = input.LA(1);
            if ( ((LA436_0>=BOOLEAN_TRUE && LA436_0<=VALUE_NULL)||LA436_0==NUM_DOUBLE||LA436_0==LBRACK||LA436_0==LCURLY||(LA436_0>=PLUS && LA436_0<=QUOTED_STRING_LITERAL)||LA436_0==MINUS||LA436_0==NUM_INT||(LA436_0>=NUM_LONG && LA436_0<=NUM_FLOAT)) ) {
                alt436=1;
            }
            switch (alt436) {
                case 1 :
                    {
                    pushFollow(FOLLOW_jsonelements_in_jsonarray15606);
                    jsonelements1130=jsonelements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_jsonelements.add(jsonelements1130.getTree());
                    }
                    break;
            }
            RBRACK1131=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_jsonarray15609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK1131);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_ARRAY, "JSON_ARRAY"), root_1);
                if ( stream_jsonelements.hasNext() ) {
                    adaptor.addChild(root_1, stream_jsonelements.nextTree());
                }
                stream_jsonelements.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonelements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonelements_return jsonelements() throws RecognitionException {
        EsperEPL2GrammarParser.jsonelements_return retval = new EsperEPL2GrammarParser.jsonelements_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1133=null;
        Token COMMA1135=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1132 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1134 = null;
        CommonTree COMMA1133_tree=null;
        CommonTree COMMA1135_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_jsonelements15632);
            jsonvalue1132=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1132.getTree());
            loop437:
            do {
                int alt437=2;
                int LA437_0 = input.LA(1);
                if ( (LA437_0==COMMA) ) {
                    int LA437_1 = input.LA(2);
                    if ( ((LA437_1>=BOOLEAN_TRUE && LA437_1<=VALUE_NULL)||LA437_1==NUM_DOUBLE||LA437_1==LBRACK||LA437_1==LCURLY||(LA437_1>=PLUS && LA437_1<=QUOTED_STRING_LITERAL)||LA437_1==MINUS||LA437_1==NUM_INT||(LA437_1>=NUM_LONG && LA437_1<=NUM_FLOAT)) ) {
                        alt437=1;
                    }
                }
                switch (alt437) {
            	case 1 :
            	    {
            	    COMMA1133=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15635); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonvalue_in_jsonelements15638);
            	    jsonvalue1134=jsonvalue();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1134.getTree());
            	    }
            	    break;
            	default :
            	    break loop437;
                }
            } while (true);
            int alt438=2;
            int LA438_0 = input.LA(1);
            if ( (LA438_0==COMMA) ) {
                alt438=1;
            }
            switch (alt438) {
                case 1 :
                    {
                    COMMA1135=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15643); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonmembers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonmembers_return jsonmembers() throws RecognitionException {
        EsperEPL2GrammarParser.jsonmembers_return retval = new EsperEPL2GrammarParser.jsonmembers_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1137=null;
        Token COMMA1139=null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1136 = null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1138 = null;
        CommonTree COMMA1137_tree=null;
        CommonTree COMMA1139_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonpair_in_jsonmembers15659);
            jsonpair1136=jsonpair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1136.getTree());
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);
                if ( (LA439_0==COMMA) ) {
                    int LA439_1 = input.LA(2);
                    if ( (LA439_1==WINDOW||LA439_1==ESCAPE||LA439_1==EVERY_EXPR||(LA439_1>=SUM && LA439_1<=COUNT)||LA439_1==OUTER||(LA439_1>=JOIN && LA439_1<=FULL)||(LA439_1>=EVENTS && LA439_1<=LAST)||(LA439_1>=UNIDIRECTIONAL && LA439_1<=PREVIOUSTAIL)||LA439_1==PRIOR||(LA439_1>=WEEKDAY && LA439_1<=CAST)||LA439_1==SNAPSHOT||(LA439_1>=VARIABLE && LA439_1<=INDEX)||(LA439_1>=DEFINE && LA439_1<=MATCHES)||(LA439_1>=FOR && LA439_1<=MATCHED)||LA439_1==CONTEXT||LA439_1==IDENT||(LA439_1>=STRING_LITERAL && LA439_1<=QUOTED_STRING_LITERAL)||LA439_1==TICKED_STRING_LITERAL) ) {
                        alt439=1;
                    }
                }
                switch (alt439) {
            	case 1 :
            	    {
            	    COMMA1137=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15662); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonpair_in_jsonmembers15665);
            	    jsonpair1138=jsonpair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1138.getTree());
            	    }
            	    break;
            	default :
            	    break loop439;
                }
            } while (true);
            int alt440=2;
            int LA440_0 = input.LA(1);
            if ( (LA440_0==COMMA) ) {
                alt440=1;
            }
            switch (alt440) {
                case 1 :
                    {
                    COMMA1139=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15670); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonpair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonpair_return jsonpair() throws RecognitionException {
        EsperEPL2GrammarParser.jsonpair_return retval = new EsperEPL2GrammarParser.jsonpair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COLON1142=null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1140 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent1141 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1143 = null;
        CommonTree COLON1142_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_jsonvalue=new RewriteRuleSubtreeStream(adaptor,"rule jsonvalue");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            int alt441=2;
            int LA441_0 = input.LA(1);
            if ( ((LA441_0>=STRING_LITERAL && LA441_0<=QUOTED_STRING_LITERAL)) ) {
                alt441=1;
            }
            else if ( (LA441_0==WINDOW||LA441_0==ESCAPE||LA441_0==EVERY_EXPR||(LA441_0>=SUM && LA441_0<=COUNT)||LA441_0==OUTER||(LA441_0>=JOIN && LA441_0<=FULL)||(LA441_0>=EVENTS && LA441_0<=LAST)||(LA441_0>=UNIDIRECTIONAL && LA441_0<=PREVIOUSTAIL)||LA441_0==PRIOR||(LA441_0>=WEEKDAY && LA441_0<=CAST)||LA441_0==SNAPSHOT||(LA441_0>=VARIABLE && LA441_0<=INDEX)||(LA441_0>=DEFINE && LA441_0<=MATCHES)||(LA441_0>=FOR && LA441_0<=MATCHED)||LA441_0==CONTEXT||LA441_0==IDENT||LA441_0==TICKED_STRING_LITERAL) ) {
                alt441=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 441, 0, input);
                throw nvae;
            }
            switch (alt441) {
                case 1 :
                    {
                    pushFollow(FOLLOW_stringconstant_in_jsonpair15687);
                    stringconstant1140=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant1140.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_keywordAllowedIdent_in_jsonpair15691);
                    keywordAllowedIdent1141=keywordAllowedIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(keywordAllowedIdent1141.getTree());
                    }
                    break;
            }
            COLON1142=(Token)match(input,COLON,FOLLOW_COLON_in_jsonpair15694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON1142);
            pushFollow(FOLLOW_jsonvalue_in_jsonpair15696);
            jsonvalue1143=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonvalue.add(jsonvalue1143.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_FIELD, "JSON_FIELD"), root_1);
                if ( stream_stringconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                }
                stream_stringconstant.reset();
                if ( stream_keywordAllowedIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_keywordAllowedIdent.nextTree());
                }
                stream_keywordAllowedIdent.reset();
                adaptor.addChild(root_1, stream_jsonvalue.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar6445);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar7844);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar9877);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar11274);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar11336);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar12799);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar13280);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar13291);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar13302);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar13313);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar13325);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar13336);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar13347);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar13360);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar13385);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA314 dfa314 = new DFA314(this);
    static final String DFA260_eotS =
        "\u0c66\uffff";
    static final String DFA260_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0c31\uffff";
    static final String DFA260_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\21\uffff\1\u0146\u0087\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\u0157\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74"+
        "\uffff\1\5\74\uffff\1\5\11\uffff\2\6\115\uffff\2\6\103\uffff\2\6"+
        "\114\uffff\2\6\112\uffff\2\6\114\uffff\2\6\114\uffff\2\6\114\uffff"+
        "\2\6\114\uffff\2\6\114\uffff\2\6\112\uffff\2\6\115\uffff\2\6\112"+
        "\uffff\2\6\112\uffff\2\6\112\uffff\2\6\u0093\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\115\uffff"+
        "\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\140\uffff\1\0\30\uffff"+
        "\1\0\116\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA260_maxS =
        "\2\u0169\13\uffff\1\u0169\3\uffff\1\u0166\2\uffff\2\u0166\2\uffff"+
        "\4\u0166\1\uffff\2\u0166\12\uffff\3\u0166\2\uffff\3\u0166\3\uffff"+
        "\1\u0166\21\uffff\1\u0146\u0087\uffff\1\u0169\74\uffff\1\u0169\74"+
        "\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169"+
        "\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169"+
        "\74\uffff\1\u0169\74\uffff\1\u0163\74\uffff\1\u0169\74\uffff\1\u0169"+
        "\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0167\11\uffff\2\u0162"+
        "\115\uffff\2\u0162\103\uffff\2\u0162\114\uffff\2\u0162\112\uffff"+
        "\2\u0162\114\uffff\2\u0162\114\uffff\2\u0162\114\uffff\2\u0162\114"+
        "\uffff\2\u0162\114\uffff\2\u0162\112\uffff\2\u0162\115\uffff\2\u0162"+
        "\112\uffff\2\u0162\112\uffff\2\u0162\112\uffff\2\u0162\u0093\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\115\uffff\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\140\uffff"+
        "\1\0\30\uffff\1\0\116\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA260_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\65\uffff\2\6\1\uffff\2\6"+
        "\1\7\1\12\4\uffff\1\1\61\uffff\1\10\1\4\u041c\uffff\11\6\2\uffff"+
        "\115\6\2\uffff\103\6\2\uffff\114\6\2\uffff\112\6\2\uffff\114\6\2"+
        "\uffff\114\6\2\uffff\114\6\2\uffff\114\6\2\uffff\114\6\2\uffff\112"+
        "\6\2\uffff\113\6\4\uffff\112\6\2\uffff\112\6\2\uffff\112\6\2\uffff"+
        "\114\6\1\11\106\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\62\6\2\uffff\31\6\1\uffff"+
        "\55\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\55\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\54\6\1\uffff"+
        "\30\6\1\uffff\5\6\1\uffff\64\6\1\uffff\23\6\1\uffff\30\6\1\uffff"+
        "\5\6";
    static final String DFA260_specialS =
        "\1\0\u00cd\uffff\1\1\74\uffff\1\2\74\uffff\1\3\74\uffff\1\4\74"+
        "\uffff\1\5\74\uffff\1\6\74\uffff\1\7\74\uffff\1\10\74\uffff\1\11"+
        "\74\uffff\1\12\74\uffff\1\13\74\uffff\1\14\74\uffff\1\15\74\uffff"+
        "\1\16\74\uffff\1\17\74\uffff\1\20\74\uffff\1\21\11\uffff\1\22\1"+
        "\23\115\uffff\1\24\1\25\103\uffff\1\26\1\27\114\uffff\1\30\1\31"+
        "\112\uffff\1\32\1\33\114\uffff\1\34\1\35\114\uffff\1\36\1\37\114"+
        "\uffff\1\40\1\41\114\uffff\1\42\1\43\114\uffff\1\44\1\45\112\uffff"+
        "\1\46\1\47\115\uffff\1\50\1\51\112\uffff\1\52\1\53\112\uffff\1\54"+
        "\1\55\112\uffff\1\56\1\57\u0093\uffff\1\60\31\uffff\1\61\31\uffff"+
        "\1\62\5\uffff\1\63\31\uffff\1\64\31\uffff\1\65\115\uffff\1\66\31"+
        "\uffff\1\67\55\uffff\1\70\31\uffff\1\71\5\uffff\1\72\31\uffff\1"+
        "\73\31\uffff\1\74\55\uffff\1\75\5\uffff\1\76\31\uffff\1\77\31\uffff"+
        "\1\100\31\uffff\1\101\31\uffff\1\102\31\uffff\1\103\140\uffff\1"+
        "\104\30\uffff\1\105\116\uffff\1\106\30\uffff\1\107\5\uffff}>";
    static final short[] DFA260_eot = DFA.unpackEncodedString(DFA260_eotS);
    static final short[] DFA260_eof = DFA.unpackEncodedString(DFA260_eofS);
    static final char[] DFA260_min = DFA.unpackEncodedStringToUnsignedChars(DFA260_minS);
    static final char[] DFA260_max = DFA.unpackEncodedStringToUnsignedChars(DFA260_maxS);
    static final short[] DFA260_accept = DFA.unpackEncodedString(DFA260_acceptS);
    static final short[] DFA260_special = DFA.unpackEncodedString(DFA260_specialS);
    static final short[][] DFA260_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA260_transitionS.length;
        DFA260_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA260_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA260_transitionS[i]);
        }
    }
    class DFA260 extends DFA {
        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = DFA260_eot;
            this.eof = DFA260_eof;
            this.min = DFA260_min;
            this.max = DFA260_max;
            this.accept = DFA260_accept;
            this.special = DFA260_special;
            this.transition = DFA260_transition;
        }
        public String getDescription() {
            return "1546:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 260, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA260_0 = input.LA(1);
                        int index260_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_0==MINUS) ) {s = 1;}
                        else if ( ((LA260_0>=BOOLEAN_TRUE && LA260_0<=VALUE_NULL)||LA260_0==NUM_DOUBLE||(LA260_0>=PLUS && LA260_0<=QUOTED_STRING_LITERAL)||LA260_0==NUM_INT||(LA260_0>=NUM_LONG && LA260_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA260_0==QUESTION) ) {s = 12;}
                        else if ( (LA260_0==LPAREN) ) {s = 13;}
                        else if ( (LA260_0==BETWEEN||LA260_0==ESCAPE||LA260_0==EVERY_EXPR||LA260_0==WHERE||(LA260_0>=MAX && LA260_0<=MIN)||LA260_0==OUTER||(LA260_0>=JOIN && LA260_0<=FULL)||LA260_0==EVENTS||(LA260_0>=UNIDIRECTIONAL && LA260_0<=METADATASQL)||(LA260_0>=WEEKDAY && LA260_0<=LW)||(LA260_0>=SNAPSHOT && LA260_0<=INDEX)||(LA260_0>=DEFINE && LA260_0<=MATCHED)||LA260_0==CONTEXT||LA260_0==IDENT||LA260_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA260_0==COUNT) ) {s = 17;}
                        else if ( (LA260_0==SUM) ) {s = 20;}
                        else if ( (LA260_0==AVG) ) {s = 21;}
                        else if ( (LA260_0==COALESCE) ) {s = 24;}
                        else if ( (LA260_0==MEDIAN) ) {s = 25;}
                        else if ( (LA260_0==STDDEV) ) {s = 26;}
                        else if ( (LA260_0==AVEDEV) ) {s = 27;}
                        else if ( (LA260_0==FIRST) ) {s = 29;}
                        else if ( (LA260_0==LAST) ) {s = 30;}
                        else if ( (LA260_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA260_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA260_0==PRIOR) ) {s = 43;}
                        else if ( (LA260_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA260_0==TYPEOF) ) {s = 47;}
                        else if ( (LA260_0==CAST) ) {s = 48;}
                        else if ( (LA260_0==WINDOW) ) {s = 52;}
                        else if ( (LA260_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 68;}
                        else if ( (LA260_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA260_0==EXISTS) ) {s = 70;}
                        else if ( (LA260_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 71;}
                        else if ( (LA260_0==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 72;}
                        else if ( (LA260_0==LCURLY) ) {s = 73;}
                        else if ( (LA260_0==NEWKW) ) {s = 74;}
                        input.seek(index260_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA260_206 = input.LA(1);
                        int index260_206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_206==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA260_206==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA260_206==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA260_206==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA260_206==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA260_206==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA260_206==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA260_206==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA260_206==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA260_206==STRING_LITERAL) ) {s = 1192;}
                        else if ( (LA260_206==QUOTED_STRING_LITERAL) ) {s = 1193;}
                        else if ( (LA260_206==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA260_206==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA260_206==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA260_206==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA260_206==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA260_206==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA260_206==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA260_206==AT) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA260_206==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA260_206==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA260_206==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA260_206==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA260_206==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA260_206==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA260_206==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA260_206==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA260_206==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA260_206==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA260_206==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA260_206==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA260_206==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA260_206==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA260_206==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA260_206==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA260_206==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA260_206==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA260_206==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA260_206==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA260_206==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA260_206==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA260_206==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA260_206==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA260_206==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA260_206==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA260_206==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA260_206==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA260_206==LW) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA260_206==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA260_206==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA260_206==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA260_206==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA260_206==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA260_206==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA260_206==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA260_206==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA260_206==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA260_206==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA260_206==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA260_206==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA260_206==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA260_206==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA260_206==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA260_206==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA260_206==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA260_206==USING) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA260_206==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA260_206==SET) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA260_206==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA260_206==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA260_206==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA260_206==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA260_206==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA260_206==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA260_206==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA260_206==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA260_206==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA260_206==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA260_206==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        input.seek(index260_206);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA260_267 = input.LA(1);
                        int index260_267 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_267==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA260_267==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA260_267==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA260_267==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA260_267==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA260_267==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA260_267==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA260_267==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA260_267==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA260_267==STRING_LITERAL) ) {s = 1271;}
                        else if ( (LA260_267==QUOTED_STRING_LITERAL) ) {s = 1272;}
                        else if ( (LA260_267==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA260_267==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA260_267==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA260_267==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA260_267==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA260_267==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA260_267==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA260_267==AT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA260_267==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA260_267==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA260_267==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA260_267==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA260_267==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA260_267==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA260_267==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA260_267==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA260_267==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA260_267==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA260_267==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA260_267==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA260_267==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA260_267==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA260_267==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA260_267==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA260_267==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA260_267==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA260_267==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA260_267==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA260_267==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA260_267==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA260_267==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA260_267==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA260_267==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA260_267==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA260_267==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA260_267==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA260_267==LW) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA260_267==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA260_267==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA260_267==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA260_267==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA260_267==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA260_267==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA260_267==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA260_267==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA260_267==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA260_267==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA260_267==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA260_267==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA260_267==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA260_267==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA260_267==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA260_267==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA260_267==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA260_267==USING) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA260_267==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA260_267==SET) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA260_267==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA260_267==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA260_267==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA260_267==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA260_267==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA260_267==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA260_267==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA260_267==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA260_267==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA260_267==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        input.seek(index260_267);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA260_328 = input.LA(1);
                        int index260_328 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_328==STRING_LITERAL) ) {s = 1340;}
                        else if ( (LA260_328==QUOTED_STRING_LITERAL) ) {s = 1341;}
                        else if ( (LA260_328==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA260_328==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA260_328==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA260_328==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA260_328==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA260_328==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA260_328==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA260_328==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA260_328==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA260_328==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA260_328==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA260_328==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA260_328==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA260_328==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA260_328==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA260_328==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA260_328==AT) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA260_328==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA260_328==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA260_328==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA260_328==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA260_328==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA260_328==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA260_328==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA260_328==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA260_328==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA260_328==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA260_328==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA260_328==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA260_328==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA260_328==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA260_328==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA260_328==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA260_328==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA260_328==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA260_328==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA260_328==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA260_328==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA260_328==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA260_328==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA260_328==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA260_328==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA260_328==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA260_328==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA260_328==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA260_328==LW) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA260_328==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA260_328==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA260_328==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA260_328==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA260_328==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA260_328==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA260_328==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA260_328==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA260_328==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA260_328==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA260_328==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA260_328==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA260_328==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA260_328==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA260_328==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA260_328==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA260_328==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA260_328==USING) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA260_328==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA260_328==SET) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA260_328==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA260_328==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA260_328==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA260_328==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA260_328==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA260_328==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA260_328==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA260_328==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA260_328==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA260_328==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        input.seek(index260_328);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA260_389 = input.LA(1);
                        int index260_389 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_389==STRING_LITERAL) ) {s = 1418;}
                        else if ( (LA260_389==QUOTED_STRING_LITERAL) ) {s = 1419;}
                        else if ( (LA260_389==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA260_389==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA260_389==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA260_389==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA260_389==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA260_389==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA260_389==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA260_389==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA260_389==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA260_389==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA260_389==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA260_389==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA260_389==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA260_389==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA260_389==AT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA260_389==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA260_389==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA260_389==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA260_389==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA260_389==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA260_389==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA260_389==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA260_389==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA260_389==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA260_389==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA260_389==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA260_389==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA260_389==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA260_389==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA260_389==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA260_389==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA260_389==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA260_389==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA260_389==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA260_389==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA260_389==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA260_389==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA260_389==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA260_389==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA260_389==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA260_389==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA260_389==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA260_389==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA260_389==LW) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA260_389==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA260_389==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA260_389==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA260_389==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA260_389==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA260_389==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA260_389==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA260_389==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA260_389==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA260_389==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA260_389==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA260_389==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA260_389==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA260_389==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA260_389==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA260_389==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA260_389==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA260_389==USING) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA260_389==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA260_389==SET) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA260_389==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA260_389==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA260_389==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA260_389==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA260_389==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA260_389==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA260_389==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA260_389==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA260_389==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA260_389==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        input.seek(index260_389);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA260_450 = input.LA(1);
                        int index260_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_450==STRING_LITERAL) ) {s = 1494;}
                        else if ( (LA260_450==QUOTED_STRING_LITERAL) ) {s = 1495;}
                        else if ( (LA260_450==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA260_450==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA260_450==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA260_450==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA260_450==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA260_450==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA260_450==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA260_450==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA260_450==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA260_450==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA260_450==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA260_450==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA260_450==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA260_450==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA260_450==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA260_450==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA260_450==AT) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA260_450==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA260_450==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA260_450==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA260_450==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA260_450==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA260_450==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA260_450==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA260_450==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA260_450==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA260_450==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA260_450==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA260_450==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA260_450==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA260_450==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA260_450==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA260_450==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA260_450==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA260_450==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA260_450==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA260_450==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA260_450==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA260_450==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA260_450==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA260_450==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA260_450==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA260_450==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA260_450==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA260_450==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA260_450==LW) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA260_450==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA260_450==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA260_450==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA260_450==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA260_450==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA260_450==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA260_450==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA260_450==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA260_450==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA260_450==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA260_450==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA260_450==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA260_450==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA260_450==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA260_450==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA260_450==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA260_450==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA260_450==USING) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA260_450==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA260_450==SET) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA260_450==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA260_450==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA260_450==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA260_450==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA260_450==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA260_450==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA260_450==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA260_450==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA260_450==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA260_450==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        input.seek(index260_450);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA260_511 = input.LA(1);
                        int index260_511 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_511==STRING_LITERAL) ) {s = 1572;}
                        else if ( (LA260_511==QUOTED_STRING_LITERAL) ) {s = 1573;}
                        else if ( (LA260_511==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA260_511==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA260_511==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA260_511==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA260_511==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA260_511==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA260_511==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA260_511==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA260_511==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA260_511==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA260_511==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA260_511==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA260_511==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA260_511==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA260_511==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA260_511==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA260_511==AT) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA260_511==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA260_511==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA260_511==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA260_511==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA260_511==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA260_511==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA260_511==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA260_511==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA260_511==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA260_511==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA260_511==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA260_511==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA260_511==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA260_511==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA260_511==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA260_511==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA260_511==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA260_511==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA260_511==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA260_511==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA260_511==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA260_511==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA260_511==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA260_511==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA260_511==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA260_511==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA260_511==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA260_511==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA260_511==LW) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA260_511==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA260_511==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA260_511==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA260_511==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA260_511==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA260_511==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA260_511==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA260_511==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA260_511==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA260_511==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA260_511==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA260_511==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA260_511==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA260_511==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA260_511==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA260_511==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA260_511==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA260_511==USING) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA260_511==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA260_511==SET) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA260_511==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA260_511==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA260_511==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA260_511==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA260_511==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA260_511==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA260_511==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA260_511==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA260_511==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA260_511==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        input.seek(index260_511);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA260_572 = input.LA(1);
                        int index260_572 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_572==STRING_LITERAL) ) {s = 1650;}
                        else if ( (LA260_572==QUOTED_STRING_LITERAL) ) {s = 1651;}
                        else if ( (LA260_572==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA260_572==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA260_572==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA260_572==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA260_572==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA260_572==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA260_572==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA260_572==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA260_572==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA260_572==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA260_572==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA260_572==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA260_572==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA260_572==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA260_572==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA260_572==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA260_572==AT) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA260_572==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA260_572==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA260_572==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA260_572==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA260_572==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA260_572==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA260_572==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA260_572==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA260_572==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA260_572==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA260_572==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA260_572==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA260_572==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA260_572==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA260_572==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA260_572==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA260_572==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA260_572==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA260_572==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA260_572==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA260_572==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA260_572==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA260_572==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA260_572==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA260_572==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA260_572==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA260_572==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA260_572==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA260_572==LW) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA260_572==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA260_572==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA260_572==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA260_572==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA260_572==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA260_572==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA260_572==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA260_572==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA260_572==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA260_572==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA260_572==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA260_572==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA260_572==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA260_572==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA260_572==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA260_572==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA260_572==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA260_572==USING) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA260_572==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA260_572==SET) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA260_572==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA260_572==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA260_572==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA260_572==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA260_572==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA260_572==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA260_572==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA260_572==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA260_572==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA260_572==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        input.seek(index260_572);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA260_633 = input.LA(1);
                        int index260_633 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_633==STRING_LITERAL) ) {s = 1728;}
                        else if ( (LA260_633==QUOTED_STRING_LITERAL) ) {s = 1729;}
                        else if ( (LA260_633==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA260_633==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA260_633==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA260_633==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA260_633==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA260_633==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA260_633==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA260_633==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA260_633==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA260_633==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA260_633==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA260_633==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA260_633==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA260_633==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA260_633==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA260_633==AT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA260_633==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA260_633==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA260_633==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA260_633==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA260_633==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA260_633==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA260_633==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA260_633==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA260_633==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA260_633==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA260_633==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA260_633==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA260_633==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA260_633==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA260_633==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA260_633==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA260_633==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA260_633==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA260_633==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA260_633==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA260_633==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA260_633==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA260_633==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA260_633==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA260_633==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA260_633==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA260_633==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA260_633==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA260_633==LW) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA260_633==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA260_633==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA260_633==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA260_633==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA260_633==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA260_633==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA260_633==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA260_633==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA260_633==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA260_633==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA260_633==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA260_633==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA260_633==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA260_633==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA260_633==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA260_633==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA260_633==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA260_633==USING) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA260_633==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA260_633==SET) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA260_633==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA260_633==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA260_633==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA260_633==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA260_633==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA260_633==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA260_633==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA260_633==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA260_633==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA260_633==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA260_633==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        input.seek(index260_633);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA260_694 = input.LA(1);
                        int index260_694 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_694==STRING_LITERAL) ) {s = 1806;}
                        else if ( (LA260_694==QUOTED_STRING_LITERAL) ) {s = 1807;}
                        else if ( (LA260_694==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA260_694==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA260_694==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA260_694==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA260_694==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA260_694==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA260_694==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA260_694==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA260_694==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA260_694==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA260_694==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA260_694==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA260_694==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA260_694==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA260_694==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA260_694==AT) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA260_694==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA260_694==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA260_694==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA260_694==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA260_694==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA260_694==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA260_694==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA260_694==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA260_694==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA260_694==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA260_694==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA260_694==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA260_694==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA260_694==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA260_694==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA260_694==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA260_694==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA260_694==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA260_694==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA260_694==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA260_694==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA260_694==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA260_694==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA260_694==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA260_694==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA260_694==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA260_694==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA260_694==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA260_694==LW) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA260_694==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA260_694==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA260_694==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA260_694==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA260_694==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA260_694==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA260_694==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA260_694==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA260_694==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA260_694==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA260_694==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA260_694==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA260_694==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA260_694==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA260_694==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA260_694==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA260_694==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA260_694==USING) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA260_694==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA260_694==SET) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA260_694==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA260_694==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA260_694==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA260_694==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA260_694==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA260_694==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA260_694==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA260_694==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA260_694==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA260_694==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA260_694==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        input.seek(index260_694);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA260_755 = input.LA(1);
                        int index260_755 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_755==STRING_LITERAL) ) {s = 1884;}
                        else if ( (LA260_755==QUOTED_STRING_LITERAL) ) {s = 1885;}
                        else if ( (LA260_755==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA260_755==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA260_755==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA260_755==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA260_755==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA260_755==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA260_755==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA260_755==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA260_755==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA260_755==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA260_755==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA260_755==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA260_755==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA260_755==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA260_755==AT) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA260_755==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA260_755==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA260_755==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA260_755==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA260_755==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA260_755==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA260_755==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA260_755==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA260_755==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA260_755==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA260_755==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA260_755==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA260_755==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA260_755==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA260_755==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA260_755==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA260_755==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA260_755==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA260_755==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA260_755==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA260_755==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA260_755==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA260_755==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA260_755==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA260_755==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA260_755==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA260_755==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA260_755==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA260_755==LW) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA260_755==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA260_755==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA260_755==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA260_755==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA260_755==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA260_755==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA260_755==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA260_755==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA260_755==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA260_755==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA260_755==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA260_755==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA260_755==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA260_755==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA260_755==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA260_755==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA260_755==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA260_755==USING) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA260_755==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA260_755==SET) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA260_755==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA260_755==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA260_755==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA260_755==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA260_755==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA260_755==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA260_755==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA260_755==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA260_755==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA260_755==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        input.seek(index260_755);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA260_816 = input.LA(1);
                        int index260_816 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_816==STRING_LITERAL) ) {s = 1960;}
                        else if ( (LA260_816==QUOTED_STRING_LITERAL) ) {s = 1961;}
                        else if ( (LA260_816==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA260_816==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA260_816==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA260_816==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA260_816==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA260_816==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA260_816==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA260_816==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA260_816==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA260_816==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA260_816==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA260_816==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA260_816==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA260_816==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA260_816==AT) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA260_816==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA260_816==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA260_816==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA260_816==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA260_816==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA260_816==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA260_816==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA260_816==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA260_816==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA260_816==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA260_816==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA260_816==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA260_816==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA260_816==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA260_816==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA260_816==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA260_816==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA260_816==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA260_816==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA260_816==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA260_816==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA260_816==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA260_816==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA260_816==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA260_816==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA260_816==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA260_816==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA260_816==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA260_816==LW) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA260_816==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA260_816==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA260_816==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA260_816==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA260_816==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA260_816==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA260_816==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA260_816==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA260_816==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA260_816==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA260_816==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA260_816==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA260_816==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA260_816==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA260_816==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA260_816==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA260_816==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA260_816==USING) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA260_816==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA260_816==SET) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA260_816==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA260_816==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA260_816==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA260_816==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA260_816==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA260_816==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA260_816==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA260_816==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA260_816==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA260_816==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        input.seek(index260_816);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA260_877 = input.LA(1);
                        int index260_877 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_877==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( ((LA260_877>=STRING_LITERAL && LA260_877<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index260_877);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA260_938 = input.LA(1);
                        int index260_938 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_938==STRING_LITERAL) ) {s = 2039;}
                        else if ( (LA260_938==QUOTED_STRING_LITERAL) ) {s = 2040;}
                        else if ( (LA260_938==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA260_938==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA260_938==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA260_938==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA260_938==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA260_938==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA260_938==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA260_938==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA260_938==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA260_938==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA260_938==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA260_938==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA260_938==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA260_938==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA260_938==AT) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA260_938==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA260_938==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA260_938==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA260_938==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA260_938==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA260_938==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA260_938==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA260_938==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA260_938==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA260_938==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA260_938==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA260_938==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA260_938==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA260_938==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA260_938==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA260_938==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA260_938==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA260_938==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA260_938==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA260_938==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA260_938==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA260_938==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA260_938==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA260_938==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA260_938==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA260_938==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA260_938==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA260_938==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA260_938==LW) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA260_938==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA260_938==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA260_938==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA260_938==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA260_938==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA260_938==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA260_938==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA260_938==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA260_938==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA260_938==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA260_938==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA260_938==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA260_938==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA260_938==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA260_938==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA260_938==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA260_938==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA260_938==USING) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA260_938==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA260_938==SET) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA260_938==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA260_938==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA260_938==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA260_938==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA260_938==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA260_938==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA260_938==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA260_938==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA260_938==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA260_938==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        input.seek(index260_938);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA260_999 = input.LA(1);
                        int index260_999 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_999==STRING_LITERAL) ) {s = 2115;}
                        else if ( (LA260_999==QUOTED_STRING_LITERAL) ) {s = 2116;}
                        else if ( (LA260_999==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA260_999==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA260_999==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA260_999==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA260_999==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA260_999==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA260_999==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA260_999==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA260_999==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA260_999==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA260_999==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA260_999==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA260_999==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA260_999==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA260_999==AT) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA260_999==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA260_999==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA260_999==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA260_999==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA260_999==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA260_999==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA260_999==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA260_999==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA260_999==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA260_999==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA260_999==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA260_999==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA260_999==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA260_999==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA260_999==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA260_999==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA260_999==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA260_999==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA260_999==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA260_999==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA260_999==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA260_999==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA260_999==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA260_999==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA260_999==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA260_999==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA260_999==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA260_999==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA260_999==LW) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA260_999==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA260_999==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA260_999==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA260_999==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA260_999==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA260_999==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA260_999==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA260_999==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA260_999==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA260_999==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA260_999==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA260_999==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA260_999==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA260_999==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA260_999==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA260_999==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA260_999==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA260_999==USING) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA260_999==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA260_999==SET) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA260_999==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA260_999==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA260_999==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA260_999==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA260_999==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA260_999==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA260_999==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA260_999==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA260_999==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA260_999==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        input.seek(index260_999);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA260_1060 = input.LA(1);
                        int index260_1060 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1060==STRING_LITERAL) ) {s = 2191;}
                        else if ( (LA260_1060==QUOTED_STRING_LITERAL) ) {s = 2192;}
                        else if ( (LA260_1060==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA260_1060==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA260_1060==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA260_1060==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA260_1060==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA260_1060==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA260_1060==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA260_1060==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA260_1060==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA260_1060==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA260_1060==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA260_1060==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA260_1060==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA260_1060==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA260_1060==AT) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA260_1060==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA260_1060==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA260_1060==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA260_1060==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA260_1060==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA260_1060==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA260_1060==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA260_1060==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA260_1060==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA260_1060==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA260_1060==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA260_1060==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA260_1060==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA260_1060==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA260_1060==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA260_1060==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA260_1060==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA260_1060==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA260_1060==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA260_1060==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA260_1060==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA260_1060==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA260_1060==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA260_1060==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA260_1060==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA260_1060==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA260_1060==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA260_1060==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA260_1060==LW) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA260_1060==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA260_1060==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA260_1060==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA260_1060==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA260_1060==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA260_1060==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA260_1060==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA260_1060==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA260_1060==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA260_1060==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA260_1060==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA260_1060==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA260_1060==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA260_1060==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA260_1060==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA260_1060==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA260_1060==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA260_1060==USING) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA260_1060==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA260_1060==SET) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA260_1060==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA260_1060==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA260_1060==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA260_1060==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA260_1060==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA260_1060==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA260_1060==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA260_1060==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA260_1060==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA260_1060==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        input.seek(index260_1060);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA260_1121 = input.LA(1);
                        int index260_1121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1121==STRING_LITERAL) ) {s = 2267;}
                        else if ( (LA260_1121==QUOTED_STRING_LITERAL) ) {s = 2268;}
                        else if ( (LA260_1121==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA260_1121==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA260_1121==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA260_1121==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA260_1121==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA260_1121==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA260_1121==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA260_1121==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA260_1121==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA260_1121==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA260_1121==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA260_1121==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA260_1121==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA260_1121==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA260_1121==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA260_1121==AT) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA260_1121==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA260_1121==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA260_1121==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA260_1121==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA260_1121==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA260_1121==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA260_1121==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA260_1121==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA260_1121==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA260_1121==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA260_1121==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA260_1121==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA260_1121==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA260_1121==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA260_1121==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA260_1121==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA260_1121==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA260_1121==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA260_1121==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA260_1121==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA260_1121==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA260_1121==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA260_1121==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA260_1121==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA260_1121==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA260_1121==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA260_1121==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA260_1121==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA260_1121==LW) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA260_1121==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA260_1121==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA260_1121==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA260_1121==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA260_1121==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA260_1121==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA260_1121==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA260_1121==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA260_1121==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA260_1121==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA260_1121==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA260_1121==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA260_1121==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA260_1121==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA260_1121==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA260_1121==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA260_1121==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA260_1121==USING) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA260_1121==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA260_1121==SET) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA260_1121==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA260_1121==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA260_1121==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA260_1121==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA260_1121==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA260_1121==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA260_1121==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA260_1121==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA260_1121==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA260_1121==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA260_1121==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        input.seek(index260_1121);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA260_1182 = input.LA(1);
                        int index260_1182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1182==SELECT) ) {s = 2345;}
                        else if ( (LA260_1182==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA260_1182==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA260_1182==AT) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA260_1182==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA260_1182==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA260_1182==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA260_1182==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA260_1182==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA260_1182==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA260_1182==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA260_1182==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA260_1182==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA260_1182==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA260_1182==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA260_1182==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA260_1182==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA260_1182==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA260_1182==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA260_1182==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA260_1182==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA260_1182==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA260_1182==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA260_1182==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA260_1182==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA260_1182==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA260_1182==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA260_1182==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA260_1182==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA260_1182==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA260_1182==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA260_1182==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA260_1182==LW) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA260_1182==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA260_1182==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA260_1182==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA260_1182==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA260_1182==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA260_1182==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA260_1182==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA260_1182==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA260_1182==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA260_1182==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA260_1182==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA260_1182==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA260_1182==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA260_1182==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA260_1182==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA260_1182==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA260_1182==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA260_1182==USING) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        input.seek(index260_1182);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA260_1192 = input.LA(1);
                        int index260_1192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1192==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA260_1192==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA260_1192==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA260_1192==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA260_1192==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA260_1192==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA260_1192==LT) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA260_1192==GT) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA260_1192==LE) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA260_1192==GE) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA260_1192==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA260_1192==IS) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA260_1192==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA260_1192==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA260_1192==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA260_1192==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA260_1192==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA260_1192==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA260_1192==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA260_1192==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA260_1192==RPAREN) ) {s = 2416;}
                        else if ( (LA260_1192==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA260_1192==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA260_1192==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA260_1192==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA260_1192==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        input.seek(index260_1192);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA260_1193 = input.LA(1);
                        int index260_1193 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1193==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA260_1193==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA260_1193==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA260_1193==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA260_1193==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA260_1193==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA260_1193==LT) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA260_1193==GT) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA260_1193==LE) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA260_1193==GE) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA260_1193==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA260_1193==IS) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA260_1193==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA260_1193==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA260_1193==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA260_1193==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA260_1193==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA260_1193==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA260_1193==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA260_1193==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA260_1193==RPAREN) ) {s = 2442;}
                        else if ( (LA260_1193==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA260_1193==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA260_1193==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA260_1193==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA260_1193==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        input.seek(index260_1193);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA260_1271 = input.LA(1);
                        int index260_1271 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1271==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA260_1271==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA260_1271==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA260_1271==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA260_1271==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA260_1271==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA260_1271==LT) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA260_1271==GT) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA260_1271==LE) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA260_1271==GE) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA260_1271==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA260_1271==IS) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA260_1271==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA260_1271==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA260_1271==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA260_1271==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA260_1271==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA260_1271==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA260_1271==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA260_1271==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA260_1271==RPAREN) ) {s = 2468;}
                        else if ( (LA260_1271==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA260_1271==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA260_1271==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA260_1271==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA260_1271==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        input.seek(index260_1271);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA260_1272 = input.LA(1);
                        int index260_1272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1272==RPAREN) ) {s = 2474;}
                        else if ( (LA260_1272==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA260_1272==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA260_1272==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA260_1272==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA260_1272==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA260_1272==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA260_1272==LT) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA260_1272==GT) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA260_1272==LE) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA260_1272==GE) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA260_1272==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA260_1272==IS) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA260_1272==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA260_1272==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA260_1272==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA260_1272==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA260_1272==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA260_1272==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA260_1272==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA260_1272==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA260_1272==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA260_1272==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA260_1272==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA260_1272==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA260_1272==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        input.seek(index260_1272);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA260_1340 = input.LA(1);
                        int index260_1340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1340==RPAREN) ) {s = 2500;}
                        else if ( (LA260_1340==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA260_1340==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA260_1340==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA260_1340==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA260_1340==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA260_1340==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA260_1340==LT) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA260_1340==GT) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA260_1340==LE) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA260_1340==GE) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA260_1340==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA260_1340==IS) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA260_1340==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA260_1340==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA260_1340==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA260_1340==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA260_1340==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA260_1340==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA260_1340==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA260_1340==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA260_1340==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA260_1340==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA260_1340==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA260_1340==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA260_1340==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        input.seek(index260_1340);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA260_1341 = input.LA(1);
                        int index260_1341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1341==RPAREN) ) {s = 2526;}
                        else if ( (LA260_1341==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA260_1341==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA260_1341==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA260_1341==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA260_1341==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA260_1341==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA260_1341==LT) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA260_1341==GT) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA260_1341==LE) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA260_1341==GE) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA260_1341==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA260_1341==IS) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA260_1341==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA260_1341==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA260_1341==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA260_1341==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA260_1341==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA260_1341==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA260_1341==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA260_1341==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA260_1341==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA260_1341==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA260_1341==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA260_1341==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA260_1341==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        input.seek(index260_1341);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA260_1418 = input.LA(1);
                        int index260_1418 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1418==RPAREN) ) {s = 14;}
                        else if ( (LA260_1418==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA260_1418==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA260_1418==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA260_1418==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA260_1418==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA260_1418==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA260_1418==LT) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA260_1418==GT) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA260_1418==LE) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA260_1418==GE) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA260_1418==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA260_1418==IS) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA260_1418==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA260_1418==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA260_1418==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA260_1418==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA260_1418==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA260_1418==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA260_1418==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA260_1418==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA260_1418==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA260_1418==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA260_1418==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA260_1418==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA260_1418==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        input.seek(index260_1418);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA260_1419 = input.LA(1);
                        int index260_1419 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1419==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA260_1419==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA260_1419==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA260_1419==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA260_1419==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA260_1419==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA260_1419==LT) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA260_1419==GT) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA260_1419==LE) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA260_1419==GE) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA260_1419==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA260_1419==IS) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA260_1419==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA260_1419==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA260_1419==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA260_1419==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA260_1419==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA260_1419==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA260_1419==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA260_1419==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA260_1419==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA260_1419==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA260_1419==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA260_1419==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA260_1419==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA260_1419==RPAREN) ) {s = 14;}
                        input.seek(index260_1419);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA260_1494 = input.LA(1);
                        int index260_1494 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1494==RPAREN) ) {s = 2604;}
                        else if ( (LA260_1494==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA260_1494==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA260_1494==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA260_1494==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA260_1494==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA260_1494==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA260_1494==LT) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA260_1494==GT) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA260_1494==LE) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA260_1494==GE) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA260_1494==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA260_1494==IS) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA260_1494==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA260_1494==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA260_1494==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA260_1494==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA260_1494==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA260_1494==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA260_1494==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA260_1494==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA260_1494==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA260_1494==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA260_1494==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA260_1494==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA260_1494==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        input.seek(index260_1494);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA260_1495 = input.LA(1);
                        int index260_1495 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1495==RPAREN) ) {s = 2630;}
                        else if ( (LA260_1495==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA260_1495==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA260_1495==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA260_1495==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA260_1495==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA260_1495==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA260_1495==LT) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA260_1495==GT) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA260_1495==LE) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA260_1495==GE) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA260_1495==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA260_1495==IS) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA260_1495==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA260_1495==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA260_1495==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA260_1495==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA260_1495==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA260_1495==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA260_1495==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA260_1495==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA260_1495==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA260_1495==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA260_1495==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA260_1495==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA260_1495==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        input.seek(index260_1495);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA260_1572 = input.LA(1);
                        int index260_1572 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1572==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA260_1572==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA260_1572==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA260_1572==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA260_1572==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA260_1572==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA260_1572==LT) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA260_1572==GT) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA260_1572==LE) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA260_1572==GE) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA260_1572==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA260_1572==IS) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA260_1572==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA260_1572==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA260_1572==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA260_1572==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA260_1572==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA260_1572==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA260_1572==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA260_1572==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA260_1572==RPAREN) ) {s = 2676;}
                        else if ( (LA260_1572==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA260_1572==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA260_1572==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA260_1572==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA260_1572==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        input.seek(index260_1572);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA260_1573 = input.LA(1);
                        int index260_1573 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1573==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA260_1573==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA260_1573==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA260_1573==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA260_1573==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA260_1573==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA260_1573==LT) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA260_1573==GT) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA260_1573==LE) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA260_1573==GE) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA260_1573==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA260_1573==IS) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA260_1573==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA260_1573==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA260_1573==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA260_1573==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA260_1573==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA260_1573==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA260_1573==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA260_1573==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA260_1573==RPAREN) ) {s = 2702;}
                        else if ( (LA260_1573==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA260_1573==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA260_1573==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA260_1573==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA260_1573==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        input.seek(index260_1573);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA260_1650 = input.LA(1);
                        int index260_1650 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1650==RPAREN) ) {s = 2708;}
                        else if ( (LA260_1650==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA260_1650==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA260_1650==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA260_1650==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA260_1650==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA260_1650==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA260_1650==LT) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA260_1650==GT) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA260_1650==LE) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA260_1650==GE) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA260_1650==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA260_1650==IS) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA260_1650==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA260_1650==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA260_1650==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA260_1650==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA260_1650==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA260_1650==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA260_1650==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA260_1650==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA260_1650==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA260_1650==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA260_1650==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA260_1650==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA260_1650==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        input.seek(index260_1650);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA260_1651 = input.LA(1);
                        int index260_1651 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1651==RPAREN) ) {s = 2734;}
                        else if ( (LA260_1651==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA260_1651==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA260_1651==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA260_1651==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA260_1651==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA260_1651==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA260_1651==LT) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA260_1651==GT) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA260_1651==LE) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA260_1651==GE) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA260_1651==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA260_1651==IS) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA260_1651==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA260_1651==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA260_1651==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA260_1651==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA260_1651==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA260_1651==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA260_1651==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA260_1651==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA260_1651==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA260_1651==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA260_1651==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA260_1651==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA260_1651==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        input.seek(index260_1651);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA260_1728 = input.LA(1);
                        int index260_1728 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1728==RPAREN) ) {s = 2760;}
                        else if ( (LA260_1728==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA260_1728==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA260_1728==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA260_1728==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA260_1728==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA260_1728==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA260_1728==LT) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA260_1728==GT) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA260_1728==LE) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA260_1728==GE) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA260_1728==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA260_1728==IS) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA260_1728==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA260_1728==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA260_1728==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA260_1728==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA260_1728==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA260_1728==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA260_1728==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA260_1728==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA260_1728==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA260_1728==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA260_1728==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA260_1728==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA260_1728==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        input.seek(index260_1728);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA260_1729 = input.LA(1);
                        int index260_1729 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1729==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA260_1729==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA260_1729==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA260_1729==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA260_1729==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA260_1729==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA260_1729==LT) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA260_1729==GT) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA260_1729==LE) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA260_1729==GE) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA260_1729==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA260_1729==IS) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA260_1729==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA260_1729==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA260_1729==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA260_1729==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA260_1729==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA260_1729==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA260_1729==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA260_1729==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA260_1729==RPAREN) ) {s = 2806;}
                        else if ( (LA260_1729==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA260_1729==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA260_1729==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA260_1729==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA260_1729==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        input.seek(index260_1729);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA260_1806 = input.LA(1);
                        int index260_1806 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1806==RPAREN) ) {s = 2812;}
                        else if ( (LA260_1806==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA260_1806==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA260_1806==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA260_1806==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA260_1806==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA260_1806==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA260_1806==LT) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA260_1806==GT) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA260_1806==LE) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA260_1806==GE) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA260_1806==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA260_1806==IS) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA260_1806==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA260_1806==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA260_1806==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA260_1806==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA260_1806==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA260_1806==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA260_1806==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA260_1806==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA260_1806==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA260_1806==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA260_1806==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA260_1806==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA260_1806==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        input.seek(index260_1806);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA260_1807 = input.LA(1);
                        int index260_1807 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1807==RPAREN) ) {s = 2838;}
                        else if ( (LA260_1807==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA260_1807==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA260_1807==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA260_1807==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA260_1807==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA260_1807==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA260_1807==LT) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA260_1807==GT) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA260_1807==LE) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA260_1807==GE) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA260_1807==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA260_1807==IS) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA260_1807==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA260_1807==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA260_1807==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA260_1807==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA260_1807==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA260_1807==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA260_1807==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA260_1807==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA260_1807==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA260_1807==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA260_1807==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA260_1807==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA260_1807==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        input.seek(index260_1807);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA260_1884 = input.LA(1);
                        int index260_1884 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1884==RPAREN) ) {s = 2864;}
                        else if ( (LA260_1884==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA260_1884==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA260_1884==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA260_1884==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA260_1884==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA260_1884==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA260_1884==LT) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA260_1884==GT) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA260_1884==LE) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA260_1884==GE) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA260_1884==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA260_1884==IS) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA260_1884==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA260_1884==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA260_1884==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA260_1884==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA260_1884==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA260_1884==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA260_1884==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA260_1884==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA260_1884==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA260_1884==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA260_1884==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA260_1884==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA260_1884==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        input.seek(index260_1884);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA260_1885 = input.LA(1);
                        int index260_1885 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1885==RPAREN) ) {s = 2890;}
                        else if ( (LA260_1885==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA260_1885==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA260_1885==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA260_1885==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA260_1885==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA260_1885==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA260_1885==LT) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA260_1885==GT) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA260_1885==LE) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA260_1885==GE) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA260_1885==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA260_1885==IS) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA260_1885==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA260_1885==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA260_1885==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA260_1885==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA260_1885==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA260_1885==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA260_1885==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA260_1885==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA260_1885==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA260_1885==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA260_1885==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA260_1885==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA260_1885==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        input.seek(index260_1885);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA260_1960 = input.LA(1);
                        int index260_1960 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1960==RPAREN) ) {s = 2916;}
                        else if ( (LA260_1960==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA260_1960==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA260_1960==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA260_1960==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA260_1960==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA260_1960==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA260_1960==LT) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA260_1960==GT) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA260_1960==LE) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA260_1960==GE) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA260_1960==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA260_1960==IS) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA260_1960==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA260_1960==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA260_1960==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA260_1960==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA260_1960==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA260_1960==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA260_1960==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA260_1960==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA260_1960==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA260_1960==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA260_1960==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA260_1960==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA260_1960==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        input.seek(index260_1960);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA260_1961 = input.LA(1);
                        int index260_1961 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_1961==RPAREN) ) {s = 2942;}
                        else if ( (LA260_1961==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA260_1961==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA260_1961==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA260_1961==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA260_1961==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA260_1961==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA260_1961==LT) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA260_1961==GT) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA260_1961==LE) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA260_1961==GE) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA260_1961==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA260_1961==IS) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA260_1961==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA260_1961==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA260_1961==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA260_1961==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA260_1961==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA260_1961==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA260_1961==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA260_1961==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA260_1961==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA260_1961==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA260_1961==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA260_1961==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA260_1961==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        input.seek(index260_1961);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA260_2039 = input.LA(1);
                        int index260_2039 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2039==RPAREN) ) {s = 14;}
                        else if ( (LA260_2039==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA260_2039==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA260_2039==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA260_2039==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA260_2039==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA260_2039==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA260_2039==LT) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA260_2039==GT) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA260_2039==LE) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA260_2039==GE) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA260_2039==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA260_2039==IS) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA260_2039==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA260_2039==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA260_2039==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA260_2039==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA260_2039==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA260_2039==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA260_2039==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA260_2039==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA260_2039==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA260_2039==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA260_2039==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA260_2039==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA260_2039==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        input.seek(index260_2039);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA260_2040 = input.LA(1);
                        int index260_2040 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2040==RPAREN) ) {s = 14;}
                        else if ( (LA260_2040==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA260_2040==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA260_2040==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA260_2040==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA260_2040==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA260_2040==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA260_2040==LT) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA260_2040==GT) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA260_2040==LE) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA260_2040==GE) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA260_2040==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA260_2040==IS) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA260_2040==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA260_2040==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA260_2040==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        else if ( (LA260_2040==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA260_2040==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA260_2040==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA260_2040==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA260_2040==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA260_2040==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA260_2040==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA260_2040==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA260_2040==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA260_2040==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        input.seek(index260_2040);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA260_2115 = input.LA(1);
                        int index260_2115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2115==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA260_2115==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA260_2115==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA260_2115==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA260_2115==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA260_2115==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA260_2115==LT) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA260_2115==GT) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA260_2115==LE) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA260_2115==GE) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA260_2115==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA260_2115==IS) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA260_2115==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA260_2115==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA260_2115==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA260_2115==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA260_2115==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA260_2115==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA260_2115==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA260_2115==RPAREN) ) {s = 3039;}
                        else if ( (LA260_2115==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA260_2115==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        else if ( (LA260_2115==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA260_2115==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA260_2115==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        input.seek(index260_2115);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA260_2116 = input.LA(1);
                        int index260_2116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2116==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA260_2116==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA260_2116==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA260_2116==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA260_2116==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA260_2116==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA260_2116==LT) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA260_2116==GT) && (synpred3_EsperEPL2Grammar())) {s = 3052;}
                        else if ( (LA260_2116==LE) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA260_2116==GE) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA260_2116==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA260_2116==IS) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA260_2116==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA260_2116==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA260_2116==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA260_2116==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA260_2116==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3061;}
                        else if ( (LA260_2116==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA260_2116==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA260_2116==RPAREN) ) {s = 3064;}
                        else if ( (LA260_2116==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA260_2116==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA260_2116==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA260_2116==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3068;}
                        else if ( (LA260_2116==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3069;}
                        input.seek(index260_2116);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA260_2191 = input.LA(1);
                        int index260_2191 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2191==RPAREN) ) {s = 14;}
                        else if ( (LA260_2191==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA260_2191==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3072;}
                        else if ( (LA260_2191==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA260_2191==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA260_2191==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA260_2191==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA260_2191==LT) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        else if ( (LA260_2191==GT) && (synpred3_EsperEPL2Grammar())) {s = 3078;}
                        else if ( (LA260_2191==LE) && (synpred3_EsperEPL2Grammar())) {s = 3079;}
                        else if ( (LA260_2191==GE) && (synpred3_EsperEPL2Grammar())) {s = 3080;}
                        else if ( (LA260_2191==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA260_2191==IS) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA260_2191==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA260_2191==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA260_2191==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        else if ( (LA260_2191==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA260_2191==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA260_2191==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA260_2191==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA260_2191==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA260_2191==AS) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA260_2191==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA260_2191==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        else if ( (LA260_2191==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA260_2191==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA260_2191==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3096;}
                        input.seek(index260_2191);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA260_2192 = input.LA(1);
                        int index260_2192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2192==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3097;}
                        else if ( (LA260_2192==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA260_2192==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA260_2192==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA260_2192==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA260_2192==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        else if ( (LA260_2192==LT) && (synpred3_EsperEPL2Grammar())) {s = 3103;}
                        else if ( (LA260_2192==GT) && (synpred3_EsperEPL2Grammar())) {s = 3104;}
                        else if ( (LA260_2192==LE) && (synpred3_EsperEPL2Grammar())) {s = 3105;}
                        else if ( (LA260_2192==GE) && (synpred3_EsperEPL2Grammar())) {s = 3106;}
                        else if ( (LA260_2192==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3107;}
                        else if ( (LA260_2192==IS) && (synpred3_EsperEPL2Grammar())) {s = 3108;}
                        else if ( (LA260_2192==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3109;}
                        else if ( (LA260_2192==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3110;}
                        else if ( (LA260_2192==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3111;}
                        else if ( (LA260_2192==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3112;}
                        else if ( (LA260_2192==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3113;}
                        else if ( (LA260_2192==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3114;}
                        else if ( (LA260_2192==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3115;}
                        else if ( (LA260_2192==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3116;}
                        else if ( (LA260_2192==AS) && (synpred3_EsperEPL2Grammar())) {s = 3117;}
                        else if ( (LA260_2192==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3118;}
                        else if ( (LA260_2192==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3119;}
                        else if ( (LA260_2192==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3120;}
                        else if ( (LA260_2192==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3121;}
                        else if ( (LA260_2192==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3122;}
                        else if ( (LA260_2192==RPAREN) ) {s = 14;}
                        input.seek(index260_2192);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA260_2267 = input.LA(1);
                        int index260_2267 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2267==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3124;}
                        else if ( (LA260_2267==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3125;}
                        else if ( (LA260_2267==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3126;}
                        else if ( (LA260_2267==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3127;}
                        else if ( (LA260_2267==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3128;}
                        else if ( (LA260_2267==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3129;}
                        else if ( (LA260_2267==LT) && (synpred3_EsperEPL2Grammar())) {s = 3130;}
                        else if ( (LA260_2267==GT) && (synpred3_EsperEPL2Grammar())) {s = 3131;}
                        else if ( (LA260_2267==LE) && (synpred3_EsperEPL2Grammar())) {s = 3132;}
                        else if ( (LA260_2267==GE) && (synpred3_EsperEPL2Grammar())) {s = 3133;}
                        else if ( (LA260_2267==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3134;}
                        else if ( (LA260_2267==IS) && (synpred3_EsperEPL2Grammar())) {s = 3135;}
                        else if ( (LA260_2267==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3136;}
                        else if ( (LA260_2267==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3137;}
                        else if ( (LA260_2267==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3138;}
                        else if ( (LA260_2267==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3139;}
                        else if ( (LA260_2267==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3140;}
                        else if ( (LA260_2267==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3141;}
                        else if ( (LA260_2267==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3142;}
                        else if ( (LA260_2267==RPAREN) ) {s = 3143;}
                        else if ( (LA260_2267==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3144;}
                        else if ( (LA260_2267==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3145;}
                        else if ( (LA260_2267==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3146;}
                        else if ( (LA260_2267==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3147;}
                        else if ( (LA260_2267==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3148;}
                        input.seek(index260_2267);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA260_2268 = input.LA(1);
                        int index260_2268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_2268==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3149;}
                        else if ( (LA260_2268==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3150;}
                        else if ( (LA260_2268==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3151;}
                        else if ( (LA260_2268==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3152;}
                        else if ( (LA260_2268==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3153;}
                        else if ( (LA260_2268==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3154;}
                        else if ( (LA260_2268==LT) && (synpred3_EsperEPL2Grammar())) {s = 3155;}
                        else if ( (LA260_2268==GT) && (synpred3_EsperEPL2Grammar())) {s = 3156;}
                        else if ( (LA260_2268==LE) && (synpred3_EsperEPL2Grammar())) {s = 3157;}
                        else if ( (LA260_2268==GE) && (synpred3_EsperEPL2Grammar())) {s = 3158;}
                        else if ( (LA260_2268==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3159;}
                        else if ( (LA260_2268==IS) && (synpred3_EsperEPL2Grammar())) {s = 3160;}
                        else if ( (LA260_2268==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3161;}
                        else if ( (LA260_2268==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3162;}
                        else if ( (LA260_2268==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3163;}
                        else if ( (LA260_2268==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3164;}
                        else if ( (LA260_2268==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3165;}
                        else if ( (LA260_2268==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3166;}
                        else if ( (LA260_2268==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3167;}
                        else if ( (LA260_2268==RPAREN) ) {s = 3168;}
                        else if ( (LA260_2268==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3169;}
                        else if ( (LA260_2268==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3170;}
                        else if ( (LA260_2268==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3171;}
                        else if ( (LA260_2268==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3172;}
                        else if ( (LA260_2268==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3173;}
                        input.seek(index260_2268);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA260_2416 = input.LA(1);
                        int index260_2416 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2416);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA260_2442 = input.LA(1);
                        int index260_2442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2442);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA260_2468 = input.LA(1);
                        int index260_2468 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2468);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA260_2474 = input.LA(1);
                        int index260_2474 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2474);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA260_2500 = input.LA(1);
                        int index260_2500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2500);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA260_2526 = input.LA(1);
                        int index260_2526 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2526);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA260_2604 = input.LA(1);
                        int index260_2604 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2604);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA260_2630 = input.LA(1);
                        int index260_2630 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2630);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA260_2676 = input.LA(1);
                        int index260_2676 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2676);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA260_2702 = input.LA(1);
                        int index260_2702 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2702);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA260_2708 = input.LA(1);
                        int index260_2708 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2708);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA260_2734 = input.LA(1);
                        int index260_2734 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2734);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA260_2760 = input.LA(1);
                        int index260_2760 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2760);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA260_2806 = input.LA(1);
                        int index260_2806 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2806);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA260_2812 = input.LA(1);
                        int index260_2812 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2812);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA260_2838 = input.LA(1);
                        int index260_2838 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2838);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA260_2864 = input.LA(1);
                        int index260_2864 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2864);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA260_2890 = input.LA(1);
                        int index260_2890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2890);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA260_2916 = input.LA(1);
                        int index260_2916 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2916);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA260_2942 = input.LA(1);
                        int index260_2942 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_2942);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA260_3039 = input.LA(1);
                        int index260_3039 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_3039);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA260_3064 = input.LA(1);
                        int index260_3064 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_3064);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA260_3143 = input.LA(1);
                        int index260_3143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_3143);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA260_3168 = input.LA(1);
                        int index260_3168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index260_3168);
    return s;
  }
    }
    static final String DFA314_eotS =
        "\u07d9\uffff";
    static final String DFA314_eofS =
        "\1\uffff\1\125\1\u0092\6\uffff\1\u00cf\1\u010c\4\uffff\1\u0149"+
        "\u01a9\uffff\1\u03aa\1\u03e6\1\u0423\6\uffff\1\u0460\1\u049d\53"+
        "\uffff\1\u04db\1\u0517\1\u0554\6\uffff\1\u0591\1\u05ce\u011e\uffff"+
        "\1\u06c6\1\u0702\1\u073f\6\uffff\1\u077c\1\u07b9\u04b6\uffff";
    static final String DFA314_minS =
        "\1\5\2\6\6\uffff\2\6\4\uffff\1\6\51\uffff\1\5\1\uffff\1\5\70\uffff"+
        "\2\5\75\uffff\1\5\72\uffff\1\5\74\uffff\1\5\111\uffff\2\6\102\uffff"+
        "\3\6\6\uffff\2\6\53\uffff\3\6\6\uffff\2\6\70\uffff\2\6\117\uffff"+
        "\2\6\117\uffff\2\6\102\uffff\3\6\6\uffff\2\6\104\uffff\1\0\36\uffff"+
        "\1\0\5\uffff\2\0\167\uffff\2\0\73\uffff\2\0\74\uffff\1\0\74\uffff"+
        "\2\0\167\uffff\2\0\73\uffff\2\0\74\uffff\1\0\125\uffff\1\0\36\uffff"+
        "\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff\1\0\5\uffff"+
        "\2\0\167\uffff\2\0\73\uffff\2\0\74\uffff\1\0\74\uffff";
    static final String DFA314_maxS =
        "\1\u0167\2\u0166\6\uffff\2\u0166\4\uffff\1\u0166\51\uffff\1\u0169"+
        "\1\uffff\1\u0167\70\uffff\1\u0167\1\u0169\75\uffff\1\u0169\72\uffff"+
        "\1\u0169\74\uffff\1\u0167\111\uffff\2\u0162\102\uffff\3\u0166\6"+
        "\uffff\2\u0166\53\uffff\3\u0166\6\uffff\2\u0166\70\uffff\2\u0162"+
        "\117\uffff\2\u0162\117\uffff\2\u0162\102\uffff\3\u0166\6\uffff\2"+
        "\u0166\104\uffff\1\0\36\uffff\1\0\5\uffff\2\0\167\uffff\2\0\73\uffff"+
        "\2\0\74\uffff\1\0\74\uffff\2\0\167\uffff\2\0\73\uffff\2\0\74\uffff"+
        "\1\0\125\uffff\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff"+
        "\1\0\36\uffff\1\0\5\uffff\2\0\167\uffff\2\0\73\uffff\2\0\74\uffff"+
        "\1\0\74\uffff";
    static final String DFA314_acceptS =
        "\3\uffff\6\1\2\uffff\4\1\1\uffff\43\1\1\2\3\uffff\2\1\1\uffff\1"+
        "\1\1\uffff\70\1\2\uffff\75\1\1\uffff\72\1\1\uffff\74\1\1\uffff\74"+
        "\1\124\uffff\6\1\2\uffff\47\1\7\uffff\6\1\2\uffff\47\1\u00fa\uffff"+
        "\6\1\2\uffff\47\1\104\uffff\167\1\2\uffff\73\1\2\uffff\74\1\1\uffff"+
        "\74\1\2\uffff\167\1\2\uffff\73\1\2\uffff\74\1\1\uffff\74\1\u00bc"+
        "\uffff\167\1\2\uffff\73\1\2\uffff\74\1\1\uffff\74\1";
    static final String DFA314_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\4\uffff\1\5\53\uffff\1\6\70\uffff"+
        "\1\7\u00b6\uffff\1\10\u008d\uffff\1\11\1\12\1\13\6\uffff\1\14\1"+
        "\15\53\uffff\1\16\1\17\1\20\6\uffff\1\21\1\22\u011e\uffff\1\23\1"+
        "\24\1\25\6\uffff\1\26\1\27\104\uffff\1\30\36\uffff\1\31\5\uffff"+
        "\1\32\1\33\167\uffff\1\34\1\35\73\uffff\1\36\1\37\74\uffff\1\40"+
        "\74\uffff\1\41\1\42\167\uffff\1\43\1\44\73\uffff\1\45\1\46\74\uffff"+
        "\1\47\125\uffff\1\50\36\uffff\1\51\36\uffff\1\52\36\uffff\1\53\36"+
        "\uffff\1\54\36\uffff\1\55\5\uffff\1\56\1\57\167\uffff\1\60\1\61"+
        "\73\uffff\1\62\1\63\74\uffff\1\64\74\uffff}>";
    static final String[] DFA314_transitionS = {
            "\1\47\1\uffff\1\63\2\uffff\1\5\3\uffff\1\6\1\uffff\1\63\1\uffff"+
            "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\4\10\uffff\1\52\1"+
            "\uffff\1\54\1\50\1\51\1\53\12\uffff\1\17\1\20\1\21\11\uffff"+
            "\1\25\1\26\1\27\1\31\1\32\1\33\1\34\1\35\2\uffff\1\36\1\uffff"+
            "\1\37\1\40\1\41\1\42\1\43\2\uffff\1\44\1\63\1\45\1\30\1\3\1"+
            "\46\32\uffff\1\55\1\56\1\57\1\63\1\61\1\22\1\62\1\23\1\24\3"+
            "\uffff\1\60\u00c6\uffff\1\1\41\uffff\1\2",
            "\1\157\1\160\1\161\1\162\1\163\1\116\1\115\1\156\2\uffff\1"+
            "\134\1\135\14\uffff\1\145\1\127\1\130\1\146\1\136\7\uffff\1"+
            "\107\1\uffff\1\117\1\120\1\uffff\1\140\2\uffff\1\121\3\uffff"+
            "\1\131\1\uffff\1\122\1\143\1\144\7\uffff\1\142\41\uffff\1\155"+
            "\1\154\1\153\6\uffff\1\123\3\uffff\1\137\3\uffff\1\141\1\124"+
            "\u00cc\uffff\1\70\1\150\1\uffff\1\71\1\126\1\147\1\uffff\1\132"+
            "\1\uffff\1\152\1\133\1\106\1\73\1\74\1\uffff\1\102\1\103\1\72"+
            "\1\113\1\77\2\uffff\1\112\1\114\1\110\1\111\1\104\1\105\1\101"+
            "\1\100\1\75\1\76\2\uffff\1\151\1\67",
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u008b\1\u008a\1"+
            "\u00ab\2\uffff\1\u0099\1\u009a\14\uffff\1\u00a2\1\u0094\1\u0095"+
            "\1\u00a3\1\u009b\7\uffff\1\u0084\1\uffff\1\u008c\1\u008d\1\uffff"+
            "\1\u009d\2\uffff\1\u008e\3\uffff\1\u0096\1\uffff\1\u008f\1\u00a0"+
            "\1\u00a1\7\uffff\1\u009f\41\uffff\1\u00aa\1\u00a9\1\u00a8\6"+
            "\uffff\1\u0090\3\uffff\1\u009c\3\uffff\1\u009e\1\u0091\u00cc"+
            "\uffff\1\167\1\u00a5\1\uffff\1\165\1\u0093\1\u00a4\1\uffff\1"+
            "\u0097\1\uffff\1\u00a7\1\u0098\1\u0083\1\164\1\171\1\uffff\1"+
            "\177\1\u0080\1\170\1\u0088\1\174\2\uffff\1\u0087\1\u0089\1\u0085"+
            "\1\u0086\1\u0081\1\u0082\1\176\1\175\1\172\1\173\2\uffff\1\u00a6"+
            "\1\166",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed\1\u00c8\1\u00c7\1"+
            "\u00e8\2\uffff\1\u00d6\1\u00d7\14\uffff\1\u00df\1\u00d1\1\u00d2"+
            "\1\u00e0\1\u00d8\7\uffff\1\u00c1\1\uffff\1\u00c9\1\u00ca\1\uffff"+
            "\1\u00da\2\uffff\1\u00cb\3\uffff\1\u00d3\1\uffff\1\u00cc\1\u00dd"+
            "\1\u00de\7\uffff\1\u00dc\41\uffff\1\u00e7\1\u00e6\1\u00e5\6"+
            "\uffff\1\u00cd\3\uffff\1\u00d9\3\uffff\1\u00db\1\u00ce\u00cc"+
            "\uffff\1\u00b2\1\u00e2\1\uffff\1\u00b3\1\u00d0\1\u00e1\1\uffff"+
            "\1\u00d4\1\uffff\1\u00e4\1\u00d5\1\u00c0\1\u00b5\1\u00b6\1\uffff"+
            "\1\u00bc\1\u00bd\1\u00b4\1\u00c5\1\u00b9\2\uffff\1\u00c4\1\u00c6"+
            "\1\u00c2\1\u00c3\1\u00be\1\u00bf\1\u00bb\1\u00ba\1\u00b7\1\u00b8"+
            "\2\uffff\1\u00e3\1\u00b1",
            "\1\u0126\1\u0127\1\u0128\1\u0129\1\u012a\1\u0105\1\u0104\1"+
            "\u0125\2\uffff\1\u0113\1\u0114\14\uffff\1\u011c\1\u010e\1\u010f"+
            "\1\u011d\1\u0115\7\uffff\1\u00fe\1\uffff\1\u0106\1\u0107\1\uffff"+
            "\1\u0117\2\uffff\1\u0108\3\uffff\1\u0110\1\uffff\1\u0109\1\u011a"+
            "\1\u011b\7\uffff\1\u0119\41\uffff\1\u0124\1\u0123\1\u0122\6"+
            "\uffff\1\u010a\3\uffff\1\u0116\3\uffff\1\u0118\1\u010b\u00cc"+
            "\uffff\1\u00f0\1\u011f\1\uffff\1\u00ee\1\u010d\1\u011e\1\uffff"+
            "\1\u0111\1\uffff\1\u0121\1\u0112\1\u00fd\1\u00f2\1\u00f3\1\uffff"+
            "\1\u00f9\1\u00fa\1\u00f1\1\u0102\1\u00f6\2\uffff\1\u0101\1\u0103"+
            "\1\u00ff\1\u0100\1\u00fb\1\u00fc\1\u00f8\1\u00f7\1\u00f4\1\u00f5"+
            "\2\uffff\1\u0120\1\u00ef",
            "",
            "",
            "",
            "",
            "\1\u0163\1\u0164\1\u0165\1\u0166\1\u0167\1\u0142\1\u0141\1"+
            "\u0162\2\uffff\1\u0150\1\u0151\14\uffff\1\u0159\1\u014b\1\u014c"+
            "\1\u015a\1\u0152\7\uffff\1\u013b\1\uffff\1\u0143\1\u0144\1\uffff"+
            "\1\u0154\2\uffff\1\u0145\3\uffff\1\u014d\1\uffff\1\u0146\1\u0157"+
            "\1\u0158\7\uffff\1\u0156\41\uffff\1\u0161\1\u0160\1\u015f\6"+
            "\uffff\1\u0147\3\uffff\1\u0153\3\uffff\1\u0155\1\u0148\u00cc"+
            "\uffff\1\u012d\1\u015c\1\uffff\1\u012e\1\u014a\1\u015b\1\uffff"+
            "\1\u014e\1\uffff\1\u015e\1\u014f\1\u013a\1\u012b\1\u0130\1\uffff"+
            "\1\u0136\1\u0137\1\u012f\1\u013f\1\u0133\2\uffff\1\u013e\1\u0140"+
            "\1\u013c\1\u013d\1\u0138\1\u0139\1\u0135\1\u0134\1\u0131\1\u0132"+
            "\2\uffff\1\u015d\1\u012c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u0175\1\u0176\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "\1\u01df\1\uffff\1\63\2\uffff\1\u01be\3\uffff\1\u01bf\1\uffff"+
            "\1\63\1\uffff\1\u01c0\1\u01c1\1\u01c2\1\u01c3\1\u01c4\1\u01c5"+
            "\1\u01c6\1\u01c7\1\u01bd\10\uffff\1\u01e2\1\uffff\1\u01e4\1"+
            "\u01e0\1\u01e1\1\u01e3\12\uffff\1\u01ba\1\u01c8\1\u01c9\11\uffff"+
            "\1\u01cd\1\u01ce\1\u01cf\1\u01d1\1\u01d2\1\u01d3\1\u01d4\1\u01d5"+
            "\2\uffff\1\u01d6\1\uffff\1\u01d7\1\u01d8\1\u01d9\1\u01da\1\u01db"+
            "\2\uffff\1\u01dc\1\63\1\u01dd\1\u01d0\1\u01bc\1\u01de\32\uffff"+
            "\1\u01e5\1\u01e6\1\u01e7\1\63\1\u01e9\1\u01ca\1\u01ea\1\u01cb"+
            "\1\u01cc\3\uffff\1\u01e8\u00c6\uffff\1\u01b9\41\uffff\1\u01bb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0215\1\uffff\1\63\2\uffff\1\u01f4\3\uffff\1\u01f5\1\uffff"+
            "\1\63\1\uffff\1\u01f6\1\u01f7\1\u01f8\1\u01f9\1\u01fa\1\u01fb"+
            "\1\u01fc\1\u01fd\1\u01f3\10\uffff\1\u0218\1\uffff\1\u021a\1"+
            "\u0216\1\u0217\1\u0219\12\uffff\1\u01f0\1\u01fe\1\u01ff\11\uffff"+
            "\1\u0203\1\u0204\1\u0205\1\u0207\1\u0208\1\u0209\1\u020a\1\u020b"+
            "\2\uffff\1\u020c\1\uffff\1\u020d\1\u020e\1\u020f\1\u0210\1\u0211"+
            "\2\uffff\1\u0212\1\63\1\u0213\1\u0206\1\u01f2\1\u0214\32\uffff"+
            "\1\u021b\1\u021c\1\u021d\1\63\1\u021f\1\u0200\1\u0220\1\u0201"+
            "\1\u0202\3\uffff\1\u021e\u00c6\uffff\1\u01ef\41\uffff\1\u01f1",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u0232\1\u0233\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u0283\1\u0284\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u02d4\1\u02d5\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u033e\1\uffff\1\63\2\uffff\1\u031d\3\uffff\1\u031e\1\uffff"+
            "\1\63\1\uffff\1\u031f\1\u0320\1\u0321\1\u0322\1\u0323\1\u0324"+
            "\1\u0325\1\u0326\1\u031c\10\uffff\1\u0341\1\uffff\1\u0343\1"+
            "\u033f\1\u0340\1\u0342\12\uffff\1\u0319\1\u0327\1\u0328\11\uffff"+
            "\1\u032c\1\u032d\1\u032e\1\u0330\1\u0331\1\u0332\1\u0333\1\u0334"+
            "\2\uffff\1\u0335\1\uffff\1\u0336\1\u0337\1\u0338\1\u0339\1\u033a"+
            "\2\uffff\1\u033b\1\63\1\u033c\1\u032f\1\u031b\1\u033d\32\uffff"+
            "\1\u0344\1\u0345\1\u0346\1\63\1\u0348\1\u0329\1\u0349\1\u032a"+
            "\1\u032b\3\uffff\1\u0347\u00c6\uffff\1\u0318\41\uffff\1\u031a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0367\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0386\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03c4\1\u03c5\1\u03c6\1\u03c7\1\u03c8\1\u03a3\1\u03a2\1"+
            "\u03c3\2\uffff\1\u03b1\1\u03b2\14\uffff\1\u03ba\1\u03ac\1\u03ad"+
            "\1\u03bb\1\u03b3\7\uffff\1\u039c\1\uffff\1\u03a4\1\u03a5\1\uffff"+
            "\1\u03b5\2\uffff\1\u03a6\3\uffff\1\u03ae\1\uffff\1\u03a7\1\u03b8"+
            "\1\u03b9\7\uffff\1\u03b7\41\uffff\1\u03c2\1\u03c1\1\u03c0\6"+
            "\uffff\1\u03a8\3\uffff\1\u03b4\3\uffff\1\u03b6\1\u03a9\u00cc"+
            "\uffff\1\u038f\1\u03bd\1\uffff\1\u038c\1\u03ab\1\u03bc\1\uffff"+
            "\1\u03af\1\uffff\1\u03bf\1\u03b0\1\u039b\1\u038d\1\u0391\1\uffff"+
            "\1\u0397\1\u0398\1\u0390\1\u03a0\1\u0394\2\uffff\1\u039f\1\u03a1"+
            "\1\u039d\1\u039e\1\u0399\1\u039a\1\u0396\1\u0395\1\u0392\1\u0393"+
            "\2\uffff\1\u03be\1\u038e",
            "\1\u0400\1\u0401\1\u0402\1\u0403\1\u0404\1\u03df\1\u03de\1"+
            "\u03ff\2\uffff\1\u03ed\1\u03ee\14\uffff\1\u03f6\1\u03e8\1\u03e9"+
            "\1\u03f7\1\u03ef\7\uffff\1\u03d8\1\uffff\1\u03e0\1\u03e1\1\uffff"+
            "\1\u03f1\2\uffff\1\u03e2\3\uffff\1\u03ea\1\uffff\1\u03e3\1\u03f4"+
            "\1\u03f5\7\uffff\1\u03f3\41\uffff\1\u03fe\1\u03fd\1\u03fc\6"+
            "\uffff\1\u03e4\3\uffff\1\u03f0\3\uffff\1\u03f2\1\u03e5\u00cc"+
            "\uffff\1\u03ca\1\u03f9\1\uffff\1\u03cb\1\u03e7\1\u03f8\1\uffff"+
            "\1\u03eb\1\uffff\1\u03fb\1\u03ec\1\u03d7\1\u0405\1\u03cd\1\uffff"+
            "\1\u03d3\1\u03d4\1\u03cc\1\u03dc\1\u03d0\2\uffff\1\u03db\1\u03dd"+
            "\1\u03d9\1\u03da\1\u03d5\1\u03d6\1\u03d2\1\u03d1\1\u03ce\1\u03cf"+
            "\2\uffff\1\u03fa\1\u03c9",
            "\1\u043d\1\u043e\1\u043f\1\u0440\1\u0441\1\u041c\1\u041b\1"+
            "\u043c\2\uffff\1\u042a\1\u042b\14\uffff\1\u0433\1\u0425\1\u0426"+
            "\1\u0434\1\u042c\7\uffff\1\u0415\1\uffff\1\u041d\1\u041e\1\uffff"+
            "\1\u042e\2\uffff\1\u041f\3\uffff\1\u0427\1\uffff\1\u0420\1\u0431"+
            "\1\u0432\7\uffff\1\u0430\41\uffff\1\u043b\1\u043a\1\u0439\6"+
            "\uffff\1\u0421\3\uffff\1\u042d\3\uffff\1\u042f\1\u0422\u00cc"+
            "\uffff\1\u0408\1\u0436\1\uffff\1\u0406\1\u0424\1\u0435\1\uffff"+
            "\1\u0428\1\uffff\1\u0438\1\u0429\1\u0414\1\u0442\1\u040a\1\uffff"+
            "\1\u0410\1\u0411\1\u0409\1\u0419\1\u040d\2\uffff\1\u0418\1\u041a"+
            "\1\u0416\1\u0417\1\u0412\1\u0413\1\u040f\1\u040e\1\u040b\1\u040c"+
            "\2\uffff\1\u0437\1\u0407",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u047a\1\u047b\1\u047c\1\u047d\1\u047e\1\u0459\1\u0458\1"+
            "\u0479\2\uffff\1\u0467\1\u0468\14\uffff\1\u0470\1\u0462\1\u0463"+
            "\1\u0471\1\u0469\7\uffff\1\u0452\1\uffff\1\u045a\1\u045b\1\uffff"+
            "\1\u046b\2\uffff\1\u045c\3\uffff\1\u0464\1\uffff\1\u045d\1\u046e"+
            "\1\u046f\7\uffff\1\u046d\41\uffff\1\u0478\1\u0477\1\u0476\6"+
            "\uffff\1\u045e\3\uffff\1\u046a\3\uffff\1\u046c\1\u045f\u00cc"+
            "\uffff\1\u0445\1\u0473\1\uffff\1\u0443\1\u0461\1\u0472\1\uffff"+
            "\1\u0465\1\uffff\1\u0475\1\u0466\1\u0451\1\u047f\1\u0447\1\uffff"+
            "\1\u044d\1\u044e\1\u0446\1\u0456\1\u044a\2\uffff\1\u0455\1\u0457"+
            "\1\u0453\1\u0454\1\u044f\1\u0450\1\u044c\1\u044b\1\u0448\1\u0449"+
            "\2\uffff\1\u0474\1\u0444",
            "\1\u04b7\1\u04b8\1\u04b9\1\u04ba\1\u04bb\1\u0496\1\u0495\1"+
            "\u04b6\2\uffff\1\u04a4\1\u04a5\14\uffff\1\u04ad\1\u049f\1\u04a0"+
            "\1\u04ae\1\u04a6\7\uffff\1\u048f\1\uffff\1\u0497\1\u0498\1\uffff"+
            "\1\u04a8\2\uffff\1\u0499\3\uffff\1\u04a1\1\uffff\1\u049a\1\u04ab"+
            "\1\u04ac\7\uffff\1\u04aa\41\uffff\1\u04b5\1\u04b4\1\u04b3\6"+
            "\uffff\1\u049b\3\uffff\1\u04a7\3\uffff\1\u04a9\1\u049c\u00cc"+
            "\uffff\1\u0482\1\u04b0\1\uffff\1\u0480\1\u049e\1\u04af\1\uffff"+
            "\1\u04a2\1\uffff\1\u04b2\1\u04a3\1\u048e\1\u04bc\1\u0484\1\uffff"+
            "\1\u048a\1\u048b\1\u0483\1\u0493\1\u0487\2\uffff\1\u0492\1\u0494"+
            "\1\u0490\1\u0491\1\u048c\1\u048d\1\u0489\1\u0488\1\u0485\1\u0486"+
            "\2\uffff\1\u04b1\1\u0481",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f5\1\u04f6\1\u04f7\1\u04f8\1\u04f9\1\u04d4\1\u04d3\1"+
            "\u04f4\2\uffff\1\u04e2\1\u04e3\14\uffff\1\u04eb\1\u04dd\1\u04de"+
            "\1\u04ec\1\u04e4\7\uffff\1\u04cd\1\uffff\1\u04d5\1\u04d6\1\uffff"+
            "\1\u04e6\2\uffff\1\u04d7\3\uffff\1\u04df\1\uffff\1\u04d8\1\u04e9"+
            "\1\u04ea\7\uffff\1\u04e8\41\uffff\1\u04f3\1\u04f2\1\u04f1\6"+
            "\uffff\1\u04d9\3\uffff\1\u04e5\3\uffff\1\u04e7\1\u04da\u00cc"+
            "\uffff\1\u04c0\1\u04ee\1\uffff\1\u04bd\1\u04dc\1\u04ed\1\uffff"+
            "\1\u04e0\1\uffff\1\u04f0\1\u04e1\1\u04cc\1\u04be\1\u04c2\1\uffff"+
            "\1\u04c8\1\u04c9\1\u04c1\1\u04d1\1\u04c5\2\uffff\1\u04d0\1\u04d2"+
            "\1\u04ce\1\u04cf\1\u04ca\1\u04cb\1\u04c7\1\u04c6\1\u04c3\1\u04c4"+
            "\2\uffff\1\u04ef\1\u04bf",
            "\1\u0531\1\u0532\1\u0533\1\u0534\1\u0535\1\u0510\1\u050f\1"+
            "\u0530\2\uffff\1\u051e\1\u051f\14\uffff\1\u0527\1\u0519\1\u051a"+
            "\1\u0528\1\u0520\7\uffff\1\u0509\1\uffff\1\u0511\1\u0512\1\uffff"+
            "\1\u0522\2\uffff\1\u0513\3\uffff\1\u051b\1\uffff\1\u0514\1\u0525"+
            "\1\u0526\7\uffff\1\u0524\41\uffff\1\u052f\1\u052e\1\u052d\6"+
            "\uffff\1\u0515\3\uffff\1\u0521\3\uffff\1\u0523\1\u0516\u00cc"+
            "\uffff\1\u04fb\1\u052a\1\uffff\1\u04fc\1\u0518\1\u0529\1\uffff"+
            "\1\u051c\1\uffff\1\u052c\1\u051d\1\u0508\1\u0536\1\u04fe\1\uffff"+
            "\1\u0504\1\u0505\1\u04fd\1\u050d\1\u0501\2\uffff\1\u050c\1\u050e"+
            "\1\u050a\1\u050b\1\u0506\1\u0507\1\u0503\1\u0502\1\u04ff\1\u0500"+
            "\2\uffff\1\u052b\1\u04fa",
            "\1\u056e\1\u056f\1\u0570\1\u0571\1\u0572\1\u054d\1\u054c\1"+
            "\u056d\2\uffff\1\u055b\1\u055c\14\uffff\1\u0564\1\u0556\1\u0557"+
            "\1\u0565\1\u055d\7\uffff\1\u0546\1\uffff\1\u054e\1\u054f\1\uffff"+
            "\1\u055f\2\uffff\1\u0550\3\uffff\1\u0558\1\uffff\1\u0551\1\u0562"+
            "\1\u0563\7\uffff\1\u0561\41\uffff\1\u056c\1\u056b\1\u056a\6"+
            "\uffff\1\u0552\3\uffff\1\u055e\3\uffff\1\u0560\1\u0553\u00cc"+
            "\uffff\1\u0539\1\u0567\1\uffff\1\u0537\1\u0555\1\u0566\1\uffff"+
            "\1\u0559\1\uffff\1\u0569\1\u055a\1\u0545\1\u0573\1\u053b\1\uffff"+
            "\1\u0541\1\u0542\1\u053a\1\u054a\1\u053e\2\uffff\1\u0549\1\u054b"+
            "\1\u0547\1\u0548\1\u0543\1\u0544\1\u0540\1\u053f\1\u053c\1\u053d"+
            "\2\uffff\1\u0568\1\u0538",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05ab\1\u05ac\1\u05ad\1\u05ae\1\u05af\1\u058a\1\u0589\1"+
            "\u05aa\2\uffff\1\u0598\1\u0599\14\uffff\1\u05a1\1\u0593\1\u0594"+
            "\1\u05a2\1\u059a\7\uffff\1\u0583\1\uffff\1\u058b\1\u058c\1\uffff"+
            "\1\u059c\2\uffff\1\u058d\3\uffff\1\u0595\1\uffff\1\u058e\1\u059f"+
            "\1\u05a0\7\uffff\1\u059e\41\uffff\1\u05a9\1\u05a8\1\u05a7\6"+
            "\uffff\1\u058f\3\uffff\1\u059b\3\uffff\1\u059d\1\u0590\u00cc"+
            "\uffff\1\u0576\1\u05a4\1\uffff\1\u0574\1\u0592\1\u05a3\1\uffff"+
            "\1\u0596\1\uffff\1\u05a6\1\u0597\1\u0582\1\u05b0\1\u0578\1\uffff"+
            "\1\u057e\1\u057f\1\u0577\1\u0587\1\u057b\2\uffff\1\u0586\1\u0588"+
            "\1\u0584\1\u0585\1\u0580\1\u0581\1\u057d\1\u057c\1\u0579\1\u057a"+
            "\2\uffff\1\u05a5\1\u0575",
            "\1\u05e8\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05c7\1\u05c6\1"+
            "\u05e7\2\uffff\1\u05d5\1\u05d6\14\uffff\1\u05de\1\u05d0\1\u05d1"+
            "\1\u05df\1\u05d7\7\uffff\1\u05c0\1\uffff\1\u05c8\1\u05c9\1\uffff"+
            "\1\u05d9\2\uffff\1\u05ca\3\uffff\1\u05d2\1\uffff\1\u05cb\1\u05dc"+
            "\1\u05dd\7\uffff\1\u05db\41\uffff\1\u05e6\1\u05e5\1\u05e4\6"+
            "\uffff\1\u05cc\3\uffff\1\u05d8\3\uffff\1\u05da\1\u05cd\u00cc"+
            "\uffff\1\u05b3\1\u05e1\1\uffff\1\u05b1\1\u05cf\1\u05e0\1\uffff"+
            "\1\u05d3\1\uffff\1\u05e3\1\u05d4\1\u05bf\1\u05ed\1\u05b5\1\uffff"+
            "\1\u05bb\1\u05bc\1\u05b4\1\u05c4\1\u05b8\2\uffff\1\u05c3\1\u05c5"+
            "\1\u05c1\1\u05c2\1\u05bd\1\u05be\1\u05ba\1\u05b9\1\u05b6\1\u05b7"+
            "\2\uffff\1\u05e2\1\u05b2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0607\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0626\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0645\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0664\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0683\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u06a2\5\uffff\2\63\1\uffff\1\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06e0\1\u06e1\1\u06e2\1\u06e3\1\u06e4\1\u06bf\1\u06be\1"+
            "\u06df\2\uffff\1\u06cd\1\u06ce\14\uffff\1\u06d6\1\u06c8\1\u06c9"+
            "\1\u06d7\1\u06cf\7\uffff\1\u06b8\1\uffff\1\u06c0\1\u06c1\1\uffff"+
            "\1\u06d1\2\uffff\1\u06c2\3\uffff\1\u06ca\1\uffff\1\u06c3\1\u06d4"+
            "\1\u06d5\7\uffff\1\u06d3\41\uffff\1\u06de\1\u06dd\1\u06dc\6"+
            "\uffff\1\u06c4\3\uffff\1\u06d0\3\uffff\1\u06d2\1\u06c5\u00cc"+
            "\uffff\1\u06ab\1\u06d9\1\uffff\1\u06a8\1\u06c7\1\u06d8\1\uffff"+
            "\1\u06cb\1\uffff\1\u06db\1\u06cc\1\u06b7\1\u06a9\1\u06ad\1\uffff"+
            "\1\u06b3\1\u06b4\1\u06ac\1\u06bc\1\u06b0\2\uffff\1\u06bb\1\u06bd"+
            "\1\u06b9\1\u06ba\1\u06b5\1\u06b6\1\u06b2\1\u06b1\1\u06ae\1\u06af"+
            "\2\uffff\1\u06da\1\u06aa",
            "\1\u071c\1\u071d\1\u071e\1\u071f\1\u0720\1\u06fb\1\u06fa\1"+
            "\u071b\2\uffff\1\u0709\1\u070a\14\uffff\1\u0712\1\u0704\1\u0705"+
            "\1\u0713\1\u070b\7\uffff\1\u06f4\1\uffff\1\u06fc\1\u06fd\1\uffff"+
            "\1\u070d\2\uffff\1\u06fe\3\uffff\1\u0706\1\uffff\1\u06ff\1\u0710"+
            "\1\u0711\7\uffff\1\u070f\41\uffff\1\u071a\1\u0719\1\u0718\6"+
            "\uffff\1\u0700\3\uffff\1\u070c\3\uffff\1\u070e\1\u0701\u00cc"+
            "\uffff\1\u06e6\1\u0715\1\uffff\1\u06e7\1\u0703\1\u0714\1\uffff"+
            "\1\u0707\1\uffff\1\u0717\1\u0708\1\u06f3\1\u0721\1\u06e9\1\uffff"+
            "\1\u06ef\1\u06f0\1\u06e8\1\u06f8\1\u06ec\2\uffff\1\u06f7\1\u06f9"+
            "\1\u06f5\1\u06f6\1\u06f1\1\u06f2\1\u06ee\1\u06ed\1\u06ea\1\u06eb"+
            "\2\uffff\1\u0716\1\u06e5",
            "\1\u0759\1\u075a\1\u075b\1\u075c\1\u075d\1\u0738\1\u0737\1"+
            "\u0758\2\uffff\1\u0746\1\u0747\14\uffff\1\u074f\1\u0741\1\u0742"+
            "\1\u0750\1\u0748\7\uffff\1\u0731\1\uffff\1\u0739\1\u073a\1\uffff"+
            "\1\u074a\2\uffff\1\u073b\3\uffff\1\u0743\1\uffff\1\u073c\1\u074d"+
            "\1\u074e\7\uffff\1\u074c\41\uffff\1\u0757\1\u0756\1\u0755\6"+
            "\uffff\1\u073d\3\uffff\1\u0749\3\uffff\1\u074b\1\u073e\u00cc"+
            "\uffff\1\u0724\1\u0752\1\uffff\1\u0722\1\u0740\1\u0751\1\uffff"+
            "\1\u0744\1\uffff\1\u0754\1\u0745\1\u0730\1\u075e\1\u0726\1\uffff"+
            "\1\u072c\1\u072d\1\u0725\1\u0735\1\u0729\2\uffff\1\u0734\1\u0736"+
            "\1\u0732\1\u0733\1\u072e\1\u072f\1\u072b\1\u072a\1\u0727\1\u0728"+
            "\2\uffff\1\u0753\1\u0723",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0796\1\u0797\1\u0798\1\u0799\1\u079a\1\u0775\1\u0774\1"+
            "\u0795\2\uffff\1\u0783\1\u0784\14\uffff\1\u078c\1\u077e\1\u077f"+
            "\1\u078d\1\u0785\7\uffff\1\u076e\1\uffff\1\u0776\1\u0777\1\uffff"+
            "\1\u0787\2\uffff\1\u0778\3\uffff\1\u0780\1\uffff\1\u0779\1\u078a"+
            "\1\u078b\7\uffff\1\u0789\41\uffff\1\u0794\1\u0793\1\u0792\6"+
            "\uffff\1\u077a\3\uffff\1\u0786\3\uffff\1\u0788\1\u077b\u00cc"+
            "\uffff\1\u0761\1\u078f\1\uffff\1\u075f\1\u077d\1\u078e\1\uffff"+
            "\1\u0781\1\uffff\1\u0791\1\u0782\1\u076d\1\u079b\1\u0763\1\uffff"+
            "\1\u0769\1\u076a\1\u0762\1\u0772\1\u0766\2\uffff\1\u0771\1\u0773"+
            "\1\u076f\1\u0770\1\u076b\1\u076c\1\u0768\1\u0767\1\u0764\1\u0765"+
            "\2\uffff\1\u0790\1\u0760",
            "\1\u07d3\1\u07d4\1\u07d5\1\u07d6\1\u07d7\1\u07b2\1\u07b1\1"+
            "\u07d2\2\uffff\1\u07c0\1\u07c1\14\uffff\1\u07c9\1\u07bb\1\u07bc"+
            "\1\u07ca\1\u07c2\7\uffff\1\u07ab\1\uffff\1\u07b3\1\u07b4\1\uffff"+
            "\1\u07c4\2\uffff\1\u07b5\3\uffff\1\u07bd\1\uffff\1\u07b6\1\u07c7"+
            "\1\u07c8\7\uffff\1\u07c6\41\uffff\1\u07d1\1\u07d0\1\u07cf\6"+
            "\uffff\1\u07b7\3\uffff\1\u07c3\3\uffff\1\u07c5\1\u07b8\u00cc"+
            "\uffff\1\u079e\1\u07cc\1\uffff\1\u079c\1\u07ba\1\u07cb\1\uffff"+
            "\1\u07be\1\uffff\1\u07ce\1\u07bf\1\u07aa\1\u07d8\1\u07a0\1\uffff"+
            "\1\u07a6\1\u07a7\1\u079f\1\u07af\1\u07a3\2\uffff\1\u07ae\1\u07b0"+
            "\1\u07ac\1\u07ad\1\u07a8\1\u07a9\1\u07a5\1\u07a4\1\u07a1\1\u07a2"+
            "\2\uffff\1\u07cd\1\u079d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA314_eot = DFA.unpackEncodedString(DFA314_eotS);
    static final short[] DFA314_eof = DFA.unpackEncodedString(DFA314_eofS);
    static final char[] DFA314_min = DFA.unpackEncodedStringToUnsignedChars(DFA314_minS);
    static final char[] DFA314_max = DFA.unpackEncodedStringToUnsignedChars(DFA314_maxS);
    static final short[] DFA314_accept = DFA.unpackEncodedString(DFA314_acceptS);
    static final short[] DFA314_special = DFA.unpackEncodedString(DFA314_specialS);
    static final short[][] DFA314_transition;
    static {
        int numStates = DFA314_transitionS.length;
        DFA314_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA314_transition[i] = DFA.unpackEncodedString(DFA314_transitionS[i]);
        }
    }
    class DFA314 extends DFA {
        public DFA314(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 314;
            this.eot = DFA314_eot;
            this.eof = DFA314_eof;
            this.min = DFA314_min;
            this.max = DFA314_max;
            this.accept = DFA314_accept;
            this.special = DFA314_special;
            this.transition = DFA314_transition;
        }
        public String getDescription() {
            return "1678:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA314_0 = input.LA(1);
                        int index314_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_0==IDENT) ) {s = 1;}
                        else if ( (LA314_0==TICKED_STRING_LITERAL) ) {s = 2;}
                        else if ( (LA314_0==AT) && (synpred5_EsperEPL2Grammar())) {s = 3;}
                        else if ( (LA314_0==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 4;}
                        else if ( (LA314_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 5;}
                        else if ( (LA314_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 6;}
                        else if ( (LA314_0==SUM) && (synpred5_EsperEPL2Grammar())) {s = 7;}
                        else if ( (LA314_0==AVG) && (synpred5_EsperEPL2Grammar())) {s = 8;}
                        else if ( (LA314_0==MAX) ) {s = 9;}
                        else if ( (LA314_0==MIN) ) {s = 10;}
                        else if ( (LA314_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 11;}
                        else if ( (LA314_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 12;}
                        else if ( (LA314_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 13;}
                        else if ( (LA314_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 14;}
                        else if ( (LA314_0==EVENTS) ) {s = 15;}
                        else if ( (LA314_0==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 16;}
                        else if ( (LA314_0==LAST) && (synpred5_EsperEPL2Grammar())) {s = 17;}
                        else if ( (LA314_0==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 18;}
                        else if ( (LA314_0==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 19;}
                        else if ( (LA314_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 20;}
                        else if ( (LA314_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 21;}
                        else if ( (LA314_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 22;}
                        else if ( (LA314_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 23;}
                        else if ( (LA314_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 24;}
                        else if ( (LA314_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 25;}
                        else if ( (LA314_0==SQL) && (synpred5_EsperEPL2Grammar())) {s = 26;}
                        else if ( (LA314_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 27;}
                        else if ( (LA314_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 28;}
                        else if ( (LA314_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 29;}
                        else if ( (LA314_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 30;}
                        else if ( (LA314_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 31;}
                        else if ( (LA314_0==LW) && (synpred5_EsperEPL2Grammar())) {s = 32;}
                        else if ( (LA314_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 33;}
                        else if ( (LA314_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 34;}
                        else if ( (LA314_0==CAST) && (synpred5_EsperEPL2Grammar())) {s = 35;}
                        else if ( (LA314_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 36;}
                        else if ( (LA314_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 37;}
                        else if ( (LA314_0==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 38;}
                        else if ( (LA314_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 39;}
                        else if ( (LA314_0==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 40;}
                        else if ( (LA314_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 41;}
                        else if ( (LA314_0==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 42;}
                        else if ( (LA314_0==FULL) && (synpred5_EsperEPL2Grammar())) {s = 43;}
                        else if ( (LA314_0==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 44;}
                        else if ( (LA314_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 45;}
                        else if ( (LA314_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 46;}
                        else if ( (LA314_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 47;}
                        else if ( (LA314_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 48;}
                        else if ( (LA314_0==FOR) && (synpred5_EsperEPL2Grammar())) {s = 49;}
                        else if ( (LA314_0==USING) && (synpred5_EsperEPL2Grammar())) {s = 50;}
                        else if ( (LA314_0==BETWEEN||LA314_0==WHERE||LA314_0==SET||LA314_0==AFTER) ) {s = 51;}
                        input.seek(index314_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA314_1 = input.LA(1);
                        int index314_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 55;}
                        else if ( (LA314_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 56;}
                        else if ( (LA314_1==LPAREN) ) {s = 57;}
                        else if ( (LA314_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 58;}
                        else if ( (LA314_1==DOT) ) {s = 59;}
                        else if ( (LA314_1==STAR) && (synpred5_EsperEPL2Grammar())) {s = 60;}
                        else if ( (LA314_1==DIV) && (synpred5_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA314_1==MOD) && (synpred5_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA314_1==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA314_1==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA314_1==LOR) && (synpred5_EsperEPL2Grammar())) {s = 65;}
                        else if ( (LA314_1==LT) && (synpred5_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA314_1==GT) && (synpred5_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA314_1==LE) && (synpred5_EsperEPL2Grammar())) {s = 68;}
                        else if ( (LA314_1==GE) && (synpred5_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA314_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 70;}
                        else if ( (LA314_1==IS) && (synpred5_EsperEPL2Grammar())) {s = 71;}
                        else if ( (LA314_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 72;}
                        else if ( (LA314_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 73;}
                        else if ( (LA314_1==BAND) && (synpred5_EsperEPL2Grammar())) {s = 74;}
                        else if ( (LA314_1==BOR) && (synpred5_EsperEPL2Grammar())) {s = 75;}
                        else if ( (LA314_1==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 76;}
                        else if ( (LA314_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 77;}
                        else if ( (LA314_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 78;}
                        else if ( (LA314_1==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 79;}
                        else if ( (LA314_1==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 80;}
                        else if ( (LA314_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 81;}
                        else if ( (LA314_1==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 82;}
                        else if ( (LA314_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 83;}
                        else if ( (LA314_1==FOR) && (synpred5_EsperEPL2Grammar())) {s = 84;}
                        else if ( (LA314_1==EOF) && (synpred5_EsperEPL2Grammar())) {s = 85;}
                        else if ( (LA314_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 86;}
                        else if ( (LA314_1==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 87;}
                        else if ( (LA314_1==THEN) && (synpred5_EsperEPL2Grammar())) {s = 88;}
                        else if ( (LA314_1==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 89;}
                        else if ( (LA314_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 90;}
                        else if ( (LA314_1==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 91;}
                        else if ( (LA314_1==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 92;}
                        else if ( (LA314_1==AS) && (synpred5_EsperEPL2Grammar())) {s = 93;}
                        else if ( (LA314_1==FROM) && (synpred5_EsperEPL2Grammar())) {s = 94;}
                        else if ( (LA314_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 95;}
                        else if ( (LA314_1==ALL) && (synpred5_EsperEPL2Grammar())) {s = 96;}
                        else if ( (LA314_1==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 97;}
                        else if ( (LA314_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 98;}
                        else if ( (LA314_1==ASC) && (synpred5_EsperEPL2Grammar())) {s = 99;}
                        else if ( (LA314_1==DESC) && (synpred5_EsperEPL2Grammar())) {s = 100;}
                        else if ( (LA314_1==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 101;}
                        else if ( (LA314_1==END) && (synpred5_EsperEPL2Grammar())) {s = 102;}
                        else if ( (LA314_1==COLON) && (synpred5_EsperEPL2Grammar())) {s = 103;}
                        else if ( (LA314_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 104;}
                        else if ( (LA314_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 105;}
                        else if ( (LA314_1==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 106;}
                        else if ( (LA314_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 107;}
                        else if ( (LA314_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 108;}
                        else if ( (LA314_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 109;}
                        else if ( (LA314_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 110;}
                        else if ( (LA314_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 111;}
                        else if ( (LA314_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 112;}
                        else if ( (LA314_1==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 113;}
                        else if ( (LA314_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 114;}
                        else if ( (LA314_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 115;}
                        input.seek(index314_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA314_2 = input.LA(1);
                        int index314_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_2==DOT) ) {s = 116;}
                        else if ( (LA314_2==LPAREN) ) {s = 117;}
                        else if ( (LA314_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 118;}
                        else if ( (LA314_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 119;}
                        else if ( (LA314_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 120;}
                        else if ( (LA314_2==STAR) && (synpred5_EsperEPL2Grammar())) {s = 121;}
                        else if ( (LA314_2==DIV) && (synpred5_EsperEPL2Grammar())) {s = 122;}
                        else if ( (LA314_2==MOD) && (synpred5_EsperEPL2Grammar())) {s = 123;}
                        else if ( (LA314_2==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 124;}
                        else if ( (LA314_2==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 125;}
                        else if ( (LA314_2==LOR) && (synpred5_EsperEPL2Grammar())) {s = 126;}
                        else if ( (LA314_2==LT) && (synpred5_EsperEPL2Grammar())) {s = 127;}
                        else if ( (LA314_2==GT) && (synpred5_EsperEPL2Grammar())) {s = 128;}
                        else if ( (LA314_2==LE) && (synpred5_EsperEPL2Grammar())) {s = 129;}
                        else if ( (LA314_2==GE) && (synpred5_EsperEPL2Grammar())) {s = 130;}
                        else if ( (LA314_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 131;}
                        else if ( (LA314_2==IS) && (synpred5_EsperEPL2Grammar())) {s = 132;}
                        else if ( (LA314_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 133;}
                        else if ( (LA314_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 134;}
                        else if ( (LA314_2==BAND) && (synpred5_EsperEPL2Grammar())) {s = 135;}
                        else if ( (LA314_2==BOR) && (synpred5_EsperEPL2Grammar())) {s = 136;}
                        else if ( (LA314_2==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 137;}
                        else if ( (LA314_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 138;}
                        else if ( (LA314_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 139;}
                        else if ( (LA314_2==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 140;}
                        else if ( (LA314_2==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 141;}
                        else if ( (LA314_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 142;}
                        else if ( (LA314_2==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 143;}
                        else if ( (LA314_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 144;}
                        else if ( (LA314_2==FOR) && (synpred5_EsperEPL2Grammar())) {s = 145;}
                        else if ( (LA314_2==EOF) && (synpred5_EsperEPL2Grammar())) {s = 146;}
                        else if ( (LA314_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 147;}
                        else if ( (LA314_2==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 148;}
                        else if ( (LA314_2==THEN) && (synpred5_EsperEPL2Grammar())) {s = 149;}
                        else if ( (LA314_2==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 150;}
                        else if ( (LA314_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 151;}
                        else if ( (LA314_2==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 152;}
                        else if ( (LA314_2==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 153;}
                        else if ( (LA314_2==AS) && (synpred5_EsperEPL2Grammar())) {s = 154;}
                        else if ( (LA314_2==FROM) && (synpred5_EsperEPL2Grammar())) {s = 155;}
                        else if ( (LA314_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 156;}
                        else if ( (LA314_2==ALL) && (synpred5_EsperEPL2Grammar())) {s = 157;}
                        else if ( (LA314_2==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 158;}
                        else if ( (LA314_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 159;}
                        else if ( (LA314_2==ASC) && (synpred5_EsperEPL2Grammar())) {s = 160;}
                        else if ( (LA314_2==DESC) && (synpred5_EsperEPL2Grammar())) {s = 161;}
                        else if ( (LA314_2==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 162;}
                        else if ( (LA314_2==END) && (synpred5_EsperEPL2Grammar())) {s = 163;}
                        else if ( (LA314_2==COLON) && (synpred5_EsperEPL2Grammar())) {s = 164;}
                        else if ( (LA314_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 165;}
                        else if ( (LA314_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 166;}
                        else if ( (LA314_2==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 167;}
                        else if ( (LA314_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 168;}
                        else if ( (LA314_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 169;}
                        else if ( (LA314_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 170;}
                        else if ( (LA314_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 171;}
                        else if ( (LA314_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 172;}
                        else if ( (LA314_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 173;}
                        else if ( (LA314_2==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 174;}
                        else if ( (LA314_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 175;}
                        else if ( (LA314_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 176;}
                        input.seek(index314_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA314_9 = input.LA(1);
                        int index314_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 177;}
                        else if ( (LA314_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 178;}
                        else if ( (LA314_9==LPAREN) ) {s = 179;}
                        else if ( (LA314_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 180;}
                        else if ( (LA314_9==DOT) && (synpred5_EsperEPL2Grammar())) {s = 181;}
                        else if ( (LA314_9==STAR) && (synpred5_EsperEPL2Grammar())) {s = 182;}
                        else if ( (LA314_9==DIV) && (synpred5_EsperEPL2Grammar())) {s = 183;}
                        else if ( (LA314_9==MOD) && (synpred5_EsperEPL2Grammar())) {s = 184;}
                        else if ( (LA314_9==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 185;}
                        else if ( (LA314_9==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 186;}
                        else if ( (LA314_9==LOR) && (synpred5_EsperEPL2Grammar())) {s = 187;}
                        else if ( (LA314_9==LT) && (synpred5_EsperEPL2Grammar())) {s = 188;}
                        else if ( (LA314_9==GT) && (synpred5_EsperEPL2Grammar())) {s = 189;}
                        else if ( (LA314_9==LE) && (synpred5_EsperEPL2Grammar())) {s = 190;}
                        else if ( (LA314_9==GE) && (synpred5_EsperEPL2Grammar())) {s = 191;}
                        else if ( (LA314_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 192;}
                        else if ( (LA314_9==IS) && (synpred5_EsperEPL2Grammar())) {s = 193;}
                        else if ( (LA314_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 194;}
                        else if ( (LA314_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 195;}
                        else if ( (LA314_9==BAND) && (synpred5_EsperEPL2Grammar())) {s = 196;}
                        else if ( (LA314_9==BOR) && (synpred5_EsperEPL2Grammar())) {s = 197;}
                        else if ( (LA314_9==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 198;}
                        else if ( (LA314_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 199;}
                        else if ( (LA314_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 200;}
                        else if ( (LA314_9==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 201;}
                        else if ( (LA314_9==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 202;}
                        else if ( (LA314_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 203;}
                        else if ( (LA314_9==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 204;}
                        else if ( (LA314_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 205;}
                        else if ( (LA314_9==FOR) && (synpred5_EsperEPL2Grammar())) {s = 206;}
                        else if ( (LA314_9==EOF) && (synpred5_EsperEPL2Grammar())) {s = 207;}
                        else if ( (LA314_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 208;}
                        else if ( (LA314_9==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 209;}
                        else if ( (LA314_9==THEN) && (synpred5_EsperEPL2Grammar())) {s = 210;}
                        else if ( (LA314_9==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 211;}
                        else if ( (LA314_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 212;}
                        else if ( (LA314_9==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 213;}
                        else if ( (LA314_9==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 214;}
                        else if ( (LA314_9==AS) && (synpred5_EsperEPL2Grammar())) {s = 215;}
                        else if ( (LA314_9==FROM) && (synpred5_EsperEPL2Grammar())) {s = 216;}
                        else if ( (LA314_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 217;}
                        else if ( (LA314_9==ALL) && (synpred5_EsperEPL2Grammar())) {s = 218;}
                        else if ( (LA314_9==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 219;}
                        else if ( (LA314_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 220;}
                        else if ( (LA314_9==ASC) && (synpred5_EsperEPL2Grammar())) {s = 221;}
                        else if ( (LA314_9==DESC) && (synpred5_EsperEPL2Grammar())) {s = 222;}
                        else if ( (LA314_9==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 223;}
                        else if ( (LA314_9==END) && (synpred5_EsperEPL2Grammar())) {s = 224;}
                        else if ( (LA314_9==COLON) && (synpred5_EsperEPL2Grammar())) {s = 225;}
                        else if ( (LA314_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 226;}
                        else if ( (LA314_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 227;}
                        else if ( (LA314_9==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 228;}
                        else if ( (LA314_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 229;}
                        else if ( (LA314_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 230;}
                        else if ( (LA314_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 231;}
                        else if ( (LA314_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 232;}
                        else if ( (LA314_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 233;}
                        else if ( (LA314_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 234;}
                        else if ( (LA314_9==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 235;}
                        else if ( (LA314_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 236;}
                        else if ( (LA314_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 237;}
                        input.seek(index314_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA314_10 = input.LA(1);
                        int index314_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_10==LPAREN) ) {s = 238;}
                        else if ( (LA314_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 239;}
                        else if ( (LA314_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 240;}
                        else if ( (LA314_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 241;}
                        else if ( (LA314_10==DOT) && (synpred5_EsperEPL2Grammar())) {s = 242;}
                        else if ( (LA314_10==STAR) && (synpred5_EsperEPL2Grammar())) {s = 243;}
                        else if ( (LA314_10==DIV) && (synpred5_EsperEPL2Grammar())) {s = 244;}
                        else if ( (LA314_10==MOD) && (synpred5_EsperEPL2Grammar())) {s = 245;}
                        else if ( (LA314_10==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 246;}
                        else if ( (LA314_10==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 247;}
                        else if ( (LA314_10==LOR) && (synpred5_EsperEPL2Grammar())) {s = 248;}
                        else if ( (LA314_10==LT) && (synpred5_EsperEPL2Grammar())) {s = 249;}
                        else if ( (LA314_10==GT) && (synpred5_EsperEPL2Grammar())) {s = 250;}
                        else if ( (LA314_10==LE) && (synpred5_EsperEPL2Grammar())) {s = 251;}
                        else if ( (LA314_10==GE) && (synpred5_EsperEPL2Grammar())) {s = 252;}
                        else if ( (LA314_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 253;}
                        else if ( (LA314_10==IS) && (synpred5_EsperEPL2Grammar())) {s = 254;}
                        else if ( (LA314_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 255;}
                        else if ( (LA314_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 256;}
                        else if ( (LA314_10==BAND) && (synpred5_EsperEPL2Grammar())) {s = 257;}
                        else if ( (LA314_10==BOR) && (synpred5_EsperEPL2Grammar())) {s = 258;}
                        else if ( (LA314_10==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 259;}
                        else if ( (LA314_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 260;}
                        else if ( (LA314_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 261;}
                        else if ( (LA314_10==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 262;}
                        else if ( (LA314_10==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 263;}
                        else if ( (LA314_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 264;}
                        else if ( (LA314_10==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 265;}
                        else if ( (LA314_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 266;}
                        else if ( (LA314_10==FOR) && (synpred5_EsperEPL2Grammar())) {s = 267;}
                        else if ( (LA314_10==EOF) && (synpred5_EsperEPL2Grammar())) {s = 268;}
                        else if ( (LA314_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 269;}
                        else if ( (LA314_10==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 270;}
                        else if ( (LA314_10==THEN) && (synpred5_EsperEPL2Grammar())) {s = 271;}
                        else if ( (LA314_10==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 272;}
                        else if ( (LA314_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 273;}
                        else if ( (LA314_10==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 274;}
                        else if ( (LA314_10==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 275;}
                        else if ( (LA314_10==AS) && (synpred5_EsperEPL2Grammar())) {s = 276;}
                        else if ( (LA314_10==FROM) && (synpred5_EsperEPL2Grammar())) {s = 277;}
                        else if ( (LA314_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 278;}
                        else if ( (LA314_10==ALL) && (synpred5_EsperEPL2Grammar())) {s = 279;}
                        else if ( (LA314_10==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 280;}
                        else if ( (LA314_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 281;}
                        else if ( (LA314_10==ASC) && (synpred5_EsperEPL2Grammar())) {s = 282;}
                        else if ( (LA314_10==DESC) && (synpred5_EsperEPL2Grammar())) {s = 283;}
                        else if ( (LA314_10==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 284;}
                        else if ( (LA314_10==END) && (synpred5_EsperEPL2Grammar())) {s = 285;}
                        else if ( (LA314_10==COLON) && (synpred5_EsperEPL2Grammar())) {s = 286;}
                        else if ( (LA314_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 287;}
                        else if ( (LA314_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 288;}
                        else if ( (LA314_10==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 289;}
                        else if ( (LA314_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 290;}
                        else if ( (LA314_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 291;}
                        else if ( (LA314_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 292;}
                        else if ( (LA314_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 293;}
                        else if ( (LA314_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 294;}
                        else if ( (LA314_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 295;}
                        else if ( (LA314_10==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 296;}
                        else if ( (LA314_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 297;}
                        else if ( (LA314_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 298;}
                        input.seek(index314_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA314_15 = input.LA(1);
                        int index314_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_15==DOT) ) {s = 299;}
                        else if ( (LA314_15==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 300;}
                        else if ( (LA314_15==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 301;}
                        else if ( (LA314_15==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 302;}
                        else if ( (LA314_15==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 303;}
                        else if ( (LA314_15==STAR) && (synpred5_EsperEPL2Grammar())) {s = 304;}
                        else if ( (LA314_15==DIV) && (synpred5_EsperEPL2Grammar())) {s = 305;}
                        else if ( (LA314_15==MOD) && (synpred5_EsperEPL2Grammar())) {s = 306;}
                        else if ( (LA314_15==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 307;}
                        else if ( (LA314_15==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 308;}
                        else if ( (LA314_15==LOR) && (synpred5_EsperEPL2Grammar())) {s = 309;}
                        else if ( (LA314_15==LT) && (synpred5_EsperEPL2Grammar())) {s = 310;}
                        else if ( (LA314_15==GT) && (synpred5_EsperEPL2Grammar())) {s = 311;}
                        else if ( (LA314_15==LE) && (synpred5_EsperEPL2Grammar())) {s = 312;}
                        else if ( (LA314_15==GE) && (synpred5_EsperEPL2Grammar())) {s = 313;}
                        else if ( (LA314_15==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 314;}
                        else if ( (LA314_15==IS) && (synpred5_EsperEPL2Grammar())) {s = 315;}
                        else if ( (LA314_15==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 316;}
                        else if ( (LA314_15==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 317;}
                        else if ( (LA314_15==BAND) && (synpred5_EsperEPL2Grammar())) {s = 318;}
                        else if ( (LA314_15==BOR) && (synpred5_EsperEPL2Grammar())) {s = 319;}
                        else if ( (LA314_15==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 320;}
                        else if ( (LA314_15==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 321;}
                        else if ( (LA314_15==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 322;}
                        else if ( (LA314_15==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 323;}
                        else if ( (LA314_15==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 324;}
                        else if ( (LA314_15==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 325;}
                        else if ( (LA314_15==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 326;}
                        else if ( (LA314_15==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 327;}
                        else if ( (LA314_15==FOR) && (synpred5_EsperEPL2Grammar())) {s = 328;}
                        else if ( (LA314_15==EOF) && (synpred5_EsperEPL2Grammar())) {s = 329;}
                        else if ( (LA314_15==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 330;}
                        else if ( (LA314_15==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 331;}
                        else if ( (LA314_15==THEN) && (synpred5_EsperEPL2Grammar())) {s = 332;}
                        else if ( (LA314_15==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 333;}
                        else if ( (LA314_15==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 334;}
                        else if ( (LA314_15==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 335;}
                        else if ( (LA314_15==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 336;}
                        else if ( (LA314_15==AS) && (synpred5_EsperEPL2Grammar())) {s = 337;}
                        else if ( (LA314_15==FROM) && (synpred5_EsperEPL2Grammar())) {s = 338;}
                        else if ( (LA314_15==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 339;}
                        else if ( (LA314_15==ALL) && (synpred5_EsperEPL2Grammar())) {s = 340;}
                        else if ( (LA314_15==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 341;}
                        else if ( (LA314_15==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 342;}
                        else if ( (LA314_15==ASC) && (synpred5_EsperEPL2Grammar())) {s = 343;}
                        else if ( (LA314_15==DESC) && (synpred5_EsperEPL2Grammar())) {s = 344;}
                        else if ( (LA314_15==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 345;}
                        else if ( (LA314_15==END) && (synpred5_EsperEPL2Grammar())) {s = 346;}
                        else if ( (LA314_15==COLON) && (synpred5_EsperEPL2Grammar())) {s = 347;}
                        else if ( (LA314_15==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 348;}
                        else if ( (LA314_15==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 349;}
                        else if ( (LA314_15==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 350;}
                        else if ( (LA314_15==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 351;}
                        else if ( (LA314_15==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 352;}
                        else if ( (LA314_15==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 353;}
                        else if ( (LA314_15==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 354;}
                        else if ( (LA314_15==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 355;}
                        else if ( (LA314_15==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 356;}
                        else if ( (LA314_15==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 357;}
                        else if ( (LA314_15==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 358;}
                        else if ( (LA314_15==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 359;}
                        input.seek(index314_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA314_59 = input.LA(1);
                        int index314_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_59==IDENT) ) {s = 441;}
                        else if ( (LA314_59==EVENTS) ) {s = 442;}
                        else if ( (LA314_59==TICKED_STRING_LITERAL) ) {s = 443;}
                        else if ( (LA314_59==AT) && (synpred5_EsperEPL2Grammar())) {s = 444;}
                        else if ( (LA314_59==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 445;}
                        else if ( (LA314_59==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 446;}
                        else if ( (LA314_59==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 447;}
                        else if ( (LA314_59==SUM) && (synpred5_EsperEPL2Grammar())) {s = 448;}
                        else if ( (LA314_59==AVG) && (synpred5_EsperEPL2Grammar())) {s = 449;}
                        else if ( (LA314_59==MAX) ) {s = 450;}
                        else if ( (LA314_59==MIN) ) {s = 451;}
                        else if ( (LA314_59==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 452;}
                        else if ( (LA314_59==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 453;}
                        else if ( (LA314_59==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 454;}
                        else if ( (LA314_59==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 455;}
                        else if ( (LA314_59==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 456;}
                        else if ( (LA314_59==LAST) && (synpred5_EsperEPL2Grammar())) {s = 457;}
                        else if ( (LA314_59==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 458;}
                        else if ( (LA314_59==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 459;}
                        else if ( (LA314_59==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 460;}
                        else if ( (LA314_59==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 461;}
                        else if ( (LA314_59==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 462;}
                        else if ( (LA314_59==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 463;}
                        else if ( (LA314_59==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 464;}
                        else if ( (LA314_59==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 465;}
                        else if ( (LA314_59==SQL) && (synpred5_EsperEPL2Grammar())) {s = 466;}
                        else if ( (LA314_59==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 467;}
                        else if ( (LA314_59==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 468;}
                        else if ( (LA314_59==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 469;}
                        else if ( (LA314_59==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 470;}
                        else if ( (LA314_59==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 471;}
                        else if ( (LA314_59==LW) && (synpred5_EsperEPL2Grammar())) {s = 472;}
                        else if ( (LA314_59==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 473;}
                        else if ( (LA314_59==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 474;}
                        else if ( (LA314_59==CAST) && (synpred5_EsperEPL2Grammar())) {s = 475;}
                        else if ( (LA314_59==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 476;}
                        else if ( (LA314_59==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 477;}
                        else if ( (LA314_59==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 478;}
                        else if ( (LA314_59==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 479;}
                        else if ( (LA314_59==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 480;}
                        else if ( (LA314_59==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 481;}
                        else if ( (LA314_59==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 482;}
                        else if ( (LA314_59==FULL) && (synpred5_EsperEPL2Grammar())) {s = 483;}
                        else if ( (LA314_59==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 484;}
                        else if ( (LA314_59==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 485;}
                        else if ( (LA314_59==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 486;}
                        else if ( (LA314_59==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 487;}
                        else if ( (LA314_59==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 488;}
                        else if ( (LA314_59==FOR) && (synpred5_EsperEPL2Grammar())) {s = 489;}
                        else if ( (LA314_59==USING) && (synpred5_EsperEPL2Grammar())) {s = 490;}
                        else if ( (LA314_59==BETWEEN||LA314_59==WHERE||LA314_59==SET||LA314_59==AFTER) ) {s = 51;}
                        input.seek(index314_59);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA314_116 = input.LA(1);
                        int index314_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_116==IDENT) ) {s = 495;}
                        else if ( (LA314_116==EVENTS) ) {s = 496;}
                        else if ( (LA314_116==TICKED_STRING_LITERAL) ) {s = 497;}
                        else if ( (LA314_116==AT) && (synpred5_EsperEPL2Grammar())) {s = 498;}
                        else if ( (LA314_116==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 499;}
                        else if ( (LA314_116==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 500;}
                        else if ( (LA314_116==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 501;}
                        else if ( (LA314_116==SUM) && (synpred5_EsperEPL2Grammar())) {s = 502;}
                        else if ( (LA314_116==AVG) && (synpred5_EsperEPL2Grammar())) {s = 503;}
                        else if ( (LA314_116==MAX) ) {s = 504;}
                        else if ( (LA314_116==MIN) ) {s = 505;}
                        else if ( (LA314_116==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 506;}
                        else if ( (LA314_116==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 507;}
                        else if ( (LA314_116==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 508;}
                        else if ( (LA314_116==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 509;}
                        else if ( (LA314_116==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 510;}
                        else if ( (LA314_116==LAST) && (synpred5_EsperEPL2Grammar())) {s = 511;}
                        else if ( (LA314_116==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 512;}
                        else if ( (LA314_116==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 513;}
                        else if ( (LA314_116==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 514;}
                        else if ( (LA314_116==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 515;}
                        else if ( (LA314_116==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 516;}
                        else if ( (LA314_116==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 517;}
                        else if ( (LA314_116==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 518;}
                        else if ( (LA314_116==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 519;}
                        else if ( (LA314_116==SQL) && (synpred5_EsperEPL2Grammar())) {s = 520;}
                        else if ( (LA314_116==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 521;}
                        else if ( (LA314_116==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 522;}
                        else if ( (LA314_116==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 523;}
                        else if ( (LA314_116==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 524;}
                        else if ( (LA314_116==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 525;}
                        else if ( (LA314_116==LW) && (synpred5_EsperEPL2Grammar())) {s = 526;}
                        else if ( (LA314_116==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 527;}
                        else if ( (LA314_116==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 528;}
                        else if ( (LA314_116==CAST) && (synpred5_EsperEPL2Grammar())) {s = 529;}
                        else if ( (LA314_116==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 530;}
                        else if ( (LA314_116==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 531;}
                        else if ( (LA314_116==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 532;}
                        else if ( (LA314_116==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 533;}
                        else if ( (LA314_116==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 534;}
                        else if ( (LA314_116==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 535;}
                        else if ( (LA314_116==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 536;}
                        else if ( (LA314_116==FULL) && (synpred5_EsperEPL2Grammar())) {s = 537;}
                        else if ( (LA314_116==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 538;}
                        else if ( (LA314_116==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 539;}
                        else if ( (LA314_116==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 540;}
                        else if ( (LA314_116==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 541;}
                        else if ( (LA314_116==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 542;}
                        else if ( (LA314_116==FOR) && (synpred5_EsperEPL2Grammar())) {s = 543;}
                        else if ( (LA314_116==USING) && (synpred5_EsperEPL2Grammar())) {s = 544;}
                        else if ( (LA314_116==BETWEEN||LA314_116==WHERE||LA314_116==SET||LA314_116==AFTER) ) {s = 51;}
                        input.seek(index314_116);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA314_299 = input.LA(1);
                        int index314_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_299==IDENT) ) {s = 792;}
                        else if ( (LA314_299==EVENTS) ) {s = 793;}
                        else if ( (LA314_299==TICKED_STRING_LITERAL) ) {s = 794;}
                        else if ( (LA314_299==AT) && (synpred5_EsperEPL2Grammar())) {s = 795;}
                        else if ( (LA314_299==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 796;}
                        else if ( (LA314_299==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 797;}
                        else if ( (LA314_299==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 798;}
                        else if ( (LA314_299==SUM) && (synpred5_EsperEPL2Grammar())) {s = 799;}
                        else if ( (LA314_299==AVG) && (synpred5_EsperEPL2Grammar())) {s = 800;}
                        else if ( (LA314_299==MAX) ) {s = 801;}
                        else if ( (LA314_299==MIN) ) {s = 802;}
                        else if ( (LA314_299==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 803;}
                        else if ( (LA314_299==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 804;}
                        else if ( (LA314_299==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 805;}
                        else if ( (LA314_299==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 806;}
                        else if ( (LA314_299==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 807;}
                        else if ( (LA314_299==LAST) && (synpred5_EsperEPL2Grammar())) {s = 808;}
                        else if ( (LA314_299==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 809;}
                        else if ( (LA314_299==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 810;}
                        else if ( (LA314_299==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 811;}
                        else if ( (LA314_299==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 812;}
                        else if ( (LA314_299==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 813;}
                        else if ( (LA314_299==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 814;}
                        else if ( (LA314_299==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 815;}
                        else if ( (LA314_299==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 816;}
                        else if ( (LA314_299==SQL) && (synpred5_EsperEPL2Grammar())) {s = 817;}
                        else if ( (LA314_299==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 818;}
                        else if ( (LA314_299==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 819;}
                        else if ( (LA314_299==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 820;}
                        else if ( (LA314_299==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 821;}
                        else if ( (LA314_299==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 822;}
                        else if ( (LA314_299==LW) && (synpred5_EsperEPL2Grammar())) {s = 823;}
                        else if ( (LA314_299==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 824;}
                        else if ( (LA314_299==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 825;}
                        else if ( (LA314_299==CAST) && (synpred5_EsperEPL2Grammar())) {s = 826;}
                        else if ( (LA314_299==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 827;}
                        else if ( (LA314_299==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 828;}
                        else if ( (LA314_299==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 829;}
                        else if ( (LA314_299==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 830;}
                        else if ( (LA314_299==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 831;}
                        else if ( (LA314_299==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 832;}
                        else if ( (LA314_299==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 833;}
                        else if ( (LA314_299==FULL) && (synpred5_EsperEPL2Grammar())) {s = 834;}
                        else if ( (LA314_299==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 835;}
                        else if ( (LA314_299==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 836;}
                        else if ( (LA314_299==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 837;}
                        else if ( (LA314_299==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 838;}
                        else if ( (LA314_299==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 839;}
                        else if ( (LA314_299==FOR) && (synpred5_EsperEPL2Grammar())) {s = 840;}
                        else if ( (LA314_299==USING) && (synpred5_EsperEPL2Grammar())) {s = 841;}
                        else if ( (LA314_299==BETWEEN||LA314_299==WHERE||LA314_299==SET||LA314_299==AFTER) ) {s = 51;}
                        input.seek(index314_299);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA314_441 = input.LA(1);
                        int index314_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_441==LPAREN) ) {s = 908;}
                        else if ( (LA314_441==DOT) ) {s = 909;}
                        else if ( (LA314_441==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 910;}
                        else if ( (LA314_441==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 911;}
                        else if ( (LA314_441==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 912;}
                        else if ( (LA314_441==STAR) && (synpred5_EsperEPL2Grammar())) {s = 913;}
                        else if ( (LA314_441==DIV) && (synpred5_EsperEPL2Grammar())) {s = 914;}
                        else if ( (LA314_441==MOD) && (synpred5_EsperEPL2Grammar())) {s = 915;}
                        else if ( (LA314_441==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 916;}
                        else if ( (LA314_441==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 917;}
                        else if ( (LA314_441==LOR) && (synpred5_EsperEPL2Grammar())) {s = 918;}
                        else if ( (LA314_441==LT) && (synpred5_EsperEPL2Grammar())) {s = 919;}
                        else if ( (LA314_441==GT) && (synpred5_EsperEPL2Grammar())) {s = 920;}
                        else if ( (LA314_441==LE) && (synpred5_EsperEPL2Grammar())) {s = 921;}
                        else if ( (LA314_441==GE) && (synpred5_EsperEPL2Grammar())) {s = 922;}
                        else if ( (LA314_441==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 923;}
                        else if ( (LA314_441==IS) && (synpred5_EsperEPL2Grammar())) {s = 924;}
                        else if ( (LA314_441==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 925;}
                        else if ( (LA314_441==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 926;}
                        else if ( (LA314_441==BAND) && (synpred5_EsperEPL2Grammar())) {s = 927;}
                        else if ( (LA314_441==BOR) && (synpred5_EsperEPL2Grammar())) {s = 928;}
                        else if ( (LA314_441==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 929;}
                        else if ( (LA314_441==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 930;}
                        else if ( (LA314_441==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 931;}
                        else if ( (LA314_441==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 932;}
                        else if ( (LA314_441==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 933;}
                        else if ( (LA314_441==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 934;}
                        else if ( (LA314_441==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 935;}
                        else if ( (LA314_441==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 936;}
                        else if ( (LA314_441==FOR) && (synpred5_EsperEPL2Grammar())) {s = 937;}
                        else if ( (LA314_441==EOF) && (synpred5_EsperEPL2Grammar())) {s = 938;}
                        else if ( (LA314_441==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 939;}
                        else if ( (LA314_441==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 940;}
                        else if ( (LA314_441==THEN) && (synpred5_EsperEPL2Grammar())) {s = 941;}
                        else if ( (LA314_441==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 942;}
                        else if ( (LA314_441==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 943;}
                        else if ( (LA314_441==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 944;}
                        else if ( (LA314_441==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 945;}
                        else if ( (LA314_441==AS) && (synpred5_EsperEPL2Grammar())) {s = 946;}
                        else if ( (LA314_441==FROM) && (synpred5_EsperEPL2Grammar())) {s = 947;}
                        else if ( (LA314_441==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 948;}
                        else if ( (LA314_441==ALL) && (synpred5_EsperEPL2Grammar())) {s = 949;}
                        else if ( (LA314_441==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 950;}
                        else if ( (LA314_441==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 951;}
                        else if ( (LA314_441==ASC) && (synpred5_EsperEPL2Grammar())) {s = 952;}
                        else if ( (LA314_441==DESC) && (synpred5_EsperEPL2Grammar())) {s = 953;}
                        else if ( (LA314_441==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 954;}
                        else if ( (LA314_441==END) && (synpred5_EsperEPL2Grammar())) {s = 955;}
                        else if ( (LA314_441==COLON) && (synpred5_EsperEPL2Grammar())) {s = 956;}
                        else if ( (LA314_441==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 957;}
                        else if ( (LA314_441==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 958;}
                        else if ( (LA314_441==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 959;}
                        else if ( (LA314_441==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 960;}
                        else if ( (LA314_441==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 961;}
                        else if ( (LA314_441==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 962;}
                        else if ( (LA314_441==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 963;}
                        else if ( (LA314_441==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 964;}
                        else if ( (LA314_441==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 965;}
                        else if ( (LA314_441==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 966;}
                        else if ( (LA314_441==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 967;}
                        else if ( (LA314_441==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 968;}
                        input.seek(index314_441);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA314_442 = input.LA(1);
                        int index314_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_442==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 969;}
                        else if ( (LA314_442==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 970;}
                        else if ( (LA314_442==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 971;}
                        else if ( (LA314_442==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 972;}
                        else if ( (LA314_442==STAR) && (synpred5_EsperEPL2Grammar())) {s = 973;}
                        else if ( (LA314_442==DIV) && (synpred5_EsperEPL2Grammar())) {s = 974;}
                        else if ( (LA314_442==MOD) && (synpred5_EsperEPL2Grammar())) {s = 975;}
                        else if ( (LA314_442==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 976;}
                        else if ( (LA314_442==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 977;}
                        else if ( (LA314_442==LOR) && (synpred5_EsperEPL2Grammar())) {s = 978;}
                        else if ( (LA314_442==LT) && (synpred5_EsperEPL2Grammar())) {s = 979;}
                        else if ( (LA314_442==GT) && (synpred5_EsperEPL2Grammar())) {s = 980;}
                        else if ( (LA314_442==LE) && (synpred5_EsperEPL2Grammar())) {s = 981;}
                        else if ( (LA314_442==GE) && (synpred5_EsperEPL2Grammar())) {s = 982;}
                        else if ( (LA314_442==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 983;}
                        else if ( (LA314_442==IS) && (synpred5_EsperEPL2Grammar())) {s = 984;}
                        else if ( (LA314_442==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 985;}
                        else if ( (LA314_442==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 986;}
                        else if ( (LA314_442==BAND) && (synpred5_EsperEPL2Grammar())) {s = 987;}
                        else if ( (LA314_442==BOR) && (synpred5_EsperEPL2Grammar())) {s = 988;}
                        else if ( (LA314_442==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 989;}
                        else if ( (LA314_442==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 990;}
                        else if ( (LA314_442==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 991;}
                        else if ( (LA314_442==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 992;}
                        else if ( (LA314_442==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 993;}
                        else if ( (LA314_442==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 994;}
                        else if ( (LA314_442==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 995;}
                        else if ( (LA314_442==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 996;}
                        else if ( (LA314_442==FOR) && (synpred5_EsperEPL2Grammar())) {s = 997;}
                        else if ( (LA314_442==EOF) && (synpred5_EsperEPL2Grammar())) {s = 998;}
                        else if ( (LA314_442==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 999;}
                        else if ( (LA314_442==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1000;}
                        else if ( (LA314_442==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1001;}
                        else if ( (LA314_442==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1002;}
                        else if ( (LA314_442==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1003;}
                        else if ( (LA314_442==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1004;}
                        else if ( (LA314_442==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1005;}
                        else if ( (LA314_442==AS) && (synpred5_EsperEPL2Grammar())) {s = 1006;}
                        else if ( (LA314_442==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1007;}
                        else if ( (LA314_442==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1008;}
                        else if ( (LA314_442==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1009;}
                        else if ( (LA314_442==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1010;}
                        else if ( (LA314_442==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1011;}
                        else if ( (LA314_442==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1012;}
                        else if ( (LA314_442==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1013;}
                        else if ( (LA314_442==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1014;}
                        else if ( (LA314_442==END) && (synpred5_EsperEPL2Grammar())) {s = 1015;}
                        else if ( (LA314_442==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1016;}
                        else if ( (LA314_442==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1017;}
                        else if ( (LA314_442==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1018;}
                        else if ( (LA314_442==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1019;}
                        else if ( (LA314_442==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1020;}
                        else if ( (LA314_442==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1021;}
                        else if ( (LA314_442==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1022;}
                        else if ( (LA314_442==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1023;}
                        else if ( (LA314_442==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1024;}
                        else if ( (LA314_442==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1025;}
                        else if ( (LA314_442==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1026;}
                        else if ( (LA314_442==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1027;}
                        else if ( (LA314_442==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1028;}
                        else if ( (LA314_442==DOT) ) {s = 1029;}
                        input.seek(index314_442);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA314_443 = input.LA(1);
                        int index314_443 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_443==LPAREN) ) {s = 1030;}
                        else if ( (LA314_443==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1031;}
                        else if ( (LA314_443==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1032;}
                        else if ( (LA314_443==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1033;}
                        else if ( (LA314_443==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1034;}
                        else if ( (LA314_443==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1035;}
                        else if ( (LA314_443==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1036;}
                        else if ( (LA314_443==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1037;}
                        else if ( (LA314_443==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1038;}
                        else if ( (LA314_443==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1039;}
                        else if ( (LA314_443==LT) && (synpred5_EsperEPL2Grammar())) {s = 1040;}
                        else if ( (LA314_443==GT) && (synpred5_EsperEPL2Grammar())) {s = 1041;}
                        else if ( (LA314_443==LE) && (synpred5_EsperEPL2Grammar())) {s = 1042;}
                        else if ( (LA314_443==GE) && (synpred5_EsperEPL2Grammar())) {s = 1043;}
                        else if ( (LA314_443==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1044;}
                        else if ( (LA314_443==IS) && (synpred5_EsperEPL2Grammar())) {s = 1045;}
                        else if ( (LA314_443==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1046;}
                        else if ( (LA314_443==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1047;}
                        else if ( (LA314_443==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1048;}
                        else if ( (LA314_443==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1049;}
                        else if ( (LA314_443==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1050;}
                        else if ( (LA314_443==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1051;}
                        else if ( (LA314_443==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1052;}
                        else if ( (LA314_443==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1053;}
                        else if ( (LA314_443==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1054;}
                        else if ( (LA314_443==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1055;}
                        else if ( (LA314_443==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1056;}
                        else if ( (LA314_443==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1057;}
                        else if ( (LA314_443==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1058;}
                        else if ( (LA314_443==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1059;}
                        else if ( (LA314_443==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1060;}
                        else if ( (LA314_443==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1061;}
                        else if ( (LA314_443==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1062;}
                        else if ( (LA314_443==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1063;}
                        else if ( (LA314_443==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1064;}
                        else if ( (LA314_443==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1065;}
                        else if ( (LA314_443==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1066;}
                        else if ( (LA314_443==AS) && (synpred5_EsperEPL2Grammar())) {s = 1067;}
                        else if ( (LA314_443==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1068;}
                        else if ( (LA314_443==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1069;}
                        else if ( (LA314_443==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1070;}
                        else if ( (LA314_443==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1071;}
                        else if ( (LA314_443==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1072;}
                        else if ( (LA314_443==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1073;}
                        else if ( (LA314_443==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1074;}
                        else if ( (LA314_443==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1075;}
                        else if ( (LA314_443==END) && (synpred5_EsperEPL2Grammar())) {s = 1076;}
                        else if ( (LA314_443==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1077;}
                        else if ( (LA314_443==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1078;}
                        else if ( (LA314_443==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1079;}
                        else if ( (LA314_443==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1080;}
                        else if ( (LA314_443==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1081;}
                        else if ( (LA314_443==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1082;}
                        else if ( (LA314_443==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1083;}
                        else if ( (LA314_443==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1084;}
                        else if ( (LA314_443==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1085;}
                        else if ( (LA314_443==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1086;}
                        else if ( (LA314_443==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1087;}
                        else if ( (LA314_443==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1088;}
                        else if ( (LA314_443==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1089;}
                        else if ( (LA314_443==DOT) ) {s = 1090;}
                        input.seek(index314_443);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA314_450 = input.LA(1);
                        int index314_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_450==LPAREN) ) {s = 1091;}
                        else if ( (LA314_450==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1092;}
                        else if ( (LA314_450==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1093;}
                        else if ( (LA314_450==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1094;}
                        else if ( (LA314_450==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1095;}
                        else if ( (LA314_450==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1096;}
                        else if ( (LA314_450==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1097;}
                        else if ( (LA314_450==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1098;}
                        else if ( (LA314_450==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1099;}
                        else if ( (LA314_450==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1100;}
                        else if ( (LA314_450==LT) && (synpred5_EsperEPL2Grammar())) {s = 1101;}
                        else if ( (LA314_450==GT) && (synpred5_EsperEPL2Grammar())) {s = 1102;}
                        else if ( (LA314_450==LE) && (synpred5_EsperEPL2Grammar())) {s = 1103;}
                        else if ( (LA314_450==GE) && (synpred5_EsperEPL2Grammar())) {s = 1104;}
                        else if ( (LA314_450==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1105;}
                        else if ( (LA314_450==IS) && (synpred5_EsperEPL2Grammar())) {s = 1106;}
                        else if ( (LA314_450==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1107;}
                        else if ( (LA314_450==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1108;}
                        else if ( (LA314_450==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1109;}
                        else if ( (LA314_450==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1110;}
                        else if ( (LA314_450==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1111;}
                        else if ( (LA314_450==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1112;}
                        else if ( (LA314_450==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1113;}
                        else if ( (LA314_450==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1114;}
                        else if ( (LA314_450==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1115;}
                        else if ( (LA314_450==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1116;}
                        else if ( (LA314_450==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1117;}
                        else if ( (LA314_450==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1118;}
                        else if ( (LA314_450==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1119;}
                        else if ( (LA314_450==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1120;}
                        else if ( (LA314_450==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1121;}
                        else if ( (LA314_450==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1122;}
                        else if ( (LA314_450==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1123;}
                        else if ( (LA314_450==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1124;}
                        else if ( (LA314_450==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1125;}
                        else if ( (LA314_450==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1126;}
                        else if ( (LA314_450==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1127;}
                        else if ( (LA314_450==AS) && (synpred5_EsperEPL2Grammar())) {s = 1128;}
                        else if ( (LA314_450==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1129;}
                        else if ( (LA314_450==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1130;}
                        else if ( (LA314_450==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1131;}
                        else if ( (LA314_450==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1132;}
                        else if ( (LA314_450==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1133;}
                        else if ( (LA314_450==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1134;}
                        else if ( (LA314_450==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1135;}
                        else if ( (LA314_450==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1136;}
                        else if ( (LA314_450==END) && (synpred5_EsperEPL2Grammar())) {s = 1137;}
                        else if ( (LA314_450==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1138;}
                        else if ( (LA314_450==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1139;}
                        else if ( (LA314_450==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1140;}
                        else if ( (LA314_450==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1141;}
                        else if ( (LA314_450==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1142;}
                        else if ( (LA314_450==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1143;}
                        else if ( (LA314_450==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1144;}
                        else if ( (LA314_450==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1145;}
                        else if ( (LA314_450==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1146;}
                        else if ( (LA314_450==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1147;}
                        else if ( (LA314_450==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA314_450==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA314_450==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA314_450==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1151;}
                        input.seek(index314_450);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA314_451 = input.LA(1);
                        int index314_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_451==LPAREN) ) {s = 1152;}
                        else if ( (LA314_451==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA314_451==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA314_451==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA314_451==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA314_451==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA314_451==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA314_451==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA314_451==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA314_451==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA314_451==LT) && (synpred5_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA314_451==GT) && (synpred5_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA314_451==LE) && (synpred5_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA314_451==GE) && (synpred5_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA314_451==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA314_451==IS) && (synpred5_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA314_451==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA314_451==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA314_451==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA314_451==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA314_451==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA314_451==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA314_451==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA314_451==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA314_451==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA314_451==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA314_451==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA314_451==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA314_451==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA314_451==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA314_451==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA314_451==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA314_451==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA314_451==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA314_451==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA314_451==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA314_451==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA314_451==AS) && (synpred5_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA314_451==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA314_451==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA314_451==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA314_451==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA314_451==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA314_451==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA314_451==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA314_451==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA314_451==END) && (synpred5_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA314_451==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA314_451==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA314_451==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA314_451==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA314_451==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA314_451==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA314_451==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA314_451==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA314_451==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA314_451==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA314_451==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA314_451==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA314_451==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA314_451==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1212;}
                        input.seek(index314_451);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA314_495 = input.LA(1);
                        int index314_495 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_495==LPAREN) ) {s = 1213;}
                        else if ( (LA314_495==DOT) ) {s = 1214;}
                        else if ( (LA314_495==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA314_495==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA314_495==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA314_495==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA314_495==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA314_495==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA314_495==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA314_495==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA314_495==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA314_495==LT) && (synpred5_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA314_495==GT) && (synpred5_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA314_495==LE) && (synpred5_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA314_495==GE) && (synpred5_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA314_495==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA314_495==IS) && (synpred5_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA314_495==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA314_495==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA314_495==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA314_495==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA314_495==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA314_495==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA314_495==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA314_495==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA314_495==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA314_495==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA314_495==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA314_495==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA314_495==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA314_495==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA314_495==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA314_495==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA314_495==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA314_495==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA314_495==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA314_495==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA314_495==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA314_495==AS) && (synpred5_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA314_495==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA314_495==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA314_495==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA314_495==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA314_495==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA314_495==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA314_495==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA314_495==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA314_495==END) && (synpred5_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA314_495==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA314_495==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA314_495==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA314_495==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA314_495==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA314_495==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA314_495==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA314_495==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA314_495==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA314_495==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA314_495==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA314_495==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA314_495==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1273;}
                        input.seek(index314_495);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA314_496 = input.LA(1);
                        int index314_496 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_496==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA314_496==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA314_496==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA314_496==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA314_496==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA314_496==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA314_496==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA314_496==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA314_496==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA314_496==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA314_496==LT) && (synpred5_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA314_496==GT) && (synpred5_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA314_496==LE) && (synpred5_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA314_496==GE) && (synpred5_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA314_496==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA314_496==IS) && (synpred5_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA314_496==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA314_496==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA314_496==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA314_496==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA314_496==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA314_496==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA314_496==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA314_496==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA314_496==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA314_496==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA314_496==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA314_496==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA314_496==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA314_496==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA314_496==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA314_496==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA314_496==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA314_496==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA314_496==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA314_496==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA314_496==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA314_496==AS) && (synpred5_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA314_496==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA314_496==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA314_496==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA314_496==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA314_496==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA314_496==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA314_496==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA314_496==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA314_496==END) && (synpred5_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA314_496==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA314_496==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA314_496==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA314_496==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA314_496==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA314_496==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA314_496==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA314_496==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA314_496==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA314_496==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA314_496==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA314_496==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA314_496==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA314_496==DOT) ) {s = 1334;}
                        input.seek(index314_496);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA314_497 = input.LA(1);
                        int index314_497 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_497==LPAREN) ) {s = 1335;}
                        else if ( (LA314_497==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA314_497==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA314_497==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA314_497==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA314_497==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA314_497==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA314_497==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA314_497==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA314_497==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA314_497==LT) && (synpred5_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA314_497==GT) && (synpred5_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA314_497==LE) && (synpred5_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA314_497==GE) && (synpred5_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA314_497==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA314_497==IS) && (synpred5_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA314_497==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA314_497==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA314_497==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA314_497==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA314_497==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA314_497==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA314_497==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA314_497==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA314_497==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA314_497==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA314_497==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA314_497==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA314_497==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA314_497==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA314_497==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA314_497==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA314_497==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA314_497==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA314_497==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA314_497==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA314_497==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA314_497==AS) && (synpred5_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA314_497==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA314_497==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA314_497==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA314_497==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA314_497==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA314_497==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA314_497==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA314_497==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA314_497==END) && (synpred5_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA314_497==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA314_497==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA314_497==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA314_497==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA314_497==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA314_497==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA314_497==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA314_497==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA314_497==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA314_497==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA314_497==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA314_497==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA314_497==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA314_497==DOT) ) {s = 1395;}
                        input.seek(index314_497);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA314_504 = input.LA(1);
                        int index314_504 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_504==LPAREN) ) {s = 1396;}
                        else if ( (LA314_504==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA314_504==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA314_504==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA314_504==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA314_504==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA314_504==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA314_504==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA314_504==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA314_504==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA314_504==LT) && (synpred5_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA314_504==GT) && (synpred5_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA314_504==LE) && (synpred5_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA314_504==GE) && (synpred5_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA314_504==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA314_504==IS) && (synpred5_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA314_504==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA314_504==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA314_504==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA314_504==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA314_504==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA314_504==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA314_504==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA314_504==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA314_504==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA314_504==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA314_504==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA314_504==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA314_504==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA314_504==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA314_504==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA314_504==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA314_504==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA314_504==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA314_504==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA314_504==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA314_504==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA314_504==AS) && (synpred5_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA314_504==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA314_504==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA314_504==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA314_504==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA314_504==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA314_504==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA314_504==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA314_504==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA314_504==END) && (synpred5_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA314_504==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA314_504==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA314_504==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA314_504==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA314_504==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA314_504==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA314_504==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA314_504==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA314_504==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA314_504==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA314_504==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA314_504==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA314_504==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA314_504==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1456;}
                        input.seek(index314_504);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA314_505 = input.LA(1);
                        int index314_505 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_505==LPAREN) ) {s = 1457;}
                        else if ( (LA314_505==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA314_505==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA314_505==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA314_505==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA314_505==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA314_505==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA314_505==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA314_505==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA314_505==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA314_505==LT) && (synpred5_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA314_505==GT) && (synpred5_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA314_505==LE) && (synpred5_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA314_505==GE) && (synpred5_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA314_505==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA314_505==IS) && (synpred5_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA314_505==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA314_505==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA314_505==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA314_505==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA314_505==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA314_505==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA314_505==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA314_505==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA314_505==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA314_505==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA314_505==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA314_505==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA314_505==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA314_505==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA314_505==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA314_505==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA314_505==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA314_505==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA314_505==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA314_505==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA314_505==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA314_505==AS) && (synpred5_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA314_505==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA314_505==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA314_505==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA314_505==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA314_505==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA314_505==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA314_505==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA314_505==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA314_505==END) && (synpred5_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA314_505==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA314_505==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA314_505==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA314_505==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA314_505==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA314_505==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA314_505==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA314_505==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA314_505==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA314_505==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA314_505==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA314_505==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA314_505==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA314_505==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1517;}
                        input.seek(index314_505);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA314_792 = input.LA(1);
                        int index314_792 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_792==LPAREN) ) {s = 1704;}
                        else if ( (LA314_792==DOT) ) {s = 1705;}
                        else if ( (LA314_792==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA314_792==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA314_792==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA314_792==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA314_792==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA314_792==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA314_792==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA314_792==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA314_792==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA314_792==LT) && (synpred5_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA314_792==GT) && (synpred5_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA314_792==LE) && (synpred5_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA314_792==GE) && (synpred5_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA314_792==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA314_792==IS) && (synpred5_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA314_792==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA314_792==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA314_792==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA314_792==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA314_792==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA314_792==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA314_792==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA314_792==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA314_792==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA314_792==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA314_792==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA314_792==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA314_792==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA314_792==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA314_792==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA314_792==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA314_792==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA314_792==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA314_792==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA314_792==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA314_792==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA314_792==AS) && (synpred5_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA314_792==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA314_792==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA314_792==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA314_792==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA314_792==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA314_792==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA314_792==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA314_792==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA314_792==END) && (synpred5_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA314_792==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA314_792==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA314_792==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA314_792==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA314_792==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA314_792==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA314_792==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA314_792==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA314_792==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA314_792==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA314_792==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA314_792==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA314_792==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1764;}
                        input.seek(index314_792);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA314_793 = input.LA(1);
                        int index314_793 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_793==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA314_793==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA314_793==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA314_793==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA314_793==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA314_793==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA314_793==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA314_793==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA314_793==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA314_793==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA314_793==LT) && (synpred5_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA314_793==GT) && (synpred5_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA314_793==LE) && (synpred5_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA314_793==GE) && (synpred5_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA314_793==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA314_793==IS) && (synpred5_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA314_793==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA314_793==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA314_793==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA314_793==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA314_793==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA314_793==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA314_793==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA314_793==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA314_793==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA314_793==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA314_793==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA314_793==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA314_793==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA314_793==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA314_793==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA314_793==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA314_793==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA314_793==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA314_793==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA314_793==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA314_793==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA314_793==AS) && (synpred5_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA314_793==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA314_793==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA314_793==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA314_793==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA314_793==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA314_793==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA314_793==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA314_793==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA314_793==END) && (synpred5_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA314_793==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA314_793==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA314_793==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA314_793==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA314_793==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA314_793==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA314_793==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA314_793==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA314_793==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA314_793==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA314_793==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA314_793==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA314_793==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA314_793==DOT) ) {s = 1825;}
                        input.seek(index314_793);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA314_794 = input.LA(1);
                        int index314_794 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_794==LPAREN) ) {s = 1826;}
                        else if ( (LA314_794==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA314_794==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA314_794==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA314_794==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA314_794==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA314_794==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA314_794==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA314_794==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA314_794==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA314_794==LT) && (synpred5_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA314_794==GT) && (synpred5_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA314_794==LE) && (synpred5_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA314_794==GE) && (synpred5_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA314_794==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA314_794==IS) && (synpred5_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA314_794==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA314_794==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA314_794==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA314_794==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA314_794==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA314_794==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA314_794==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA314_794==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA314_794==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA314_794==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA314_794==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA314_794==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA314_794==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA314_794==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA314_794==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA314_794==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA314_794==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA314_794==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA314_794==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA314_794==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA314_794==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA314_794==AS) && (synpred5_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA314_794==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA314_794==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA314_794==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA314_794==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA314_794==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA314_794==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA314_794==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA314_794==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA314_794==END) && (synpred5_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA314_794==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA314_794==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA314_794==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA314_794==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA314_794==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA314_794==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA314_794==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA314_794==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA314_794==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA314_794==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA314_794==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA314_794==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA314_794==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA314_794==DOT) ) {s = 1886;}
                        input.seek(index314_794);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA314_801 = input.LA(1);
                        int index314_801 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_801==LPAREN) ) {s = 1887;}
                        else if ( (LA314_801==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA314_801==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA314_801==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA314_801==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA314_801==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA314_801==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA314_801==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA314_801==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA314_801==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA314_801==LT) && (synpred5_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA314_801==GT) && (synpred5_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA314_801==LE) && (synpred5_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA314_801==GE) && (synpred5_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA314_801==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA314_801==IS) && (synpred5_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA314_801==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA314_801==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA314_801==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA314_801==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA314_801==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA314_801==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA314_801==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA314_801==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA314_801==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA314_801==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA314_801==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA314_801==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA314_801==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA314_801==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA314_801==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA314_801==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA314_801==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA314_801==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA314_801==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA314_801==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA314_801==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA314_801==AS) && (synpred5_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA314_801==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA314_801==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA314_801==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA314_801==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA314_801==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA314_801==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA314_801==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA314_801==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA314_801==END) && (synpred5_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA314_801==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA314_801==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA314_801==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA314_801==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA314_801==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA314_801==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA314_801==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA314_801==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA314_801==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA314_801==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA314_801==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA314_801==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA314_801==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA314_801==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1947;}
                        input.seek(index314_801);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA314_802 = input.LA(1);
                        int index314_802 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_802==LPAREN) ) {s = 1948;}
                        else if ( (LA314_802==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA314_802==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA314_802==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA314_802==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA314_802==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA314_802==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA314_802==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA314_802==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA314_802==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA314_802==LT) && (synpred5_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA314_802==GT) && (synpred5_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA314_802==LE) && (synpred5_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA314_802==GE) && (synpred5_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA314_802==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA314_802==IS) && (synpred5_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA314_802==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA314_802==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA314_802==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA314_802==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA314_802==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA314_802==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA314_802==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA314_802==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA314_802==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA314_802==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA314_802==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA314_802==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA314_802==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA314_802==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA314_802==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA314_802==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA314_802==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA314_802==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA314_802==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA314_802==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA314_802==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA314_802==AS) && (synpred5_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA314_802==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA314_802==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA314_802==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA314_802==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA314_802==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA314_802==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA314_802==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA314_802==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA314_802==END) && (synpred5_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA314_802==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA314_802==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA314_802==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA314_802==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA314_802==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA314_802==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA314_802==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA314_802==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA314_802==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA314_802==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA314_802==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA314_802==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA314_802==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA314_802==DOT) && (synpred5_EsperEPL2Grammar())) {s = 2008;}
                        input.seek(index314_802);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA314_871 = input.LA(1);
                        int index314_871 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_871);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA314_902 = input.LA(1);
                        int index314_902 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_902);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA314_908 = input.LA(1);
                        int index314_908 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_908);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA314_909 = input.LA(1);
                        int index314_909 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_909);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA314_1029 = input.LA(1);
                        int index314_1029 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1029);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA314_1030 = input.LA(1);
                        int index314_1030 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1030);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA314_1090 = input.LA(1);
                        int index314_1090 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1090);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA314_1091 = input.LA(1);
                        int index314_1091 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1091);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA314_1152 = input.LA(1);
                        int index314_1152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1152);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA314_1213 = input.LA(1);
                        int index314_1213 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1213);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA314_1214 = input.LA(1);
                        int index314_1214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1214);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA314_1334 = input.LA(1);
                        int index314_1334 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1334);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA314_1335 = input.LA(1);
                        int index314_1335 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1335);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA314_1395 = input.LA(1);
                        int index314_1395 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1395);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA314_1396 = input.LA(1);
                        int index314_1396 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1396);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA314_1457 = input.LA(1);
                        int index314_1457 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1457);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA314_1543 = input.LA(1);
                        int index314_1543 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1543);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA314_1574 = input.LA(1);
                        int index314_1574 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1574);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA314_1605 = input.LA(1);
                        int index314_1605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1605);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA314_1636 = input.LA(1);
                        int index314_1636 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1636);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA314_1667 = input.LA(1);
                        int index314_1667 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1667);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA314_1698 = input.LA(1);
                        int index314_1698 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1698);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA314_1704 = input.LA(1);
                        int index314_1704 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1704);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA314_1705 = input.LA(1);
                        int index314_1705 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1705);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA314_1825 = input.LA(1);
                        int index314_1825 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1825);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA314_1826 = input.LA(1);
                        int index314_1826 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1826);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA314_1886 = input.LA(1);
                        int index314_1886 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1886);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA314_1887 = input.LA(1);
                        int index314_1887 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1887);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA314_1948 = input.LA(1);
                        int index314_1948 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index314_1948);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 314, _s, input);
            error(nvae);
            throw nvae;
        }
    }
}
